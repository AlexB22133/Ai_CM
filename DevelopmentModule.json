{
"areas":[
  {
    "topic": "Analytics",
    "href": "https://developer.criticalmanufacturing.com/analytics/",
    "flag": true,
    "definition": [
      {
        "topic": "Persistency and Analytics Tier#",
        "definition": "# This section describes the extensibility points existing in cmFoundation at the Persistency and Analytics Tier which comprises the aspects related with databases and business intelligence. As described before in the Business Tier, the model extensions in the database are automatically performed by the system when executing the Generate Schema command. Warning Manual changes to database tables, creation of new tables or deletion of existing ones is not supported. The system already has all the necessary means to extend the data model. The only exception is the creation of composite indexes when performance requires it. "
      },
      {
        "topic": "Development Tools#",
        "definition": "# For customization and development on the Persistency and Analytics Tier, the following tools are required: Microsoft SQL Server Management Studio, which is part of the SQL Server ™ installation Microsoft Report Builder (http://www.microsoft.com/en-us/download/details.aspx?id=29072 ⧉) Microsoft Visual Studio [Optional] (http://www.microsoft.com/vstudio ⧉) for SQL Server Integration Services (SSIS) development Microsoft Visual Studio 2012 with BIDS (Business Intelligence Development Studio) for Analysis Services development Microsoft SQL Server Management Studio, which is part of the SQL Server ™ installation Microsoft Report Builder (http://www.microsoft.com/en-us/download/details.aspx?id=29072 ⧉) http://www.microsoft.com/en-us/download/details.aspx?id=29072 ⧉ Microsoft Visual Studio [Optional] (http://www.microsoft.com/vstudio ⧉) for SQL Server Integration Services (SSIS) development http://www.microsoft.com/vstudio ⧉ Microsoft Visual Studio 2012 with BIDS (Business Intelligence Development Studio) for Analysis Services development "
      },
      {
        "topic": "Development Skills#",
        "definition": "# The customization of the Persistency and Analytics Tier requires some knowledge on the following areas: SQL Server SQL T-SQL SQL Server SQL T-SQL "
      },
      {
        "topic": "Extensibility Options#",
        "definition": "# The following list describes the different mechanisms for extending the Persistency and Analytics Tier. Each topic is explained in detail in a separate section. Creating Custom Reports - any custom reports that includes critical manufacturing and/or data from other sources displayed in a tabular or graphical form or even a combination of both Creating Custom Data Warehouse Cubes - a cube is a multi-dimensional organization of data Customizing the Reports Image Logo - the image that appears in the top left of every report Subscribing To Reports - describes how to take advantage of a report subscription mechanism. Creating Custom Reports - any custom reports that includes critical manufacturing and/or data from other sources displayed in a tabular or graphical form or even a combination of both Creating Custom Reports Creating Custom Data Warehouse Cubes - a cube is a multi-dimensional organization of data Creating Custom Data Warehouse Cubes Customizing the Reports Image Logo - the image that appears in the top left of every report Customizing the Reports Image Logo Subscribing To Reports - describes how to take advantage of a report subscription mechanism. Subscribing To Reports "
      }
    ],
    "submodulos": [
      {
        "topic": "Create Custom Reports",
        "definition": [
          {
            "topic": "Creating Custom Reports#",
            "definition": "# Critical Manufacturing reporting is based on SQL Server ™ Reporting Services. The Critical Manufacturing user interface accesses SQL Server ™ Reporting Services which organizes reports into a folder structure. Report definitions are XML files with a particular SQL Server Reporting Services XML schema and are stored with the extension .rdl. To determine the SQL Server ™ Reporting Services folder root, go to the Application Administration Page Group and then navigate to the configuration item located in /Cmf/System/Configuration/Reporting/Report Server and /Cmf/System/Configuration/Reporting/Reports Root Folder/. The configuration values will look something like http://navigo.critical.pt/ReportServer_ODS/ReportViewer.aspx ⧉ and /Reports-FalconDiveSprint. If one opens a browser and uses the URL defined in the Report Server configuration item, one will get access to the Reporting Services folder root as shown in the next picture. Notice that the folder identified in the Reports Root Folder is shown in listed in the folder list. It's possible to navigate and open reports directly in the internet browser by clicking on the report URL. http://navigo.critical.pt/ReportServer_ODS/ReportViewer.aspx ⧉   The full featured SQL Server ™ Reporting Services browser is accessed by constructing an URL in the following form: replace the \"ReportServer\" string in the Report Server configuration item value with \"Reports_\" and replace the string \"ReportViewer.aspx\" by \"Pages/Folder.aspx\". In the case above, the URL would be http://navigo.critical.pt/Reports_ODS/Pages/Folder.aspx ⧉. Entering this URL in the internet browser will provide access to a page that looks like the one in the picture below. http://navigo.critical.pt/Reports_ODS/Pages/Folder.aspx ⧉   Critical Manufacturing will automatically read the folder structure and will display the available reports for the user. Info If a new folder is created is necessary to invalidate the Security Cache (Security -> Invalidate Cache) and refresh the Navigation tree in order for the Folder to become visible.   "
          },
          {
            "topic": "Creating a New Report#",
            "definition": "# To create a new report, press the Report Builder in the SQL Server Reporting Services. Info Report Builder is an application which is downloaded on demand from the SQL Server Reporting Services site and which is used to create and edit reports. Once Report Builder is executed, to create a new report, go to the file menu (on the top-left of the application) and select New.   Select the Report Type that is intended to be created. The most common one is the Table or Matrix Wizard. In the next screen it's necessary to create or select an existing data set. Select Create a dataset. In the next step, it's necessary to create or select an existing data source. Because Critical Manufacturing creates some re-usable data sources as part of the standard installation, it's recommended that the user re-uses these data sources. By clicking on Browse and then navigating to the Datasources folder, it's possible to select a data source that refers to the Critical Manufacturing ODS, Analysis Services and Data Warehouse databases. It's also possible to create new connections, even for other databases which are not related with Critical Manufacturing. It's always a good idea to test the connectivity to the database by pressing Test Connection. Select the Report Type that is intended to be created. The most common one is the Table or Matrix Wizard. Select the Report Type that is intended to be created. The most common one is the Table or Matrix Wizard.   In the next screen it's necessary to create or select an existing data set. Select Create a dataset. In the next screen it's necessary to create or select an existing data set. Select Create a dataset. In the next step, it's necessary to create or select an existing data source. Because Critical Manufacturing creates some re-usable data sources as part of the standard installation, it's recommended that the user re-uses these data sources. By clicking on Browse and then navigating to the Datasources folder, it's possible to select a data source that refers to the Critical Manufacturing ODS, Analysis Services and Data Warehouse databases. It's also possible to create new connections, even for other databases which are not related with Critical Manufacturing. It's always a good idea to test the connectivity to the database by pressing Test Connection. In the next step, it's necessary to create or select an existing data source. Because Critical Manufacturing creates some re-usable data sources as part of the standard installation, it's recommended that the user re-uses these data sources. By clicking on Browse and then navigating to the Datasources folder, it's possible to select a data source that refers to the Critical Manufacturing ODS, Analysis Services and Data Warehouse databases. It's also possible to create new connections, even for other databases which are not related with Critical Manufacturing. It's always a good idea to test the connectivity to the database by pressing Test Connection. Info Regardless of whether re-using or creating a new database connection it's necessary to have a valid database account with read permissions. In the Design a query screen, it's necessary to specify the table, view or SQL Command that will be used for the report. It's possible to graphically add or remove fields, edit relationships and apply filters. Alternately, and by clicking Edit As Text, one can enter the query text directly. It's recommended to test the results of the query by pressing Run Query. In the Design a query screen, it's necessary to specify the table, view or SQL Command that will be used for the report. It's possible to graphically add or remove fields, edit relationships and apply filters. Alternately, and by clicking Edit As Text, one can enter the query text directly. It's recommended to test the results of the query by pressing Run Query. Info It's very useful to test the Query first in the SQL Server Management Studio. In the Arrange fields screen it's possible, just by drag-and-drop to select which fields should be listed as columns, as rows and as values. Note that the value columns are always aggregated and a minimum of one value field is required. In the Arrange fields screen it's possible, just by drag-and-drop to select which fields should be listed as columns, as rows and as values. Note that the value columns are always aggregated and a minimum of one value field is required.   In the Choose the layout screen, it's possible to select the grouping and drill-down options for the report. In the Choose the layout screen, it's possible to select the grouping and drill-down options for the report.   Finally, in the Choose a style screen, it's possible to select the theme colors for the report. Finally, in the Choose a style screen, it's possible to select the theme colors for the report.   In the main Report Builder design window it's possible to edit all the report options that were defined using the wizard, such as the Dataset query, aggregation functions and general layout options. It's also possible to define additional options, such as parameters and images. To preview and test the report, it's only necessary to press F5. When the design of the Report is complete, it's necessary to save it. Pressing the Save button in the Report Builder toolbar, one will be prompted to select a location to save the report and also to give it a name. Be sure to select a location which is visible from the Critical Manufacturing user interface as the GUI only looks for folders and reports located under the defined Reports Root Folder of the defined Report Server root (for example: http://navigo.critical.pt/ReportServer_ODS/Reports-FalconDiveSprint). ⧉ After deploying Custom Reports on an SSRS (SQL Server Reporting Services) instance linked to a Critical Manufacturing MES Environment, and for it to be accessible on the MES GUI, the Host cache needs to be reloaded. This can be done by performing the Invalidate Security Cache Operation - or by restarting the Host Service. In the main Report Builder design window it's possible to edit all the report options that were defined using the wizard, such as the Dataset query, aggregation functions and general layout options. It's also possible to define additional options, such as parameters and images. To preview and test the report, it's only necessary to press F5. When the design of the Report is complete, it's necessary to save it. Pressing the Save button in the Report Builder toolbar, one will be prompted to select a location to save the report and also to give it a name. Be sure to select a location which is visible from the Critical Manufacturing user interface as the GUI only looks for folders and reports located under the defined Reports Root Folder of the defined Report Server root (for example: http://navigo.critical.pt/ReportServer_ODS/Reports-FalconDiveSprint). ⧉ http://navigo.critical.pt/ReportServer_ODS/Reports-FalconDiveSprint). ⧉ After deploying Custom Reports on an SSRS (SQL Server Reporting Services) instance linked to a Critical Manufacturing MES Environment, and for it to be accessible on the MES GUI, the Host cache needs to be reloaded. This can be done by performing the Invalidate Security Cache Operation - or by restarting the Host Service. Info In order to publish a report in the SQL Server Reporting Services structure, it's necessary to have permissions on the folder structure. If you are uncertain about your permissions, please check with the application or database administrator. Info As a convenience, the Critical Manufacturing user interface will not show any folder or report that starts with the underscore character ('_'). This facility is very useful for reports containing sub reports or linked reports. For a complete online help about Report Builder, please refer this Link ⧉. Link ⧉ "
          },
          {
            "topic": "Modifying an Existing Report#",
            "definition": "# To edit an existing report, drill down the folder where the report is located, and in the drop-down option of the report, select Edit in Report Builder as shown in the next picture.   Warning It's strongly recommended that the standard reports are not modified. Instead, make a copy (Save As from Report Builder) or at least a backup (Download from the Reporting Services browser) of the original report. Please note that during a Critical Manufacturing upgrade installation, all the all the standard reports will be rewritten by the install procedure. For more information about how to edit the Report please refer to Creating New Reports section above "
          },
          {
            "topic": "Deleting an Existing Report#",
            "definition": "# To delete an existing report browse to the desired report and select Delete from the drop-down menu.   "
          },
          {
            "topic": "Creating Reusable Data Sources#",
            "definition": "# To create a new reusable Data Source follow the steps described below: Press New Data Source from the SQL Server ™ Reporting Services toolbar Press New Data Source from the SQL Server ™ Reporting Services toolbar   Provide the SQL Server ™ database connection properties as described in the figure below. When connecting to a SQL Server, the connection string is usually in the form: \"Data Source={ServerName}\\{InstanceName}; Initial Catalog={DatabaseName}, for example: \"Data Source=cmf-dbserver\\ods; Initial Catalog=FalconDiveSprintODS\". Notice that you need an account with valid credentials and with read-access in the database. It's recommended that you verify the connectivity to the database by pressing Test Connection. Press OK to create the Data Source. Provide the SQL Server ™ database connection properties as described in the figure below. When connecting to a SQL Server, the connection string is usually in the form: \"Data Source={ServerName}\\{InstanceName}; Initial Catalog={DatabaseName}, for example: \"Data Source=cmf-dbserver\\ods; Initial Catalog=FalconDiveSprintODS\". Notice that you need an account with valid credentials and with read-access in the database. It's recommended that you verify the connectivity to the database by pressing Test Connection. Press OK to create the Data Source.   "
          },
          {
            "topic": "Applying an Existing Data Source to a Report#",
            "definition": "# It's possible to apply an existing Data Source to a Report by selecting the report and in the drop-down menu select Manage.   In the Data Sources tab on the left-side, select Data Sources and then browse for an existing Data Source. Do not forget to click Apply to make the change effective.   "
          }
        ],
        "code": [
          {
            "topic": "Creating Custom Reports#",
            "code": "/Cmf/System/Configuration/Reporting/Report Server/Cmf/System/Configuration/Reporting/Reports Root Folder//Reports-FalconDiveSprint"
          },
          {
            "topic": "Creating Reusable Data Sources#",
            "code": "\"Data Source={ServerName}\\{InstanceName}; Initial Catalog={DatabaseName}\"Data Source=cmf-dbserver\\ods; Initial Catalog=FalconDiveSprintODS\""
          }
        ],
        "links": [
          {
            "topic": "Creating Custom Reports#",
            "links": [
              {
                "description": "Creating Custom Reports# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#creating-custom-reports"
              },
              {
                "description": "Creating Custom Reports# (2)",
                "link": "http://navigo.critical.pt/ReportServer_ODS/ReportViewer.aspx"
              },
              {
                "description": "Creating Custom Reports# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportServerBrowser01.png"
              },
              {
                "description": "Creating Custom Reports# (4)",
                "link": "http://navigo.critical.pt/Reports_ODS/Pages/Folder.aspx"
              },
              {
                "description": "Creating Custom Reports# (5)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportServerBrowser02.png"
              },
              {
                "description": "Creating Custom Reports# (6)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportServerTree01.png"
              }
            ]
          },
          {
            "topic": "Creating a New Report#",
            "links": [
              {
                "description": "Creating a New Report# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#creating-a-new-report"
              },
              {
                "description": "Creating a New Report# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderNewReport01.png"
              },
              {
                "description": "Creating a New Report# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderNewReport02.png"
              },
              {
                "description": "Creating a New Report# (4)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderNewReport03.png"
              },
              {
                "description": "Creating a New Report# (5)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderNewReport04.png"
              },
              {
                "description": "Creating a New Report# (6)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderNewReport05.png"
              },
              {
                "description": "Creating a New Report# (7)",
                "link": "http://navigo.critical.pt/ReportServer_ODS/Reports-FalconDiveSprint)."
              },
              {
                "description": "Creating a New Report# (8)",
                "link": "http://technet.microsoft.com/en-us/library/ee706623.aspx"
              }
            ]
          },
          {
            "topic": "Modifying an Existing Report#",
            "links": [
              {
                "description": "Modifying an Existing Report# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#modifying-an-existing-report"
              },
              {
                "description": "Modifying an Existing Report# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderModifyReport01.png"
              }
            ]
          },
          {
            "topic": "Deleting an Existing Report#",
            "links": [
              {
                "description": "Deleting an Existing Report# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#deleting-an-existing-report"
              },
              {
                "description": "Deleting an Existing Report# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderDeleteReport01.png"
              }
            ]
          },
          {
            "topic": "Creating Reusable Data Sources#",
            "links": [
              {
                "description": "Creating Reusable Data Sources# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#creating-reusable-data-sources"
              },
              {
                "description": "Creating Reusable Data Sources# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderReusableDatasources01.png"
              },
              {
                "description": "Creating Reusable Data Sources# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderReusableDatasources02.png"
              }
            ]
          },
          {
            "topic": "Applying an Existing Data Source to a Report#",
            "links": [
              {
                "description": "Applying an Existing Data Source to a Report# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customreports/#applying-an-existing-data-source-to-a-report"
              },
              {
                "description": "Applying an Existing Data Source to a Report# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderApplyDatasources01.png"
              },
              {
                "description": "Applying an Existing Data Source to a Report# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderApplyDatasources02.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/analytics/customreports/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Custom Data Warehouse Cubes",
        "definition": [
          {
            "topic": "Creating Custom Data Warehouse Cubes#",
            "definition": "# This page describes how to create a new Cube or Dimension as well as how to change the existing solution. It is possible to change/edit the Critical Manufacturing Data Warehouse solution using the following steps: If not yet installed, install Visual Studio 2012 with the BIDS (Business Intelligence Development Studio) option checked. Start Visual Studio 2012, choose File -> New… -> Project. Select “Business Intelligence Projects” as Project Type and then “Import Analysis Services 2012 Database”. Finally name your project, e.g. CriticalManufacturingMESASProject and press OK. In the next screen, type the CriticalManufacturingMES Analysis Services Database server and name and select Next. An import status window will appear. Please wait for the import process to complete. You should then see a window as shown in the next figure. Finally, press Finish. You should now have the CriticalManufacturingMES Analysis Services Project ready to add new dimensions, aggregations or calculations. Before making any change to the project, please read the following SQL Server online entry: Working with Analysis Services Projects and Databases in a Production Environment ⧉\n\nFor more information on Analysis Services Projects, please follow these links: - Defining an Analysis Services Project ⧉ - Defining an Analysis Services Database ⧉ After making the necessary changes, you will have to deploy the solution to the Analysis Services Server. For deployment information, please read the following BOL link: Deploying Analysis Services Projects ⧉ If not yet installed, install Visual Studio 2012 with the BIDS (Business Intelligence Development Studio) option checked. If not yet installed, install Visual Studio 2012 with the BIDS (Business Intelligence Development Studio) option checked. Start Visual Studio 2012, choose File -> New… -> Project. Select “Business Intelligence Projects” as Project Type and then “Import Analysis Services 2012 Database”. Finally name your project, e.g. CriticalManufacturingMESASProject and press OK. Start Visual Studio 2012, choose File -> New… -> Project. Select “Business Intelligence Projects” as Project Type and then “Import Analysis Services 2012 Database”. Finally name your project, e.g. CriticalManufacturingMESASProject and press OK.   In the next screen, type the CriticalManufacturingMES Analysis Services Database server and name and select Next. In the next screen, type the CriticalManufacturingMES Analysis Services Database server and name and select Next.   An import status window will appear. Please wait for the import process to complete. You should then see a window as shown in the next figure. An import status window will appear. Please wait for the import process to complete. You should then see a window as shown in the next figure.   Finally, press Finish. You should now have the CriticalManufacturingMES Analysis Services Project ready to add new dimensions, aggregations or calculations. Before making any change to the project, please read the following SQL Server online entry: Finally, press Finish. You should now have the CriticalManufacturingMES Analysis Services Project ready to add new dimensions, aggregations or calculations. Before making any change to the project, please read the following SQL Server online entry: Working with Analysis Services Projects and Databases in a Production Environment ⧉\n\nFor more information on Analysis Services Projects, please follow these links: - Defining an Analysis Services Project ⧉ - Defining an Analysis Services Database ⧉ Working with Analysis Services Projects and Databases in a Production Environment ⧉ Working with Analysis Services Projects and Databases in a Production Environment ⧉ For more information on Analysis Services Projects, please follow these links: - Defining an Analysis Services Project ⧉ - Defining an Analysis Services Database ⧉ Defining an Analysis Services Project ⧉ Defining an Analysis Services Database ⧉ After making the necessary changes, you will have to deploy the solution to the Analysis Services Server. For deployment information, please read the following BOL link: After making the necessary changes, you will have to deploy the solution to the Analysis Services Server. For deployment information, please read the following BOL link: Deploying Analysis Services Projects ⧉ Deploying Analysis Services Projects ⧉ Deploying Analysis Services Projects ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Creating Custom Data Warehouse Cubes#",
            "links": [
              {
                "description": "Creating Custom Data Warehouse Cubes# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customdatawarehousecubes/#creating-custom-data-warehouse-cubes"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/VSCustomCubes01.png"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/VSCustomCubes02.png"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (4)",
                "link": "https://developer.criticalmanufacturing.com/images/VSCustomCubes03.png"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (5)",
                "link": "https://docs.microsoft.com/en-us/sql/analysis-services/multidimensional-models/work-with-analysis-services-projects-and-databases-in-production"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (6)",
                "link": "https://docs.microsoft.com/en-us/sql/analysis-services/multidimensional-models/create-an-analysis-services-project-ssdt"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (7)",
                "link": "https://docs.microsoft.com/en-us/sql/analysis-services/multidimensional-models/multidimensional-model-databases-ssas"
              },
              {
                "description": "Creating Custom Data Warehouse Cubes# (8)",
                "link": "https://docs.microsoft.com/en-us/sql/analysis-services/multidimensional-models/deploy-analysis-services-projects-ssdt"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/analytics/customdatawarehousecubes/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Customizing the Reports Image Logo",
        "definition": [
          {
            "topic": "Customizing The Reports Image Logo#",
            "definition": "# The standard reports use a common image logo that is shown on the top left of the report and that can be customized by the user.   To modify the image, change the following configuration setting: /Cmf/System/Configuration/Reporting/LogoImage/ /Cmf/System/Configuration/Reporting/LogoImage/ Alternatively, you can override the standard image (logo.png). The image location refers to a SQL Server Reporting Services folder location under the defined Report Folder root which is stored in the configuration item below: /Cmf/System/Configuration/Reporting/Report Server /Cmf/System/Configuration/Reporting/Report Server To add an image to an existing folder, press Upload File from the toolbar.   "
          }
        ],
        "code": [
          {
            "topic": "Customizing The Reports Image Logo#",
            "code": "/Cmf/System/Configuration/Reporting/LogoImage//Cmf/System/Configuration/Reporting/Report Server"
          }
        ],
        "links": [
          {
            "topic": "Customizing The Reports Image Logo#",
            "links": [
              {
                "description": "Customizing The Reports Image Logo# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/customizereportlogo/#customizing-the-reports-image-logo"
              },
              {
                "description": "Customizing The Reports Image Logo# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderLogo01.png"
              },
              {
                "description": "Customizing The Reports Image Logo# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderLogo02.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/analytics/customizereportlogo/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Subscribing To Reports",
        "definition": [
          {
            "topic": "Subscribing To Reports#",
            "definition": "# SQL Server ™ Reporting Services allows reports to be subscribed. A subscribed report is a report that is scheduled to be generated and delivered based on a frequency defined by the user. To subscribe to a report, navigate to the SQL Server ™ Reporting Services folder where the report is located and in the drop-down menu select Subscribe. Info For information on how to determine the SQL Server Reporting Services folder root, please refer to the Creating Custom Reports section.   In the subscription page, provide the subscription details, specifically: The delivery method The file name The file path (where the report will be stored after it is generated). It is strongly recommended to use a shared folder. The render format (XML, CSV, PDF, HTML, ...) Credentials necessary to access the file path The schedule options The collection of values for the report parameters The delivery method The file name The file path (where the report will be stored after it is generated). It is strongly recommended to use a shared folder. The render format (XML, CSV, PDF, HTML, ...) Credentials necessary to access the file path The schedule options The collection of values for the report parameters   Press OK to save the subscription. For more information on how to subscribe to reports, please refer to the article: Subscriptions and Delivery (Reporting Services) ⧉ Subscriptions and Delivery (Reporting Services) ⧉ Subscriptions and Delivery (Reporting Services) ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Subscribing To Reports#",
            "links": [
              {
                "description": "Subscribing To Reports# (1)",
                "link": "https://developer.criticalmanufacturing.com/analytics/subscribereports/#subscribing-to-reports"
              },
              {
                "description": "Subscribing To Reports# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderSubscribe01.png"
              },
              {
                "description": "Subscribing To Reports# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/ReportBuilderSubscribe02.png"
              },
              {
                "description": "Subscribing To Reports# (4)",
                "link": "https://docs.microsoft.com/en-us/sql/reporting-services/subscriptions/subscriptions-and-delivery-reporting-services#bkmk_delivery_extensions"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/analytics/subscribereports/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "Persistency and Analytics Tier#",
        "links": [
          {
            "description": "Persistency and Analytics Tier# (1)",
            "link": "https://developer.criticalmanufacturing.com/analytics/#persistency-and-analytics-tier"
          }
        ]
      },
      {
        "topic": "Development Tools#",
        "links": [
          {
            "description": "Development Tools# (1)",
            "link": "https://developer.criticalmanufacturing.com/analytics/#development-tools"
          },
          {
            "description": "Development Tools# (2)",
            "link": "http://www.microsoft.com/en-us/download/details.aspx?id=29072"
          },
          {
            "description": "Development Tools# (3)",
            "link": "http://www.microsoft.com/vstudio"
          }
        ]
      },
      {
        "topic": "Development Skills#",
        "links": [
          {
            "description": "Development Skills# (1)",
            "link": "https://developer.criticalmanufacturing.com/analytics/#development-skills"
          }
        ]
      },
      {
        "topic": "Extensibility Options#",
        "links": [
          {
            "description": "Extensibility Options# (1)",
            "link": "https://developer.criticalmanufacturing.com/analytics/#extensibility-options"
          },
          {
            "description": "Extensibility Options# (2)",
            "link": "https://developer.criticalmanufacturing.com/analytics/customreports/"
          },
          {
            "description": "Extensibility Options# (3)",
            "link": "https://developer.criticalmanufacturing.com/analytics/customdatawarehousecubes/"
          },
          {
            "description": "Extensibility Options# (4)",
            "link": "https://developer.criticalmanufacturing.com/analytics/customizereportlogo/"
          },
          {
            "description": "Extensibility Options# (5)",
            "link": "https://developer.criticalmanufacturing.com/analytics/subscribereports/"
          }
        ]
      }
    ]
  },
  {
    "topic": "Automation",
    "href": "https://developer.criticalmanufacturing.com/automation/",
    "flag": true,
    "definition": [
      {
        "topic": "Automation#",
        "definition": "# Critical Manufacturing MES is able to automate and integrate with equipment or equivalent interfaces using the Connect IoT module. Multiple protocol drivers for some of the most common interfaces used by shop floor equipment are already provided out of the box. The integration interface is an extensible mechanism where the logic is represented using flow-based programming. To get started, see the Environment Setup page. Environment Setup "
      }
    ],
    "submodulos": [
      {
        "topic": "Automation Controller Version Management",
        "definition": [
          {
            "topic": "Automation Controller Version Management#",
            "definition": "# This object represents an automation controller that is responsible to handle the full behavior of the automation process. The Automation Controller will orchestrate the behavior between the equipment and the MES system while harmonizing the relationships between the different Automation Protocols, using resources made available through the Automation Driver Definitions and modelled with the help of a visual Workflow designer where a user can create a set of operations to be performed by the system. Since this is an important part of IoT version management is of the outmost importance. In this document we will try to explain the process that allows the user to import, export, update versions and, eventually, downgrade to a previous version. "
          },
          {
            "topic": "Overview#",
            "definition": "# In this example, using objects provided by the Connect IoT module of Critical Manufacturing (Automation Protocol, Automation Driver Definition and Automation Controller), we will create the structures that will allow a user to understand the process of creation, execution, export, import, update and downgrade of an IoT scenario. For the purpose of this example, a protocol using the File-raw package will be configured. In order to create the appropriate structures to receive and handle the events on Critical Manufacturing, a number of steps will have to be followed: "
          },
          {
            "topic": "Pre-Setup#",
            "definition": "# It is assumed that the Connect IoT module is licensed and has been properly installed after the main installation by following the proper procedures listed in the Installation Guide, under the Connect IoT Installation ⧉ section. Two further settings are required: Connect IoT Installation ⧉ A specific configuration involves setting a property in any of the Entities that will be accessed and handled by an Automation Controller (e.g. a Resource). For this, the Connect IoT enabled property in the Entity Type page for the specific entity must be active. Another setting that is required is the use of an integration user account to be used by the Automation Manager. This can be set in the User page of the Administration section. A specific configuration involves setting a property in any of the Entities that will be accessed and handled by an Automation Controller (e.g. a Resource). For this, the Connect IoT enabled property in the Entity Type page for the specific entity must be active. A specific configuration involves setting a property in any of the Entities that will be accessed and handled by an Automation Controller (e.g. a Resource). For this, the Connect IoT enabled property in the Entity Type page for the specific entity must be active.   Another setting that is required is the use of an integration user account to be used by the Automation Manager. This can be set in the User page of the Administration section. Another setting that is required is the use of an integration user account to be used by the Automation Manager. This can be set in the User page of the Administration section. With these configurations performed, let's start with the Connect IoT configuration: "
          },
          {
            "topic": "Creating the Automation Protocol#",
            "definition": "# In the Business Data section of the main menu, navigate to the Automation Protocol tile and create a new entry. Provide a name for the Automation Protocol, bearing in mind that the name will identify the Protocol and will be used in the configuration of other entities, so make sure the name is meaningful for easy reference. Since we will be using a protocol based on the File-raw package, select the @criticalmanufacturing/connect-iot-file-raw package and whichever version is available and matching with the current installed version of the MES for maximum compatibility and select Next. An example of the values can be seen below:   Moving on to the Parameters section, the values presented are the default values from the package and do not need to be altered unless specifically required. (e.g. the IT department decided that all ports must be in a specific range. Those values can be configured here and will be inherited by all the Automation Driver Definitions based on this Automation Protocol) Info More information on the File Raw ⧉ page of the User Guide. File Raw ⧉ In the last section, a list of Data Types and Extended Data (attributes per object) is displayed so that the user is aware of what is available for configuration. Pressing Create will finish the creation of the Automation Protocol. "
          },
          {
            "topic": "Creating the Automation Driver Definition#",
            "definition": "# This object represents the automation driver, which consists of an automation protocol defining the version of the supported protocol as well as the definition of all available commands, events and properties. Being a versioned object, it is possible to have multiple driver definition versions running at the same time. A possible scenario for this feature is similar as to having an integration running for a specific set of machines, and another group of the same machine types running a new version for testing purposes for new features/bug fixes. This object should contain all the necessary definitions to address all necessary characteristics of the machine interface in order to fully support the automation integration. Depending on the selected protocol and version, additional attributes can be defined for each of the object entities. For this particular example we can select the \"Template\" option that will pre-fill, based the Properties, Events, Event Properties, Commands and Command Parameters.   As you can see on the next image, all the main properties are inserted and correctly filled.   "
          },
          {
            "topic": "Creating the Automation Controller#",
            "definition": "# This object represents an automation controller that is responsible to handle the full behavior of the automation process. The Automation Controller will orchestrate the behavior between the equipment and the MES system while harmonizing the relationships between the different Automation Protocols, using the configuration made available through the Automation Driver Definitions and modelled with the help of a visual Workflow designer where a user can create a set of operations to be performed by the system.   In the next panel, select the Automation Driver Definition created above. We can also select other driver definitions in order to enable connection to other machine types.   Moving on to the Tasks panel, we can select any type of task package that is specified in the ConnectIoT metadata and that are available in the system according to the installation.   First, let's create a new page in the Workflow to better mantain and organize our controller workflow. Press the \n button and \n the new page, calling it \"Control File Added\".   Now let's add a task that will monitor the Event of \"File Creation\" and react to it.   The resulting workflow should be similar to the presented.   "
          },
          {
            "topic": "Creating the Automation Manager#",
            "definition": "# The Automation Manager represents a server or dedicated computer that will be capable of running multiple Automation Controllers and multiple Automation Drivers. In a nutshell, the Automation Monitor process is the real responsible for the automation handling process; the Automation Manager process basically spawns/kills other processes. To create the Automation Manager we go once more to the Business Data menu page, select Automation Manager option and the New.   By default, the configuration is set to allow the Manager to run according to inferred system configurations, populated from values retrieved from the Configuration settings of the MES as well as from the actual Connect IoT metadata. This configuration can be seen be pressing the Configuration option on the Automation Manager page. The presented configuration is similar to the one presented on the next image.   "
          },
          {
            "topic": "Connecting to the Manager#",
            "definition": "# The next step involves creating the context in which the Automation Manager will run. In the Automation Controller page, press the Connect button, specify and Entity (in this example the Resource that we specified) and the Automation Manager that was created. Pressing Next will allow the user to select which instance will be running for each separate machine. Keeping a one-to-one relationship, select the same values as in the previous section and press Connect.   By pressing the Download button, we can get a compressed file with the entire configuration cloned from the default manager but updated with our own configuration values.   Info By doing this, a new token will be created in the profile of the user that extracts it and will allow it to be able to run the manager and associated workflows. More information on Automation Manager Configuration File in the Installation Guide. Automation Manager Configuration File   Since this is a development scenario, we can test the Automation Manager using downloaded the file, extract it and executing the StartConsole.bat, located on the scripts folder. Warning If there are no certificates available to properly authenticate the Manager, please visit the Troubleshooting section of the Connect IoT Installation page in the Installation Guide to solve the issue. Connect IoT Installation   We can also confirm that the connection is running by navigating to the ConnectIoT section of the Automation menu entry.   "
          },
          {
            "topic": "Exporting the Automation Controller#",
            "definition": "# The System also allows the user to export the Automation Controller, and all the related information, so it can be easy to deploy on another MES installation. The user can select the option to export the Automation Controller from the General View, has seen on the next image.   A sugestive name should be selected for the exported XML.   "
          },
          {
            "topic": "Importing the Automation Controller on another MES#",
            "definition": "# After exporting the Automation Controller the user can import it on a new MES, as shown on the next image. For that the user needs to select the option Import on the Automation Controller main screen. Warning When importing a Automation Controller the user must ensure that all required packages exist in the selected repository.   A Change Set must be selected.   When the import action completes a result screen, similar to the next image, will be shown to the user. As you can see the Automation Controller and all the related data where imported.   "
          },
          {
            "topic": "Update process of the imported objects#",
            "definition": "# After the import we can check the Workflow, and see that it's equal to the exported one.   Then the user can update the tasks on the workflow by two ways. He can update the desired tasks, one by one, like shown on the next picture    Or the user may choose use the update wizard to update the entire workflow at once.   The wizard shows the Driver Definitions associated.   Then the tasks used on the Workflow. The user only needs to select the option \"Update Tasks and Converters\".   As you can see the tasks are all updated and, additionally, a new Workflow version is created.   At this stage the user should create a new version and update the package version of the imported Automation Protocol. For this he must go to the Business Data -> Automation Protocol -> \"Select the desired one\".   When creating a new version. The user selected the desired package version.   A new version is created at this stage.   The user creates a new Automation Manager.   Inserts the desired General Data.   Needs to connect the Automation Controller.   Selects the Instance to connect to.    Donwloads the Automation Manager.    And then starts the Manager, successfully connecting.   We can also confirm that the connection is running by navigating to the ConnectIoT section of the Automation menu entry.   "
          },
          {
            "topic": "Downgrade Automation Controller version#",
            "definition": "# The Automation Controller is a version controlled Object. This allows the user to create new versions when desired and change between them, when needed. As we can see the created and updated Automation Controller has two versions to select from.   To change between versions the user only needs to select the desired version and \"Save\" it. This allows the user to easily change versions and downgrade to a previous version.   Info The user can also mark a certain version as obsolete. Obsolete versions aren't selectable by the user.   "
          },
          {
            "topic": "Setting a version as Effective#",
            "definition": "# When a certain version is considered finnished and ready for production, it should be changed to the effective state. An effective version can't be changed. For this the Change Set selected must be approved.   When a user, eligible to approve the request, approves.   The version is marked as effective.   "
          }
        ],
        "code": [
          {
            "topic": "Creating the Automation Protocol#",
            "code": "@criticalmanufacturing/connect-iot-file-raw"
          },
          {
            "topic": "Connecting to the Manager#",
            "code": "StartConsole.batscripts"
          }
        ],
        "links": [
          {
            "topic": "Automation Controller Version Management#",
            "links": [
              {
                "description": "Automation Controller Version Management# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#automation-controller-version-management"
              }
            ]
          },
          {
            "topic": "Overview#",
            "links": [
              {
                "description": "Overview# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#overview"
              }
            ]
          },
          {
            "topic": "Pre-Setup#",
            "links": [
              {
                "description": "Pre-Setup# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#pre-setup"
              },
              {
                "description": "Pre-Setup# (2)",
                "link": "http://help.criticalmanufacturing.com/installationguide/post-installation/connect-iot/connectiotinstallation/"
              },
              {
                "description": "Pre-Setup# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_050.png"
              }
            ]
          },
          {
            "topic": "Creating the Automation Protocol#",
            "links": [
              {
                "description": "Creating the Automation Protocol# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#creating-the-automation-protocol"
              },
              {
                "description": "Creating the Automation Protocol# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_001.png"
              },
              {
                "description": "Creating the Automation Protocol# (3)",
                "link": "https://help.criticalmanufacturing.com/userguide/business-data/automation-protocol/automation-protocol-protocols/driver_fileraw/"
              }
            ]
          },
          {
            "topic": "Creating the Automation Driver Definition#",
            "links": [
              {
                "description": "Creating the Automation Driver Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#creating-the-automation-driver-definition"
              },
              {
                "description": "Creating the Automation Driver Definition# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_002.png"
              },
              {
                "description": "Creating the Automation Driver Definition# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_003.png"
              }
            ]
          },
          {
            "topic": "Creating the Automation Controller#",
            "links": [
              {
                "description": "Creating the Automation Controller# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#creating-the-automation-controller"
              },
              {
                "description": "Creating the Automation Controller# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_004.png"
              },
              {
                "description": "Creating the Automation Controller# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_005.png"
              },
              {
                "description": "Creating the Automation Controller# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_006.png"
              },
              {
                "description": "Creating the Automation Controller# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_007.png"
              },
              {
                "description": "Creating the Automation Controller# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_008.png"
              },
              {
                "description": "Creating the Automation Controller# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_009.png"
              }
            ]
          },
          {
            "topic": "Creating the Automation Manager#",
            "links": [
              {
                "description": "Creating the Automation Manager# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#creating-the-automation-manager"
              },
              {
                "description": "Creating the Automation Manager# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_010.png"
              },
              {
                "description": "Creating the Automation Manager# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_044.png"
              }
            ]
          },
          {
            "topic": "Connecting to the Manager#",
            "links": [
              {
                "description": "Connecting to the Manager# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#connecting-to-the-manager"
              },
              {
                "description": "Connecting to the Manager# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_011.png"
              },
              {
                "description": "Connecting to the Manager# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_013.png"
              },
              {
                "description": "Connecting to the Manager# (4)",
                "link": "https://developer.criticalmanufacturing.com/installationguide/post-installation/connect-iot/connectiotautomationmanagerconfig/"
              },
              {
                "description": "Connecting to the Manager# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_014.png"
              },
              {
                "description": "Connecting to the Manager# (6)",
                "link": "https://developer.criticalmanufacturing.com/installationguide/post-installation/connect-iot/connectiotinstallation/"
              },
              {
                "description": "Connecting to the Manager# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_015.png"
              },
              {
                "description": "Connecting to the Manager# (8)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_043.png"
              }
            ]
          },
          {
            "topic": "Exporting the Automation Controller#",
            "links": [
              {
                "description": "Exporting the Automation Controller# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#exporting-the-automation-controller"
              },
              {
                "description": "Exporting the Automation Controller# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_016.png"
              },
              {
                "description": "Exporting the Automation Controller# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_017.png"
              }
            ]
          },
          {
            "topic": "Importing the Automation Controller on another MES#",
            "links": [
              {
                "description": "Importing the Automation Controller on another MES# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#importing-the-automation-controller-on-another-mes"
              },
              {
                "description": "Importing the Automation Controller on another MES# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_018.png"
              },
              {
                "description": "Importing the Automation Controller on another MES# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_019.png"
              },
              {
                "description": "Importing the Automation Controller on another MES# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_020.png"
              }
            ]
          },
          {
            "topic": "Update process of the imported objects#",
            "links": [
              {
                "description": "Update process of the imported objects# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#update-process-of-the-imported-objects"
              },
              {
                "description": "Update process of the imported objects# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_021.png"
              },
              {
                "description": "Update process of the imported objects# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_022.png"
              },
              {
                "description": "Update process of the imported objects# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_023.png"
              },
              {
                "description": "Update process of the imported objects# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_024.png"
              },
              {
                "description": "Update process of the imported objects# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_025.png"
              },
              {
                "description": "Update process of the imported objects# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_026.png"
              },
              {
                "description": "Update process of the imported objects# (8)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_027.png"
              },
              {
                "description": "Update process of the imported objects# (9)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_047.png"
              },
              {
                "description": "Update process of the imported objects# (10)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_046.png"
              },
              {
                "description": "Update process of the imported objects# (11)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_048.png"
              },
              {
                "description": "Update process of the imported objects# (12)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_028.png"
              },
              {
                "description": "Update process of the imported objects# (13)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_029.png"
              },
              {
                "description": "Update process of the imported objects# (14)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_030.png"
              },
              {
                "description": "Update process of the imported objects# (15)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_031.png"
              },
              {
                "description": "Update process of the imported objects# (16)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_049.png"
              },
              {
                "description": "Update process of the imported objects# (17)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_033.png"
              },
              {
                "description": "Update process of the imported objects# (18)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_034.png"
              },
              {
                "description": "Update process of the imported objects# (19)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_035.png"
              },
              {
                "description": "Update process of the imported objects# (20)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_042.png"
              }
            ]
          },
          {
            "topic": "Downgrade Automation Controller version#",
            "links": [
              {
                "description": "Downgrade Automation Controller version# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#downgrade-automation-controller-version"
              },
              {
                "description": "Downgrade Automation Controller version# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_036.png"
              },
              {
                "description": "Downgrade Automation Controller version# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_037.png"
              },
              {
                "description": "Downgrade Automation Controller version# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_038.png"
              }
            ]
          },
          {
            "topic": "Setting a version as Effective#",
            "links": [
              {
                "description": "Setting a version as Effective# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/#setting-a-version-as-effective"
              },
              {
                "description": "Setting a version as Effective# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_039.png"
              },
              {
                "description": "Setting a version as Effective# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_040.png"
              },
              {
                "description": "Setting a version as Effective# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/cu_041.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/controllerupgrade/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Custom Converter",
        "definition": [
          {
            "topic": "Custom Converter#",
            "definition": "# This page describes the process of creating a custom converter. "
          },
          {
            "topic": "Scaffolding#",
            "definition": "# Generate the custom task folder structure by running: After completing the form, the generator will create a new folder structure, ready for development. "
          },
          {
            "topic": "Developing Tips#",
            "definition": "# Follow the same tips for custom tasks. "
          }
        ],
        "code": [
          {
            "topic": "Scaffolding#",
            "code": "yo @criticalmanufacturing/iot:converter"
          }
        ],
        "links": [
          {
            "topic": "Custom Converter#",
            "links": [
              {
                "description": "Custom Converter# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customconverter/#custom-converter"
              }
            ]
          },
          {
            "topic": "Scaffolding#",
            "links": [
              {
                "description": "Scaffolding# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customconverter/#scaffolding"
              }
            ]
          },
          {
            "topic": "Developing Tips#",
            "links": [
              {
                "description": "Developing Tips# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customconverter/#developing-tips"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_customconverter/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Custom Driver",
        "definition": [
          {
            "topic": "Custom Driver#",
            "definition": "# This page describes the process of creating a custom Automation Driver. Custom drivers are used in order to implement a protocol that is not supported by Critical Manufacturing MES. "
          },
          {
            "topic": "Scaffolding#",
            "definition": "# Generate the custom driver folder structure by running: The generator will ask several questions. Let's work on creating a driver for a text file format: Identifier name: the directory name to store the file structure (i.e. driver-fileTxt) Full package name: the name of the driver to be created. It should follow this naming convention: @customerName/connect-iot-driverName, with driverName composed of words separated by a dash (e.g. @customer/connect-iot-driver-fileTxt) Package version: there is no need to use the same version name as the generator package, so it could be something like 1.0.0 Protocol name: this will be the name in the classes, interfaces and generated files (e.g. FileTxt) Command support: whether the driver will support automation commands.\n\nNote\n\nWhile Properties are elements that support reading and writing values to the entity and Events are the instantiation of an occurrence within the realm of the entity, Commands indicate actions to be undertaken by the driver and sent to the machine. Using a text file format as an example, let's say that a Property would be the size of a file, an event would be the notification that the file was updated and a command would be an instruction to delete the file. Identifier name: the directory name to store the file structure (i.e. driver-fileTxt) Identifier name: the directory name to store the file structure (i.e. driver-fileTxt) Full package name: the name of the driver to be created. It should follow this naming convention: @customerName/connect-iot-driverName, with driverName composed of words separated by a dash (e.g. @customer/connect-iot-driver-fileTxt) Full package name: the name of the driver to be created. It should follow this naming convention: @customerName/connect-iot-driverName, with driverName composed of words separated by a dash (e.g. @customer/connect-iot-driver-fileTxt) Package version: there is no need to use the same version name as the generator package, so it could be something like 1.0.0 Package version: there is no need to use the same version name as the generator package, so it could be something like 1.0.0 Protocol name: this will be the name in the classes, interfaces and generated files (e.g. FileTxt) Protocol name: this will be the name in the classes, interfaces and generated files (e.g. FileTxt) Command support: whether the driver will support automation commands.\n\nNote\n\nWhile Properties are elements that support reading and writing values to the entity and Events are the instantiation of an occurrence within the realm of the entity, Commands indicate actions to be undertaken by the driver and sent to the machine. Using a text file format as an example, let's say that a Property would be the size of a file, an event would be the notification that the file was updated and a command would be an instruction to delete the file. Command support: whether the driver will support automation commands. Note While Properties are elements that support reading and writing values to the entity and Events are the instantiation of an occurrence within the realm of the entity, Commands indicate actions to be undertaken by the driver and sent to the machine. Using a text file format as an example, let's say that a Property would be the size of a file, an event would be the notification that the file was updated and a command would be an instruction to delete the file.   After completing the form, the driver generator will create a new folder structure, ready for development. "
          },
          {
            "topic": "Deploying required libraries#",
            "definition": "# Now, you must deploy the necessary libraries into our environment. Make sure you change the dependency fields for your Connect IoT installation available in the local NPM server. Note The npm server should be configured in the .npmrc file in the same folder.   Using this 8.0.0-202010011 released version as an example, you can then run: This will gather the adequate libraries for the solution. After it has finished running, let's build the actual solution: The solution will then be built and after the build process finishes, you can start developing the driver using a steady base. Note If you want to set a watchdog to watch for and recompile any source code changes, run: "
          },
          {
            "topic": "Main folder structure#",
            "definition": "#   The src folder structure follows the tree generated by the scaffolding, with several key files worth noting: package.json: where the dependencies and protocol data (parameters and extended data) are defined packConfig.json: information regarding the packing of the dependencies into a ready to use package README.md: Markdown file that should contain a description for the driver tsconfig.json: specific TypeScript configurations tslint.json: for contextual and syntactic code validation package.json: where the dependencies and protocol data (parameters and extended data) are defined package.json: where the dependencies and protocol data (parameters and extended data) are defined packConfig.json: information regarding the packing of the dependencies into a ready to use package packConfig.json: information regarding the packing of the dependencies into a ready to use package README.md: Markdown file that should contain a description for the driver README.md: Markdown file that should contain a description for the driver tsconfig.json: specific TypeScript configurations tsconfig.json: specific TypeScript configurations tslint.json: for contextual and syntactic code validation tslint.json: for contextual and syntactic code validation Inside the src folder, there are a few notable files that warrant further explanation. Let's dig in. "
          },
          {
            "topic": "index.ts#",
            "definition": "# This is the file that will be used as an entry point for the driver. All the yargs commands that generate the command line options are listed at the top, together with a logging section that will initialize the built-in logger with the appropriate driver name, previously provided in the original scaffolding generation. There are also a few configuration methods being executed when the driver is started that are used to indicate the section paths for the driver and monitor communication configurations. When the configuration is complete, the Driver Runner is used to run the actual driver, establishing the connection with the Monitor (the process that will manage the package downloads as they are needed, stopping and starting the automation processes, while monitoring the health of those processes) and interfacing with the Controller, which is the source of the workflow logic that will use the driver. This runner is responsible for all the internal built-in logic of the driver (heartbeats, reconnection logic, among other functionalities) that is used by any driver.   Info More information on the Protocols ⧉ of the user guide. Protocols ⧉ "
          },
          {
            "topic": "inversify.config.ts#",
            "definition": "# Used to let the base driver know which driver to call when attempting to call a specific function (through inversion of control). When the base driver wants to create an instance of the \"new\" driver, it will use the information on this file to indicate which driver should be created. When the new driver is used, the information contained therein will override the base driver configuration and execution when specifically implemented to do so, otherwise the base behavior stands as default. "
          },
          {
            "topic": "types.ts#",
            "definition": "# If any new custom type needs to be added to the solution, they can be added through this file and used in the driver logic. "
          },
          {
            "topic": "communicationSettings.ts#",
            "definition": "# Holds the communication parameters that will be shown in the controller workflow (through the Equipment Setup ⧉ task/) and that are used to establish communication, which can help to model the behavior of the driver when attempting communication with external systems. Equipment Setup ⧉ "
          },
          {
            "topic": "driverImplementation.ts#",
            "definition": "# The main body of the driver, which will be addressed below. First, let's cover the rest of the files in the solution. "
          },
          {
            "topic": "extendedData/#",
            "definition": "# There are also some files that require minor explanations, all of them inside the extendedData folder, which represent user-defined attributes for a driver definition, depending on the selected protocol: index.ts: entry point for the data, not to be changed. command.ts: holds the information for commands. commandParameters.ts: holds the information for command parameters. event.ts: holds the information for events. eventProperty.ts: holds the information for event properties. property.ts: holds the information for properties index.ts: entry point for the data, not to be changed. index.ts: entry point for the data, not to be changed. command.ts: holds the information for commands. command.ts: holds the information for commands. commandParameters.ts: holds the information for command parameters. commandParameters.ts: holds the information for command parameters. event.ts: holds the information for events. event.ts: holds the information for events. eventProperty.ts: holds the information for event properties. eventProperty.ts: holds the information for event properties. property.ts: holds the information for properties property.ts: holds the information for properties This structure will be displayed and available for selection when generating a new Automation Protocol on the Critical Manufacturing GUI. As an example, let's add a new property to the driver. Editing the property.ts file, add a new string called anotherField, with an empty default value:   Simultaneously, for the property to be displayed and used in the Critical Manufacturing MES GUI (and in Automation Controller workflows), it must be added to the package.json file in order to ensure the integrity of the data inserted into the specific classes:   The property field definitions should be set as follows: Name: the name of the property Label: displayed as the property name on the GUI Description: used as a hint icon on the GUI Type: simple data type for the property Default Value: used as default in the GUI and in code Name: the name of the property Label: displayed as the property name on the GUI Description: used as a hint icon on the GUI Type: simple data type for the property Default Value: used as default in the GUI and in code The same procedure holds true for event, event properties, commands and command parameters. In order to add a new parameter to the communication settings, which can be added to the appropriate file, using a similar structure as the one described above:   The difference here is that instead of a new property, a new entry should be added to the parameter section of package.json:   Warning At least one data type should be added for consistency.   "
          },
          {
            "topic": "Packing#",
            "definition": "# After adding those example properties, let's prepare the file structure to be used in the GUI by packing the driver into a portable format. You can use an application called packagePacker that will create a self-packaged package for deployment and removes the need for internet connection wherever the driver is running, keeping the dependencies local. In order to create the package, run the following command in the same folder where the package.json file is located. Where outputDir is the output directory where all the dependencies gathered from the file structure (read from [source_folder]\\index.js) will be placed in .tgz format. Info To display further information on command parameters, run the following command.   After the packing has completed, running the .rebuildDatabase.ps1 script will then add the existing compressed driver into the list of available packages that are available in the GUI, placing that list in the .repositoryContent.json file. This file must be used in the configured repository location, defined on the Critical Manufacturing GUI, under the Configuration section of the Administration entry. There are three specific configurations for this scenario and we will be using a local configuration for testing: RepositoryType: can be Npm or Directory. We have used Npm for this scenario. RepositoryLocation: A local directory (or shared folder) where the repository will be placed. ProtocolPackageNameFilter: Since we have named the driver with a different convention than the one already in use, in order to ensure that it is shown for selection in the GUI, we must change this entry in the Configuration editor and add the new name, concatenating every different pattern with a ; as shown in the following example: RepositoryType: can be Npm or Directory. We have used Npm for this scenario. RepositoryType: can be Npm or Directory. We have used Npm for this scenario. RepositoryLocation: A local directory (or shared folder) where the repository will be placed. RepositoryLocation: A local directory (or shared folder) where the repository will be placed. ProtocolPackageNameFilter: Since we have named the driver with a different convention than the one already in use, in order to ensure that it is shown for selection in the GUI, we must change this entry in the Configuration editor and add the new name, concatenating every different pattern with a ; as shown in the following example: ProtocolPackageNameFilter: Since we have named the driver with a different convention than the one already in use, in order to ensure that it is shown for selection in the GUI, we must change this entry in the Configuration editor and add the new name, concatenating every different pattern with a ; as shown in the following example:   "
          },
          {
            "topic": "Creating a new Automation Protocol#",
            "definition": "# Now that we have the base driver created, packed and added to the system, let's create a new Automation Protocol based on the very same driver we created. Opening the Critical Manufacturing GUI you are using, navigate to the Automation Protocol landing page and create a new object. Since the name filter was changed in the configuration GUI, the new driver package is already \"seen\" by the system:   Pressing Next will show the Parameters section, where you can already see the new parameter created above:   Continuing to the Protocol Data Types, the MyString value can be seen as a specific Protocol Data Type and the anotherField will be displayed in the Extended Data section:   Press Create to complete the operation and create the new Automation Protocol. Now we can move to the Automation Driver Definition and create a new object based on the Automation Protocol created above:   If you want to add a new Property, you can see that the anotherField property, defined above, is displayed with the appropriate default value:   After this driver definition is created, the Automation Controller can already be created and the workflow editor may be used to put the driver to use. However, let's go back to the driver itself and work on te actual implementation of specific logic for this driver, attempting to create a text file parser. "
          },
          {
            "topic": "Driver logic#",
            "definition": "# Opening the driverImplementation.ts file, where the specific logic will be placed, you can start by confirming that it extends the DeviceDriverBase class. We can access the communication settings as well as all the extended data (properties, events and commands, arriving from the automation driver definition) that will be received by the object when the OnEquipmentSetup event takes place. "
          },
          {
            "topic": "setCommunicationConfiguration#",
            "definition": "# The driver base starts with an initializeDriver method and continues to a setCommunicationConfiguration method that validates the entire received data structure to ensure the proper configurations are set and that the received types and enumerations are valid and can be properly used throughout the driver code. "
          },
          {
            "topic": "connectToDevice#",
            "definition": "# When an equipment connects to a device, the connectToDevice method is invoked. If you follow the state model above, the correct transition for the Connecting should be the move to a Setup state, which is exactly what the driver base executes. If a new behavior is required, this is the place where the implementation should differ. Info Since we are inheriting the state model from DeviceDriverBase, the state transitions will always take place, however any logic that you want to introduce between those transitions should be placed here. A simple example of this method is the template generated by the scaffolding engine: "
          },
          {
            "topic": "setupCompleted#",
            "definition": "# Using a workflow with the adequate driver protocols as an example:   When the success field of an EquipmentSetup block is triggered, the setupCompleted method of the driver is invoked: "
          },
          {
            "topic": "disconnectFromDevice#",
            "definition": "# Once the communication is successful, the driver will pass the Setup state and reach the Communicating state, otherwise it will stay at the Connecting state after passing through the ConnectingFailed state and returning to the Connecting state. At the other end of the process, the disconnectFromDevice looks like this out of the box: Info This is an example of a graceful disconnection, where the state transition is called according to the proper operation of the workflow, the event handler is called and follows the adequate steps to perform the disconnection, going from the Communicating to the Disconnecting state and then to the Disconnected state. "
          },
          {
            "topic": "getValues#",
            "definition": "# Again taking an Automation Controller workflow block as an example, this method is called when the Get Equipment Properties Values is activated:   It is straightforward to retrieve the value from the entry structure: The output value must obey a specific structure called PropertyValue, that contains the following fields: propertyName: the name of the property to retrieve originalValue: the value received from the device value: the value to be sent to the system propertyName: the name of the property to retrieve propertyName: the name of the property to retrieve originalValue: the value received from the device originalValue: the value received from the device value: the value to be sent to the system value: the value to be sent to the system In order to perform a value conversion (if needed), an additional method is available: A simple example to replace the boilerplate conversion line from the scaffolding could be: Note You can choose between Value and RawValue to be emitted as an output of the field. This is most commonly used when there is a need to convert the value from its original form and into a value that will be used upon retrieving it.   "
          },
          {
            "topic": "setValues#",
            "definition": "# And once again taking an Automation Controller workflow block as an example, this method is called when the Set Equipment Properties Values is activated:   The propertiesAndValues field will then receive a data structure (PropertyValuePair) containing the property object as well as its value. Similarly, the value can be converted using an existing method: Info The usage of the utility conversion methods is similar to the one defined above. "
          },
          {
            "topic": "execute#",
            "definition": "# Similar to what was described above for the properties, when a command is set to be executed in the workflow controller (representing an automation command from a machine) is also possible.   The method that handles this is the execute command: Values for the actual command and for any command parameter are included in this method signature and we can decide to generate the required output as a return value for the method. As a very simple example, let's say you want to multiply all command parameters by a factor of 7 and return the sum of all of the parameters: "
          },
          {
            "topic": "notifyCommunicationStateChanged#",
            "definition": "# Whenever there is a state change in the workflow, whether it is triggered by the driver or an automatic change by a machine, the notifyCommunicationStateChanged event will be called and any specific logic should be added to this method. "
          },
          {
            "topic": "onEventOccurrence#",
            "definition": "# The onEventOccurrence represents the way that the Automation Controller can be notified whenever a specific event takes place, identified by an event ID.   "
          },
          {
            "topic": "Wrapping up#",
            "definition": "# The driver can be expanded as needed and used within the scope of an Automation Controller in the Critical Manufacturing GUI, in the same way that any user can pick up one of the drivers that are provided out of the box. More information on using the actual driver in the system can be found in the Critical Manufacturing Documentation Portal, under Factory Automation Tutorial ⧉. Factory Automation Tutorial ⧉ Warning If the driver is changed and new properties or events added, a new Automation Protocol must be created in order to reflect the new features. In order to prevent information dependency, editing the Automation Driver Definition will notify the user that the previous information will be erased. Workflow task blocks will need to be recreated if left inconsistent. "
          }
        ],
        "code": [
          {
            "topic": "Scaffolding#",
            "code": "yo @criticalmanufacturing/iot:driverdriver-fileTxt@customerName/connect-iot-driverNamedriverName@customer/connect-iot-driver-fileTxt1.0.0FileTxt"
          },
          {
            "topic": "Deploying required libraries#",
            "code": ".npmrc8.0.0-202010011npm igulp buildgulp watch"
          },
          {
            "topic": "Main folder structure#",
            "code": "srcpackage.jsonpackConfig.jsonREADME.mdtsconfig.jsontslint.jsonsrc"
          },
          {
            "topic": "index.ts#",
            "code": "index.tsyargs"
          },
          {
            "topic": "inversify.config.ts#",
            "code": "inversify.config.ts"
          },
          {
            "topic": "types.ts#",
            "code": "types.ts"
          },
          {
            "topic": "communicationSettings.ts#",
            "code": "communicationSettings.ts"
          },
          {
            "topic": "driverImplementation.ts#",
            "code": "driverImplementation.ts"
          },
          {
            "topic": "extendedData/#",
            "code": "extendedData/extendedDataindex.tscommand.tscommandParameters.tsevent.tseventProperty.tsproperty.tsproperty.tsanotherFieldpackage.jsonpackage.json"
          },
          {
            "topic": "Packing#",
            "code": "packagePackerpackage.jsonyo @criticalmanufacturing/iot:packagePacker -o=<outputDir>outputDir[source_folder]\\index.js.tgzyo @criticalmanufacturing/iot:packagePacker --help.rebuildDatabase.ps1.repositoryContent.jsonNpmDirectoryNpm;"
          },
          {
            "topic": "Creating a new Automation Protocol#",
            "code": "MyStringanotherFieldanotherField"
          },
          {
            "topic": "Driver logic#",
            "code": "driverImplementation.tsDeviceDriverBaseOnEquipmentSetup"
          },
          {
            "topic": "setCommunicationConfiguration#",
            "code": "setCommunicationConfigurationinitializeDriversetCommunicationConfiguration/**\n* Notification regarding the communication parameters being available.\n* Validate the integrity of the values\n* Note: Called by the driverBase\n* @param communication Communication settings object\n*/\npublic async setCommunicationConfiguration(communication: any): Promise<void> {\n    this._communicationSettings = Object.assign({}, fileTxtDefaultCommunicationSettings, communication);\n\n    let pJson = require(\"../package.json\");\n    validateCommunicationParameters(pJson, this._communicationSettings);\n\n    // Prepare the extended data\n    validateProperties(pJson, this.configuration.properties);\n    validateEvents(pJson, this.configuration.events);\n    validateEventProperties(pJson, this.configuration.events);\n    validateCommands(pJson, this.configuration.commands);\n    validateCommandParameters(pJson, this.configuration.commands);\n}"
          },
          {
            "topic": "connectToDevice#",
            "code": "connectToDeviceconnectToDeviceConnectingSetup/**\n* Connect to the equipment.\n* Note: Called by the driverBase\n*/\npublic async connectToDevice(): Promise<void> {\n    this.setCommunicationState(CommunicationState.Connecting);\n\n    try {\n        // Connect to the equipment\n        // ...\n\n        // Notify the communication was a success and it is now ready for the setup process\n        this.setCommunicationState(CommunicationState.Setup);\n    } catch (error) {\n        this.setCommunicationState(CommunicationState.ConnectingFailed);\n    }\n}"
          },
          {
            "topic": "setupCompleted#",
            "code": "setupCompletedsuccessEquipmentSetupsetupCompleted/**\n* Notification that the setup process was a success\n* Note: Called by the driverBase\n*/\npublic async setupCompleted(): Promise<void> {\n    // Since the setup was a success, set the state to Communicating\n    await this.setCommunicationState(CommunicationState.Communicating);\n}"
          },
          {
            "topic": "disconnectFromDevice#",
            "code": "disconnectFromDeviceSetupCommunicatingConnectingConnectingFailedConnectingdisconnectFromDevice/**\n* Disconnect the communication with the equipment\n* Note: Called by the driverBase\n*/\npublic async disconnectFromDevice(): Promise<void> {\n    this.setCommunicationState(CommunicationState.Disconnecting);\n\n    try {\n        // Disconnect to the equipment\n        // ...\n    } catch (err) { }\n\n    this.setCommunicationState(CommunicationState.Disconnected);\n}CommunicatingDisconnectingDisconnected"
          },
          {
            "topic": "getValues#",
            "code": "getValues/**\n* Request the equipment for values of the properties\n* Note: Called by the driverBase\n* @param properties List of properties to get values\n*/\npublic async getValues(properties: Property[]): Promise<PropertyValue[]> {\n    let results: PropertyValue[] = [];\n\n    // Request the equipment for values\n    // ...\n    // Foreach result:\n    /*\n        let propertyValue: PropertyValue = {\n            propertyName: property.name,\n            originalValue: value,\n            value: this.convertValueFromDevice(value, property.deviceType, property.dataType),\n        };\n        results.push(propertyValue);\n    */\n\n    return(results);\n}const ext: PropertyExtendedData = properties[0].extendedData;\next.anotherField = \"Updated Value\";PropertyValuepropertyNameoriginalValuevalue/**\n* Convert value received from device to system\n* Note: No conversion is being done at the moment.\n* @param raw value\n* @param fromType original value type (device)\n* @param toType destination value type (system)\n*/\nprivate convertValueFromDevice(raw: any, fromType: string, toType: string): any {\n    if (raw == null)\n        return(undefined);\n\n    // Convert the value (this is an example)\n    raw = Utils.convertValueToType(raw, toType);\n\n    // return same thing (could not convert it?)\n    return(raw);\n}switch (fromType.toLowerCase().trim()) {\n  case \"datetime\":\n    return Utils.convertValueToType(raw, \"string\");\n    break;\n  default:\n    return Utils.convertValueToType(raw, toType);\n    break;\n}ValueRawValue"
          },
          {
            "topic": "setValues#",
            "code": "setValues/**\n* Set the value of properties in the equipment.\n* Note: Called by the driverBase\n* @param propertiesAndValues List of properties and new values\n*/\npublic async setValues(propertiesAndValues: PropertyValuePair[]): Promise<boolean> {\n    // Request the equipment to define new values\n    // ...\n\n    return(true);\n}propertiesAndValuesPropertyValuePair/**\n* Convert value received from system to device.\n* Note: No conversion is being done at the moment.\n* @param raw raw value\n* @param fromType original value type (system)\n* @param toType destination value type (device)\n*/\nprivate convertValueToDevice(raw: any, fromType: string, toType: string): any {\n    if (raw == null)\n        return(undefined);\n\n    // Convert the value\n    // ...\n\n    // return same thing (could not convert it?)\n    return(raw);\n}"
          },
          {
            "topic": "execute#",
            "code": "executeexecute/**\n* Send a command to the equipment. Depending on some settings, different messages can be sent.\n* Note: Called by the driverBase\n* @param command Command to send\n* @param parameters List of parameters to use\n*/\npublic async execute(command: Command, parameters: Map<CommandParameter, any>): Promise<any> {\n\n    // Execute the command in the equipment\n    // ...\n\n    return(true); // Or the command result\n}let result: number = 0;\n\nfor (let [key, value] of parameters) {\n    result += this.convertValueFromDevice(value, \"string\", \"number\") * 7; \n}\n\nreturn(result);"
          },
          {
            "topic": "notifyCommunicationStateChanged#",
            "code": "notifyCommunicationStateChangednotifyCommunicationStateChanged/**\n* Handle the communication state changes\n* Note: Called by the driverBase\n* @param previousState Previous state\n* @param newState New state\n*/\npublic async notifyCommunicationStateChanged(previousState: CommunicationState, newState: CommunicationState): Promise<void> {\n    // Add any specific handling here\n}"
          },
          {
            "topic": "onEventOccurrence#",
            "code": "onEventOccurrenceonEventOccurrence/**\n* Handle the driver event notification. Trigger it to the controller if the trigger property was changed\n* Note: This is just as an example... This code is not being called anywhere\n* @param eventId Id of the event (systemId)\n* @param values List of values of the event registered\n*/\nprivate async onEventOccurrence(eventId: string, values: Map<string, any>): Promise<void> {\n    let event = this.configuration.events.find(e => e.systemId === eventId);\n    if (event && event.isEnabled) {\n        let results: PropertyValue[] = [];\n\n        // Fill results and check if the trigger properties have been the cause of the event occurrence\n        if (values) {\n            for (let eventProperty of event.properties) {\n                if (values.has(eventProperty.deviceId)) {\n                    let value: any = values.get(eventProperty.deviceId);\n\n                    let propertyValue: PropertyValue = {\n                        propertyName: eventProperty.name,\n                        originalValue: value,\n                        value: this.convertValueFromDevice(value, eventProperty.deviceType, eventProperty.dataType),\n                    };\n\n                    results.push(propertyValue);\n                } else {\n                    throw new Error(`Value for property '${eventProperty.name}' was not received in the event data`);\n                }\n            }\n        }\n\n        // Raise event to controller\n        let occurrence: EventOccurrence = {\n            timestamp: new Date(),\n            eventDeviceId: event.deviceId,\n            eventName: event.name,\n            eventSystemId: event.systemId,\n            propertyValues: results\n        };\n\n        this.emit(\"eventOccurrence\", occurrence);\n    }\n}"
          }
        ],
        "links": [
          {
            "topic": "Custom Driver#",
            "links": [
              {
                "description": "Custom Driver# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#custom-driver"
              }
            ]
          },
          {
            "topic": "Scaffolding#",
            "links": [
              {
                "description": "Scaffolding# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#scaffolding"
              },
              {
                "description": "Scaffolding# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/scaffolding_startup.png"
              }
            ]
          },
          {
            "topic": "Deploying required libraries#",
            "links": [
              {
                "description": "Deploying required libraries# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#deploying-required-libraries"
              },
              {
                "description": "Deploying required libraries# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/environment_version.png"
              }
            ]
          },
          {
            "topic": "Main folder structure#",
            "links": [
              {
                "description": "Main folder structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#main-folder-structure"
              },
              {
                "description": "Main folder structure# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/main_folder_structure.png"
              }
            ]
          },
          {
            "topic": "index.ts#",
            "links": [
              {
                "description": "index.ts# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#indexts"
              },
              {
                "description": "index.ts# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/automation_protocol_communication_states.svg"
              },
              {
                "description": "index.ts# (3)",
                "link": "http://help.criticalmanufacturing.com/userguide/business-data/automation-protocol/automation-protocol-protocols/"
              }
            ]
          },
          {
            "topic": "inversify.config.ts#",
            "links": [
              {
                "description": "inversify.config.ts# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#inversifyconfigts"
              }
            ]
          },
          {
            "topic": "types.ts#",
            "links": [
              {
                "description": "types.ts# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#typests"
              }
            ]
          },
          {
            "topic": "communicationSettings.ts#",
            "links": [
              {
                "description": "communicationSettings.ts# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#communicationsettingsts"
              },
              {
                "description": "communicationSettings.ts# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/business-data/automation-controller//tasks/core/task_equipmentsetup"
              }
            ]
          },
          {
            "topic": "driverImplementation.ts#",
            "links": [
              {
                "description": "driverImplementation.ts# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#driverimplementationts"
              }
            ]
          },
          {
            "topic": "extendedData/#",
            "links": [
              {
                "description": "extendedData/# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#extendeddata"
              },
              {
                "description": "extendedData/# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_newproperty.png"
              },
              {
                "description": "extendedData/# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_newproperty_package.png"
              },
              {
                "description": "extendedData/# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_commsetting.png"
              },
              {
                "description": "extendedData/# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_commsetting_package.png"
              },
              {
                "description": "extendedData/# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_datatype.png"
              }
            ]
          },
          {
            "topic": "Packing#",
            "links": [
              {
                "description": "Packing# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#packing"
              },
              {
                "description": "Packing# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_packing.png"
              },
              {
                "description": "Packing# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/ProtocolPackageNameFilter.png"
              }
            ]
          },
          {
            "topic": "Creating a new Automation Protocol#",
            "links": [
              {
                "description": "Creating a new Automation Protocol# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#creating-a-new-automation-protocol"
              },
              {
                "description": "Creating a new Automation Protocol# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_automationprotocol.png"
              },
              {
                "description": "Creating a new Automation Protocol# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_automationprotocol_parameters.png"
              },
              {
                "description": "Creating a new Automation Protocol# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_automationprotocol_datatype.png"
              },
              {
                "description": "Creating a new Automation Protocol# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_automationdriverdefinition.png"
              },
              {
                "description": "Creating a new Automation Protocol# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_new_automationdriverdefinition_property.png"
              }
            ]
          },
          {
            "topic": "Driver logic#",
            "links": [
              {
                "description": "Driver logic# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#driver-logic"
              }
            ]
          },
          {
            "topic": "setCommunicationConfiguration#",
            "links": [
              {
                "description": "setCommunicationConfiguration# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#setcommunicationconfiguration"
              }
            ]
          },
          {
            "topic": "connectToDevice#",
            "links": [
              {
                "description": "connectToDevice# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#connecttodevice"
              }
            ]
          },
          {
            "topic": "setupCompleted#",
            "links": [
              {
                "description": "setupCompleted# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#setupcompleted"
              },
              {
                "description": "setupCompleted# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_setupCompleted.png"
              }
            ]
          },
          {
            "topic": "disconnectFromDevice#",
            "links": [
              {
                "description": "disconnectFromDevice# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#disconnectfromdevice"
              }
            ]
          },
          {
            "topic": "getValues#",
            "links": [
              {
                "description": "getValues# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#getvalues"
              },
              {
                "description": "getValues# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_getvalues.png"
              },
              {
                "description": "getValues# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_valuerawvalue.png"
              }
            ]
          },
          {
            "topic": "setValues#",
            "links": [
              {
                "description": "setValues# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#setvalues"
              },
              {
                "description": "setValues# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_setvalues.png"
              }
            ]
          },
          {
            "topic": "execute#",
            "links": [
              {
                "description": "execute# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#execute"
              },
              {
                "description": "execute# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_executecommand.png"
              }
            ]
          },
          {
            "topic": "notifyCommunicationStateChanged#",
            "links": [
              {
                "description": "notifyCommunicationStateChanged# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#notifycommunicationstatechanged"
              }
            ]
          },
          {
            "topic": "onEventOccurrence#",
            "links": [
              {
                "description": "onEventOccurrence# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#oneventoccurrence"
              },
              {
                "description": "onEventOccurrence# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/driver_oneventoccurrence.png"
              }
            ]
          },
          {
            "topic": "Wrapping up#",
            "links": [
              {
                "description": "Wrapping up# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/#wrapping-up"
              },
              {
                "description": "Wrapping up# (2)",
                "link": "http://help.criticalmanufacturing.com/tutorials/factoryautomation/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_customdriver/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Custom Task",
        "definition": [
          {
            "topic": "Custom Task#",
            "definition": "# This page describes the process of creating a custom task. Custom tasks are used in order to implement functionality that is not found in existing tasks. Additionally, they can be used and reused as first-class citizens of the Connect IoT platform. "
          },
          {
            "topic": "Scaffolding#",
            "definition": "# Generate the custom task folder structure by running: After completing the form, the generator will create a new folder structure, ready for development. "
          },
          {
            "topic": "Structure of a Task#",
            "definition": "# After the task is generated it will have a structured as shown below.   index.* files are just generated files that link the task files and should not be changed. i18n directory is where we will define the constants to be used in the presentation, such as titles and descriptions, it's also responsible for the internationalization of the text. *.settings files are the files responsible to address the settings tab in your task, either presentation wise or business logic wise. *.settings.html file gives shape to the presentation side of the settings tab, enabling you to customize its look. *.settings.ts is the code-behind used by the settings.html. *.designer.ts is responsible defining input and output parameters, supporting static and dynamic parameters. Finally, the *.task.ts file is where we will write our business logic. index.* files are just generated files that link the task files and should not be changed. index.* files are just generated files that link the task files and should not be changed. i18n directory is where we will define the constants to be used in the presentation, such as titles and descriptions, it's also responsible for the internationalization of the text. i18n directory is where we will define the constants to be used in the presentation, such as titles and descriptions, it's also responsible for the internationalization of the text. *.settings files are the files responsible to address the settings tab in your task, either presentation wise or business logic wise. *.settings files are the files responsible to address the settings tab in your task, either presentation wise or business logic wise. *.settings.html file gives shape to the presentation side of the settings tab, enabling you to customize its look. *.settings.html file gives shape to the presentation side of the settings tab, enabling you to customize its look. *.settings.ts is the code-behind used by the settings.html. *.settings.ts is the code-behind used by the settings.html. *.designer.ts is responsible defining input and output parameters, supporting static and dynamic parameters. *.designer.ts is responsible defining input and output parameters, supporting static and dynamic parameters. Finally, the *.task.ts file is where we will write our business logic. Finally, the *.task.ts file is where we will write our business logic. "
          },
          {
            "topic": "Types of Task Activation#",
            "definition": "# A task will have several types of framework activation, either by lifecycle hooks onBeforeInit(), onInit(), onDestroy(), onChanges() or by event listening. Typically, you want your task to respond to inputs, so essentially respond to changes to an input parameter, therefore the business logic is normally triggered by the onChanges method. The most common activation, is a task that is triggered by an input parameter in the activate input. This activation may result from the change of an input value or a combination of change in input values. The listening of events is more varied, and the declaration depends upon the protocol or MES service or MES DEE action that is to be triggering your task. "
          },
          {
            "topic": "onChanges#",
            "definition": "# In this example, the task is monitoring the input variable activate. After a change is registered on the input variable activate, and only on activate, the task's business logic will execute. It's good practice to clean your trigger variable after being used, in the example you can see that it is set to undefined after triggering the task. Not cleaning the variable, will result that the task will only be activated when the value changes. "
          },
          {
            "topic": "Driver event activation#",
            "definition": "# In order to have a driver message activate your task, first we must subscribe to our driver on that event. That is done by the subscribeEvents or subscribeRaw function of the System.\\_driverProxy. This should be declared in the onInit() or onBeforeInit() lifecycle hooks. Typically, the event of the driver definition is defined in the settings of the task and then the task subscribes to the driver. In order to have a function be triggered by the event you need to define it as function that receives an input of type System.EquipmentEventOccurrence\\<any\\>. "
          },
          {
            "topic": "Example of a Task#",
            "definition": "# Using the Log Message task as an example, it has two inputs, message and activate, an icon, and a name. In the settings it has the general settings which are default and we don't need to create, has a default message and a verbosity.   First let's look at the presentation side. The task presentation configuration is defined in the header of the *.task.ts file.   In the header of the *.task.ts file we can define the display name of our task (grey area), set a display image for our task (blue area), define our inputs (green areas) and outputs (log message does not have outputs). The name to be displayed (grey area) should be defined in the i18n folder, in the *.default.ts file. The display image for our task (blue area), can use one of several available images, here we use the icon-core-connect-iot-lg-logmessage. There are two special categories of inputs and outputs. In the inputs the activate input (dark green area) which always appear in the bottom left of a task and is of special type Task.INPUT_ACTIVATE. In the outputs we have the error and success that always appear on the right bottom corner and are of special types, respectively Task.OUTPUT_ERROR and Task.OUTPUT_SUCCESS In the log message we don't have this outputs but they are of very common use. The input values (light green area) are what our task will receive they can be of type several types and are defined using the PropertyValueType enumeration and accessing it using the System library, for example System.PropertyValueType.String. The output values are analogous to the input values but are defined in the outputs section. In the header of the *.task.ts file we can define the display name of our task (grey area), set a display image for our task (blue area), define our inputs (green areas) and outputs (log message does not have outputs). In the header of the *.task.ts file we can define the display name of our task (grey area), set a display image for our task (blue area), define our inputs (green areas) and outputs (log message does not have outputs). The name to be displayed (grey area) should be defined in the i18n folder, in the *.default.ts file. The name to be displayed (grey area) should be defined in the i18n folder, in the *.default.ts file. The display image for our task (blue area), can use one of several available images, here we use the icon-core-connect-iot-lg-logmessage. The display image for our task (blue area), can use one of several available images, here we use the icon-core-connect-iot-lg-logmessage. There are two special categories of inputs and outputs. There are two special categories of inputs and outputs. In the inputs the activate input (dark green area) which always appear in the bottom left of a task and is of special type Task.INPUT_ACTIVATE. In the inputs the activate input (dark green area) which always appear in the bottom left of a task and is of special type Task.INPUT_ACTIVATE. In the outputs we have the error and success that always appear on the right bottom corner and are of special types, respectively Task.OUTPUT_ERROR and Task.OUTPUT_SUCCESS In the outputs we have the error and success that always appear on the right bottom corner and are of special types, respectively Task.OUTPUT_ERROR and Task.OUTPUT_SUCCESS In the log message we don't have this outputs but they are of very common use. In the log message we don't have this outputs but they are of very common use. The input values (light green area) are what our task will receive they can be of type several types and are defined using the PropertyValueType enumeration and accessing it using the System library, for example System.PropertyValueType.String. The input values (light green area) are what our task will receive they can be of type several types and are defined using the PropertyValueType enumeration and accessing it using the System library, for example System.PropertyValueType.String. The output values are analogous to the input values but are defined in the outputs section. The output values are analogous to the input values but are defined in the outputs section. If we look at how to build the settings we see in the *.settings.html* some html code.   First, we have the cmf-core-controls-baseWidget wrapping all the code (dark grey area). We have the main title (light grey) which we attribute to a constant defined in the *.settings.default.ts file. We can then see two distinct areas. one portraying the default message (lavender area) an area portraying the verbosity, which also has a dropdown field (green area). In this area we have a property wrapper cmf-core-business-controls-propertyContainer and two properties containers, cmf-core-business-controls-propertyEditor. We can see several parameters that we can attribute to an input field a label to display, a value, if it's required, a type and an action (in this case valueChange). There are more input parameters, but these ones are the basic and more often used. First, we have the cmf-core-controls-baseWidget wrapping all the code (dark grey area). First, we have the cmf-core-controls-baseWidget wrapping all the code (dark grey area). We have the main title (light grey) which we attribute to a constant defined in the *.settings.default.ts file. We can then see two distinct areas. We have the main title (light grey) which we attribute to a constant defined in the *.settings.default.ts file. We can then see two distinct areas. one portraying the default message (lavender area) one portraying the default message (lavender area) an area portraying the verbosity, which also has a dropdown field (green area). In this area we have a property wrapper cmf-core-business-controls-propertyContainer and two properties containers, cmf-core-business-controls-propertyEditor. We can see several parameters that we can attribute to an input field a label to display, a value, if it's required, a type and an action (in this case valueChange). There are more input parameters, but these ones are the basic and more often used. an area portraying the verbosity, which also has a dropdown field (green area). In this area we have a property wrapper cmf-core-business-controls-propertyContainer and two properties containers, cmf-core-business-controls-propertyEditor. We can see several parameters that we can attribute to an input field a label to display, a value, if it's required, a type and an action (in this case valueChange). There are more input parameters, but these ones are the basic and more often used. In the *.settings.ts, we can control settings generated events and we can instantiate default values, basically controlling the settings.   In the example, we can see how the verbosity is set to Information (grey area), this is done in the ngOnInit() angular lifecycle hook (https://angular.io/guide/lifecycle-hooks). ⧉ In the ngOnInit() we can default fill our settings, here in the log we are checking if the verbosity is not filled and filling it with the Information string. In this example we can also see the _onSettingsValueChange() action defined in the *.settings.html. https://angular.io/guide/lifecycle-hooks). ⧉ The *.designer.ts is responsible for drawing the settings, the input and output parameters and for supporting static and dynamic parameters. It needs all the settings that are going to be used, defined beforehand.   If we follow, for example the log message, which can have a default value in the settings [2] and can be defined by the input parameter [1] we can have a more complete vision of how a task operates. In order to use an input we need to add it in the header of the *.task.ts file [3] (grey area) and we need to instantiate it as a variable [4], in this case, message is of type string. In order to access a setting (blue area), we need to create its presentation layer with the *.settings.html (dark grey area), and assign it to its value inside the settings object [5]. Here we can see the value will be stored in settings.message. We can see that the settings handler in *.settings.ts is the one responsible for instantiating the settings value of type LogMessageSettings [6]. We need also to declare the value in the *.designer.ts file [7] (purple area). Finally, in the *.task.ts file (light grey) we need to instantiate it (in this case the variable is the same as the input variable so we will only instantiate it once) and export the settings interface and declare what variables are going to be passed [8]. In order to use an input we need to add it in the header of the *.task.ts file [3] (grey area) and we need to instantiate it as a variable [4], in this case, message is of type string. In order to use an input we need to add it in the header of the *.task.ts file [3] (grey area) and we need to instantiate it as a variable [4], in this case, message is of type string. In order to access a setting (blue area), we need to create its presentation layer with the *.settings.html (dark grey area), and assign it to its value inside the settings object [5]. In order to access a setting (blue area), we need to create its presentation layer with the *.settings.html (dark grey area), and assign it to its value inside the settings object [5]. Here we can see the value will be stored in settings.message. Here we can see the value will be stored in settings.message. We can see that the settings handler in *.settings.ts is the one responsible for instantiating the settings value of type LogMessageSettings [6]. We can see that the settings handler in *.settings.ts is the one responsible for instantiating the settings value of type LogMessageSettings [6]. We need also to declare the value in the *.designer.ts file [7] (purple area). We need also to declare the value in the *.designer.ts file [7] (purple area). Finally, in the *.task.ts file (light grey) we need to instantiate it (in this case the variable is the same as the input variable so we will only instantiate it once) and export the settings interface and declare what variables are going to be passed [8]. Finally, in the *.task.ts file (light grey) we need to instantiate it (in this case the variable is the same as the input variable so we will only instantiate it once) and export the settings interface and declare what variables are going to be passed [8]. "
          },
          {
            "topic": "Developing Tips#",
            "definition": "# When developing for the Connect IoT there are some tips that are very useful, especially when creating custom tasks and converters. "
          },
          {
            "topic": "Developing Local GUI#",
            "definition": "# When developing new tasks, it may be useful to perform tests on your local environment, by adding it to a workflow and testing its response. In order to not make you have to deploy it to the remote environment, you can run a local GUI that points to your custom package. In order to do this you will have to install the IIS express, then you will have to copy the HTML folder from the MES installation, typically under c:\\MES\\HTML or c:\\Environments\\<Project Installation\\>\\HTML. In your local environment, in c:\\IoT create a LocalGUI folder (name is optional), paste the contents of the HTML folder, into this folder. Create a batch file to lauch your local Gui with the following command: Now you need to point your local Gui to your local code environment. In order to do this in /LocalGui/node\\_modules/\\<Custom task package\\>, delete all the contents and create a link to your local code environment. For example: If you launch your batch file you will have your local Gui and you will have access to the tasks and converters created in your local development environment. Note If you add custom tasks to the workflow, you will be able to access them using your local Gui, but other people using the remote environment workflow will have an error saying that the custom tasks do not exist. "
          }
        ],
        "code": [
          {
            "topic": "Scaffolding#",
            "code": "yo @criticalmanufacturing/iot:task"
          },
          {
            "topic": "Structure of a Task#",
            "code": "index.*i18n*.settings*.settings.html*.settings.ts*.designer.ts*.task.ts"
          },
          {
            "topic": "Types of Task Activation#",
            "code": "onBeforeInit()onInit()onDestroy()onChanges()onChanges"
          },
          {
            "topic": "onChanges#",
            "code": "onChangesasync onChanges(changes: Task.Changes): Promise<void> {\n    if (changes[\"activate\"]) {\n        // It is advised to reset the activate to allow being reactivated without the value being different\n        this.activate = undefined;\n        // ..."
          },
          {
            "topic": "Driver event activation#",
            "code": "subscribeEventssubscribeRawSystem.\\_driverProxyonInit()onBeforeInit()/** Initialize this task, register any event handler, etc */\nasync onInit(): Promise<void> {\n    if (this._event) {\n        this._logger.debug(`Activating listening for event \"${this._event.Name}\"`);\n        this._driverProxy.subscribeEvents([this._event], this.onEventHandler);\n    }\n}System.EquipmentEventOccurrence\\<any\\>private onEventHandler: System.EquipmentEventOccurrenceCallback<any> = (occurrence: System.EquipmentEventOccurrence<any>): void => {\n    this._logger.debug(`Event \"${occurrence.event.Name}\" received from DriverProxy`);\n\n    // trigger event and timestamp\n    this.event.emit(occurrence.event);\n    this.timestamp.emit(occurrence.timestamp.toDate());\n    this.eventRawData.emit(occurrence);"
          },
          {
            "topic": "Example of a Task#",
            "code": "Log Messagemessageactivate*.task.ts*.task.tsi18n*.default.tsicon-core-connect-iot-lg-logmessageTask.INPUT_ACTIVATETask.OUTPUT_ERRORTask.OUTPUT_SUCCESSPropertyValueTypeSystem.PropertyValueType.String*.settings.htmlcmf-core-controls-baseWidget*.settings.default.tscmf-core-business-controls-propertyContainercmf-core-business-controls-propertyEditorvalueChange)*.settings.tsngOnInit()ngOnInit()_onSettingsValueChange()*.settings.html*.designer.ts*.task.ts*.settings.htmlsettings.message*.settings.tsLogMessageSettings*.designer.ts*.task.ts"
          },
          {
            "topic": "Developing Local GUI#",
            "code": "IIS expressHTMLc:\\MES\\HTMLc:\\Environments\\<Project Installation\\>\\HTMLc:\\IoTLocalGUI\"C:\\Program Files (x86)\\IIS Express\\iisexpress.exe\" /path:\"<your Path>\\LocalGui\" /vpath:\"\" /port:37760\ntimeout 10/LocalGui/node\\_modules/\\<Custom task package\\>cd /d c:\\CmfCustom\\IoT\\LocalGui\\node\\_modules\\@CmfCustom\nrmdir /s connect-iot-controller-engine-custom-tasks\nmklink /j connect-iot-controller-engine-custom-tasks c:\\CmfCustom\\controller-engine-custom-tasks"
          }
        ],
        "links": [
          {
            "topic": "Custom Task#",
            "links": [
              {
                "description": "Custom Task# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#custom-task"
              }
            ]
          },
          {
            "topic": "Scaffolding#",
            "links": [
              {
                "description": "Scaffolding# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#scaffolding"
              }
            ]
          },
          {
            "topic": "Structure of a Task#",
            "links": [
              {
                "description": "Structure of a Task# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#structure-of-a-task"
              },
              {
                "description": "Structure of a Task# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image111.png"
              }
            ]
          },
          {
            "topic": "Types of Task Activation#",
            "links": [
              {
                "description": "Types of Task Activation# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#types-of-task-activation"
              }
            ]
          },
          {
            "topic": "onChanges#",
            "links": [
              {
                "description": "onChanges# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#onchanges"
              }
            ]
          },
          {
            "topic": "Driver event activation#",
            "links": [
              {
                "description": "Driver event activation# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#driver-event-activation"
              }
            ]
          },
          {
            "topic": "Example of a Task#",
            "links": [
              {
                "description": "Example of a Task# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#example-of-a-task"
              },
              {
                "description": "Example of a Task# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image112.png"
              },
              {
                "description": "Example of a Task# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image113.png"
              },
              {
                "description": "Example of a Task# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image114.png"
              },
              {
                "description": "Example of a Task# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image115.png"
              },
              {
                "description": "Example of a Task# (6)",
                "link": "https://angular.io/guide/lifecycle-hooks)."
              },
              {
                "description": "Example of a Task# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image116.png"
              }
            ]
          },
          {
            "topic": "Developing Tips#",
            "links": [
              {
                "description": "Developing Tips# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#developing-tips"
              }
            ]
          },
          {
            "topic": "Developing Local GUI#",
            "links": [
              {
                "description": "Developing Local GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_customtask/#developing-local-gui"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_customtask/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Environment Setup",
        "definition": [
          {
            "topic": "Environment Setup#",
            "definition": "# This page describes the environment setup process, including which software is required and how to bootstrap a base environment for developing IoT customizations. "
          },
          {
            "topic": "Requirements#",
            "definition": "# Install the following software: Visual Studio Code ⧉ Node.js v12.x ⧉ Afterwards, install the Gulp (gulp) and Yeoman ⧉ (yo) tools globally on your system.\n\nnpm i -g gulp\nnpm i -g yo Then, install the Connect IoT scaffolding generator ⧉.\n\nnpm i -g @criticalmanufacturing/generator-iot@80x Windows Build Tools: Python 2 or Python 3 and Visual Studio Build Tools ⧉ (at bottom of page) Since Node.js v12.x, the installation wizard will prompt you to install these two tools.\n\nMake sure to check this box, otherwise you will need to install them manually. Visual Studio Code ⧉ Visual Studio Code ⧉ Visual Studio Code ⧉ Node.js v12.x ⧉ Node.js v12.x ⧉ Node.js v12.x ⧉ Afterwards, install the Gulp (gulp) and Yeoman ⧉ (yo) tools globally on your system.\n\nnpm i -g gulp\nnpm i -g yo Afterwards, install the Gulp (gulp) and Yeoman ⧉ (yo) tools globally on your system. Gulp Yeoman ⧉ Then, install the Connect IoT scaffolding generator ⧉.\n\nnpm i -g @criticalmanufacturing/generator-iot@80x Then, install the Connect IoT scaffolding generator ⧉. Connect IoT scaffolding generator ⧉ Windows Build Tools: Windows Build Tools: Python 2 or Python 3 and Visual Studio Build Tools ⧉ (at bottom of page) Python 2 or Python 3 and Visual Studio Build Tools ⧉ (at bottom of page) Python 2 or Python 3 Visual Studio Build Tools ⧉ Since Node.js v12.x, the installation wizard will prompt you to install these two tools.\n\nMake sure to check this box, otherwise you will need to install them manually. Since Node.js v12.x, the installation wizard will prompt you to install these two tools. Make sure to check this box, otherwise you will need to install them manually.   Additionally, make sure you: Have access to a Critical Manufacturing MES development instance Have followed the base environment setup ⧉ Have Internet Information Services (IIS) Express ⧉ installed Have access to a Critical Manufacturing MES development instance Have access to a Critical Manufacturing MES development instance Have followed the base environment setup ⧉ Have followed the base environment setup ⧉ base environment setup ⧉ Have Internet Information Services (IIS) Express ⧉ installed Have Internet Information Services (IIS) Express ⧉ installed Internet Information Services (IIS) Express ⧉ "
          },
          {
            "topic": "Local Package Repository#",
            "definition": "# It is highly recommended to use a local repository rather than using any other repository available because you are going to deploy, change and remove several times the packages until they are ready to be used in production. We recommend using the Directory Repository due to the low requirements and fast usage. As a starting point, just copy the script .rebuildDatabase.ps1 from an already prepared repository and execute it every time you change the directory contents. "
          },
          {
            "topic": "Local GUI#",
            "definition": "# In order to properly implement and test tasks and converters is to either have a local installation of Critical Manufacturing. Because this is not always possible, there is a way to at least be able to have a local GUI where you can \"play\" with custom tasks. Also, using the local GUI, you can more easily develop the customizations without affecting the other users that could be using the same installation. "
          },
          {
            "topic": "Prepare the files#",
            "definition": "# Copy the entire directory of the Gui from the Critical Manufacturing (usually in C:\\Program Files\\CriticalManufacturing\\UI\\Html) to a local directory (example, d:\\LocalGui)   Note Compress the entire directory and copy that file instead of copying the entire directory. It contains many small files and it takes a long time to copy. Edit the file d:\\LocalGui\\config.json and make sure the configurations are accessible from your computer to the computer/server where the Critical Manufacturing MES is running. Note Usually, only the address in hosts section may need to change from localhost to the ip/dns of the server. "
          },
          {
            "topic": "Start the Web Server#",
            "definition": "# Start the local GUI using the following command line (change the paths/ports if needed): Validate the installation by using a browser pointing to the address: http://localhost:8080 ⧉ http://localhost:8080 ⧉   "
          }
        ],
        "code": [
          {
            "topic": "Requirements#",
            "code": "gulpyonpm i -g gulp\nnpm i -g yonpm i -g @criticalmanufacturing/generator-iot@80x"
          },
          {
            "topic": "Local Package Repository#",
            "code": ".rebuildDatabase.ps1"
          },
          {
            "topic": "Local GUI#",
            "code": "Critical Manufacturing"
          },
          {
            "topic": "Prepare the files#",
            "code": "Critical ManufacturingC:\\Program Files\\CriticalManufacturing\\UI\\Htmld:\\LocalGuid:\\LocalGui\\config.jsonaddresshostslocalhost"
          },
          {
            "topic": "Start the Web Server#",
            "code": "\"c:\\Program Files (x86)\\IIS Express\\iisexpress.exe\" /path:\"D:\\LocalGui\" /vpath:\"/\" /port:8080"
          }
        ],
        "links": [
          {
            "topic": "Environment Setup#",
            "links": [
              {
                "description": "Environment Setup# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#environment-setup"
              }
            ]
          },
          {
            "topic": "Requirements#",
            "links": [
              {
                "description": "Requirements# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#requirements"
              },
              {
                "description": "Requirements# (2)",
                "link": "https://code.visualstudio.com/"
              },
              {
                "description": "Requirements# (3)",
                "link": "https://nodejs.org/dist/latest-v12.x/"
              },
              {
                "description": "Requirements# (4)",
                "link": "https://www.npmjs.com/package/gulp"
              },
              {
                "description": "Requirements# (5)",
                "link": "https://www.npmjs.com/package/yo"
              },
              {
                "description": "Requirements# (6)",
                "link": "https://www.npmjs.com/package/@criticalmanufacturing/generator-iot"
              },
              {
                "description": "Requirements# (7)",
                "link": "https://www.python.org/downloads/"
              },
              {
                "description": "Requirements# (8)",
                "link": "https://visualstudio.microsoft.com/downloads/"
              },
              {
                "description": "Requirements# (9)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/node-native-build-tools.png"
              },
              {
                "description": "Requirements# (10)",
                "link": "http://help.criticalmanufacturing.com/installationguide/post-installation/connect-iot/connectiotinstallation/"
              },
              {
                "description": "Requirements# (11)",
                "link": "https://www.microsoft.com/en-us/download/details.aspx?id=48264"
              }
            ]
          },
          {
            "topic": "Local Package Repository#",
            "links": [
              {
                "description": "Local Package Repository# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#local-package-repository"
              }
            ]
          },
          {
            "topic": "Local GUI#",
            "links": [
              {
                "description": "Local GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#local-gui"
              }
            ]
          },
          {
            "topic": "Prepare the files#",
            "links": [
              {
                "description": "Prepare the files# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#prepare-the-files"
              },
              {
                "description": "Prepare the files# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/localGui01.png"
              }
            ]
          },
          {
            "topic": "Start the Web Server#",
            "links": [
              {
                "description": "Start the Web Server# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/#start-the-web-server"
              },
              {
                "description": "Start the Web Server# (2)",
                "link": "http://localhost:8080/"
              },
              {
                "description": "Start the Web Server# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/localGui02.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Known Issues",
        "definition": [
          {
            "topic": "Known Issues#",
            "definition": "# This page addresses known bugs and issues. "
          },
          {
            "topic": "Task has non-workable dependencies in the GUI#",
            "definition": "# When using tasks that have dependencies that work in NodeJs, but not on the Browser, you may be faced with the error Unable to Find a Task on '<path>'. Did you forget to add the 'export default'?. This error may be due to the GUI not being able to run the called package.   In this case, the import responsible was the mssql library.   In order to fix this, make sure to change your task metadata invocation as shown below; in this case the storeDataCollected task was used as example:   Then, you will need to replace your index.ts with two files, the index.browser and the index.node. Both files should be exactly the same as your index.ts, but should import different providers. "
          }
        ],
        "code": [
          {
            "topic": "Task has non-workable dependencies in the GUI#",
            "code": "Unable to Find a Task on '<path>'. Did you forget to add the 'export default'?storeDataCollectedindex.tsindex.browserindex.nodeindex.ts"
          }
        ],
        "links": [
          {
            "topic": "Known Issues#",
            "links": [
              {
                "description": "Known Issues# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_knownissues/#known-issues"
              }
            ]
          },
          {
            "topic": "Task has non-workable dependencies in the GUI#",
            "links": [
              {
                "description": "Task has non-workable dependencies in the GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_knownissues/#task-has-non-workable-dependencies-in-the-gui"
              },
              {
                "description": "Task has non-workable dependencies in the GUI# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image127.png"
              },
              {
                "description": "Task has non-workable dependencies in the GUI# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image128.png"
              },
              {
                "description": "Task has non-workable dependencies in the GUI# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/image129.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_knownissues/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Debugging Custom Tasks",
        "definition": [
          {
            "topic": "Debugging Custom Tasks#",
            "definition": "# Being able to properly debug the ongoing code is a fundamental step during any development process. "
          },
          {
            "topic": "Environment Preparation#",
            "definition": "# Some of the requirements/steps are the result of the years of development and should be seen as suggestions on how to effectively debug the produced customizations. It is not intended to be a strict set of rules for you to use. "
          },
          {
            "topic": "Requirements#",
            "definition": "# Visual Studio Code Critical Manufacturing MES system Automation Monitor Automation Controller Automation Driver Visual Studio Code Critical Manufacturing MES system Automation Monitor Automation Controller Automation Driver "
          },
          {
            "topic": "GUI#",
            "definition": "# copy, change config, add link, start, why "
          },
          {
            "topic": "Execution#",
            "definition": "# mklink, --dev, monitor (command lines), start vs, vs profile, start processes, etc "
          },
          {
            "topic": "Runtime Debug#",
            "definition": "# To be described "
          },
          {
            "topic": "GUI/Chrome Debug#",
            "definition": "# To be described "
          },
          {
            "topic": "Tips/Hints#",
            "definition": "# To be described "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Debugging Custom Tasks#",
            "links": [
              {
                "description": "Debugging Custom Tasks# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#debugging-custom-tasks"
              }
            ]
          },
          {
            "topic": "Environment Preparation#",
            "links": [
              {
                "description": "Environment Preparation# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#environment-preparation"
              }
            ]
          },
          {
            "topic": "Requirements#",
            "links": [
              {
                "description": "Requirements# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#requirements"
              }
            ]
          },
          {
            "topic": "GUI#",
            "links": [
              {
                "description": "GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#gui"
              }
            ]
          },
          {
            "topic": "Execution#",
            "links": [
              {
                "description": "Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#execution"
              }
            ]
          },
          {
            "topic": "Runtime Debug#",
            "links": [
              {
                "description": "Runtime Debug# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#runtime-debug"
              }
            ]
          },
          {
            "topic": "GUI/Chrome Debug#",
            "links": [
              {
                "description": "GUI/Chrome Debug# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#guichrome-debug"
              }
            ]
          },
          {
            "topic": "Tips/Hints#",
            "links": [
              {
                "description": "Tips/Hints# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/#tipshints"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_tasks_debug/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Tasks Package",
        "definition": [
          {
            "topic": "Tasks Package#",
            "definition": "# This page describes the process of creating a Tasks package. A Tasks package is a Node.js package with a specific structure and dependencies that can contain any number of custom tasks and any number of custom converters. "
          },
          {
            "topic": "Scaffolding#",
            "definition": "# Generate the custom task folder structure by running: After completing the form, the generator will create a new folder structure, where custom tasks should be created.   "
          },
          {
            "topic": "Link the Package in Local Gui#",
            "definition": "# In order to have the customizations available while being implemented, it is highly advisable to use the same location where the Gui is expecting the files to be with the location where the source code is. However, the location where the code is, is normally in a different location (sometimes even in a different disk/partition). In order to have both worlds, there is the concept of links. Initially, you should have the location D:\\LocalGui\\node_modules\\@criticalmanufacturing with the default packages located.   If you created the full package name using the format @{scope}/{name} (in the example of this page we used @customer/connect-iot-controller-engine-custom-tasks), you need to have/create the @{scope} directory under d:\\LocalGui\\node_modules. Now, we will create the package link between where the Local Gui is expecting to have the files and the real location where the source code/development directory is located.   Now, everytime you change the content of the files in the development location D:\\IoT\\controller-engine-custom-tasks the file in D:\\LocalGui\\node_modules\\@customer\\connect-iot-controller-engine-custom-tasks will have the exact same changes. Info Because the files are exactly the same, do not delete any files from D:\\LocalGui\\node_modules\\@customer\\connect-iot-controller-engine-custom-tasks\\ because they will also be deleted in your development directory! You can however, delete the link without any consequences. Info When using the production environment, instead of linking the packages (which is not advisable), you can use the deployed package. "
          },
          {
            "topic": "Enabling the Tasks Package in Local GUI#",
            "definition": "# Open the file config.json that is located in d:\\LocalGui in a file editor. Change the connectiot section and add the name of the custom package. Open the file config.json that is located in d:\\LocalGui in a file editor. Open the file config.json that is located in d:\\LocalGui in a file editor. Change the connectiot section and add the name of the custom package. Change the connectiot section and add the name of the custom package.   "
          },
          {
            "topic": "Deploy a Tasks Package#",
            "definition": "# When you have finished the development of the task(s) and/or converter(s), you must deploy them to the NPM Repository to have them available. Create the tgz (compressed package) file. Using this format is easier to copy/paste the file.\n\ncd /d D:\\IoT\\controller-engine-custom-tasks\nnpm pack Publish the package.\n\nnpm publish customer-connect-iot-controller-engine-custom-tasks-1.0.0.tgz --registry=http://localhost:4873 --tag=latest Create the tgz (compressed package) file. Using this format is easier to copy/paste the file.\n\ncd /d D:\\IoT\\controller-engine-custom-tasks\nnpm pack Create the tgz (compressed package) file. Using this format is easier to copy/paste the file.  Publish the package.\n\nnpm publish customer-connect-iot-controller-engine-custom-tasks-1.0.0.tgz --registry=http://localhost:4873 --tag=latest Publish the package.  "
          }
        ],
        "code": [
          {
            "topic": "Scaffolding#",
            "code": "yo @criticalmanufacturing/iot:tasksPackage"
          },
          {
            "topic": "Link the Package in Local Gui#",
            "code": "linksD:\\LocalGui\\node_modules\\@criticalmanufacturing@{scope}/{name}@customer/connect-iot-controller-engine-custom-tasks@{scope}d:\\LocalGui\\node_modulesmkdir d:\\LocalGui\\node_modules\\@customermklink /j D:\\LocalGui\\node_modules\\@customer\\connect-iot-controller-engine-custom-tasks D:\\IoT\\controller-engine-custom-tasksD:\\IoT\\controller-engine-custom-tasksD:\\LocalGui\\node_modules\\@customer\\connect-iot-controller-engine-custom-tasksD:\\LocalGui\\node_modules\\@customer\\connect-iot-controller-engine-custom-tasks\\"
          },
          {
            "topic": "Enabling the Tasks Package in Local GUI#",
            "code": "config.jsond:\\LocalGuiconnectiot"
          },
          {
            "topic": "Deploy a Tasks Package#",
            "code": "tgzcd /d D:\\IoT\\controller-engine-custom-tasks\nnpm packnpm publish customer-connect-iot-controller-engine-custom-tasks-1.0.0.tgz --registry=http://localhost:4873 --tag=latest"
          }
        ],
        "links": [
          {
            "topic": "Tasks Package#",
            "links": [
              {
                "description": "Tasks Package# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/#tasks-package"
              }
            ]
          },
          {
            "topic": "Scaffolding#",
            "links": [
              {
                "description": "Scaffolding# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/#scaffolding"
              },
              {
                "description": "Scaffolding# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/TasksPackage01.png"
              }
            ]
          },
          {
            "topic": "Link the Package in Local Gui#",
            "links": [
              {
                "description": "Link the Package in Local Gui# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/#link-the-package-in-local-gui"
              },
              {
                "description": "Link the Package in Local Gui# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/TasksPackage02.png"
              },
              {
                "description": "Link the Package in Local Gui# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/TasksPackage03.png"
              }
            ]
          },
          {
            "topic": "Enabling the Tasks Package in Local GUI#",
            "links": [
              {
                "description": "Enabling the Tasks Package in Local GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/#enabling-the-tasks-package-in-local-gui"
              },
              {
                "description": "Enabling the Tasks Package in Local GUI# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/images/TasksPackage04.png"
              }
            ]
          },
          {
            "topic": "Deploy a Tasks Package#",
            "links": [
              {
                "description": "Deploy a Tasks Package# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/#deploy-a-tasks-package"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/customization_taskspackage/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Automation tasks library\n\n\n\n\n\n\n\n\n\nAutomation tasks library\n\n\n\n\n\nAutomation Tasks Library Metadata",
        "definition": [
          {
            "topic": "Automation Tasks Library#",
            "definition": "# An Automation Task Library is a set of metadata that contains sufficient information to integrate automation tasks to be used in the Automation Workflow Designer without the need of any coding or development skills. It is also intended to allow you to see the configured settings of a Task that was created in earlier versions of the installed system. This method allows quicker extensibility since the development process of the tasks should be relatively faster due to the nature of the Automation Tasks Library which gives the developer the possibility to deploy a set of tasks in the system through a package by creating the task code and defining the proper metadata in a JSON file, with no need for specific knowledge of other toolsets or environments. "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Automation Tasks Library#",
            "links": [
              {
                "description": "Automation Tasks Library# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/#automation-tasks-library"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Automation Tasks Library Metadata",
            "definition": [
              {
                "topic": "Automation Tasks Library Metadata#",
                "definition": "# The metadata is located in the package.json file, in the tasksLibrary key, under the criticalManufacturing section. The top-level fields of the structure are as follows: "
              },
              {
                "topic": "Metadata#",
                "definition": "# "
              },
              {
                "topic": "Converters#",
                "definition": "# Note Possible examples showing different approaches that the user can set as parameters: "
              },
              {
                "topic": "Tasks#",
                "definition": "# "
              },
              {
                "topic": "Automation Task Input#",
                "definition": "# "
              },
              {
                "topic": "Automation Task Input Type#",
                "definition": "# "
              },
              {
                "topic": "Automation Task Output#",
                "definition": "# "
              },
              {
                "topic": "Automation Task Output Type#",
                "definition": "# "
              },
              {
                "topic": "Automation Task Settings#",
                "definition": "# The settings are represented by a JSON object using a tree format using the following structure:   For both Tab and Section, the key of the object will represent the text. They are not very important to describe, because they only act as a way to organize the way the settings are shown. This structure can be defined in the configuration file through this simple JSON example: Each of the settings can have the following structure definition: "
              }
            ],
            "code": [
              {
                "topic": "Automation Tasks Library Metadata#",
                "code": "package.jsontasksLibrarycriticalManufacturingMAJOR.MINOR.PATCH,@criticalmanufacturing/connect-iot-driver-oib,,@criticalmanufacturing/connect-iot-driver-oib,"
              },
              {
                "topic": "Converters#",
                "code": "{\n    \"argument\": \"Integer\",\n    \"argument2\": {\n        \"displayName\": \"Something\",\n        \"dataType\": \"Integer\"\n    }\n},\n{\n    \"anArray\": {\n        \"dataType\": \"Enum\",\n        \"enumValues\": [\"a\", \"b\"]\n    }\n},\n{\n    \"anArray\": {\n        \"displayName\": \"Something\",\n        \"dataType\": \"Enum\",\n        \"infoMessage\": \"Select the logical operation to perform\",\n        \"enumValues\": [\n            { \"Logic AND\": \"And\" },\n            { \"Logic OR\": \"Or\" }\n        ]\n    }\n}"
              },
              {
                "topic": "Automation Task Settings#",
                "code": ".\n└── Tab\n    ├── Section1\n    │   ├── Setting One\n    │   ├── Setting Two\n    │   └── ...\n    └── Section2\n        ├── Setting\n        └── ...{\n    \"General\": {\n        \"Settings\": [\n            {\n                ...\n            }\n        ]\n    },\n    \"Inputs\": {\n    },\n    \"Outputs\": {\n    },\n    \"Code\": {\n    }\n}timerType != null && timerType !== \"CronJob\""
              }
            ],
            "links": [
              {
                "topic": "Automation Tasks Library Metadata#",
                "links": [
                  {
                    "description": "Automation Tasks Library Metadata# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-tasks-library-metadata"
                  }
                ]
              },
              {
                "topic": "Metadata#",
                "links": [
                  {
                    "description": "Metadata# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#metadata"
                  }
                ]
              },
              {
                "topic": "Converters#",
                "links": [
                  {
                    "description": "Converters# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#converters"
                  }
                ]
              },
              {
                "topic": "Tasks#",
                "links": [
                  {
                    "description": "Tasks# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#tasks"
                  }
                ]
              },
              {
                "topic": "Automation Task Input#",
                "links": [
                  {
                    "description": "Automation Task Input# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-input"
                  }
                ]
              },
              {
                "topic": "Automation Task Input Type#",
                "links": [
                  {
                    "description": "Automation Task Input Type# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-input-type"
                  }
                ]
              },
              {
                "topic": "Automation Task Output#",
                "links": [
                  {
                    "description": "Automation Task Output# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-output"
                  }
                ]
              },
              {
                "topic": "Automation Task Output Type#",
                "links": [
                  {
                    "description": "Automation Task Output Type# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-output-type"
                  }
                ]
              },
              {
                "topic": "Automation Task Settings#",
                "links": [
                  {
                    "description": "Automation Task Settings# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-settings"
                  },
                  {
                    "description": "Automation Task Settings# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/images/atl_task_settings.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Automation Tasks Library Metadata",
        "definition": [
          {
            "topic": "Automation Tasks Library Metadata#",
            "definition": "# The metadata is located in the package.json file, in the tasksLibrary key, under the criticalManufacturing section. The top-level fields of the structure are as follows: "
          },
          {
            "topic": "Metadata#",
            "definition": "# "
          },
          {
            "topic": "Converters#",
            "definition": "# Note Possible examples showing different approaches that the user can set as parameters: "
          },
          {
            "topic": "Tasks#",
            "definition": "# "
          },
          {
            "topic": "Automation Task Input#",
            "definition": "# "
          },
          {
            "topic": "Automation Task Input Type#",
            "definition": "# "
          },
          {
            "topic": "Automation Task Output#",
            "definition": "# "
          },
          {
            "topic": "Automation Task Output Type#",
            "definition": "# "
          },
          {
            "topic": "Automation Task Settings#",
            "definition": "# The settings are represented by a JSON object using a tree format using the following structure:   For both Tab and Section, the key of the object will represent the text. They are not very important to describe, because they only act as a way to organize the way the settings are shown. This structure can be defined in the configuration file through this simple JSON example: Each of the settings can have the following structure definition: "
          }
        ],
        "code": [
          {
            "topic": "Automation Tasks Library Metadata#",
            "code": "package.jsontasksLibrarycriticalManufacturingMAJOR.MINOR.PATCH,@criticalmanufacturing/connect-iot-driver-oib,,@criticalmanufacturing/connect-iot-driver-oib,"
          },
          {
            "topic": "Converters#",
            "code": "{\n    \"argument\": \"Integer\",\n    \"argument2\": {\n        \"displayName\": \"Something\",\n        \"dataType\": \"Integer\"\n    }\n},\n{\n    \"anArray\": {\n        \"dataType\": \"Enum\",\n        \"enumValues\": [\"a\", \"b\"]\n    }\n},\n{\n    \"anArray\": {\n        \"displayName\": \"Something\",\n        \"dataType\": \"Enum\",\n        \"infoMessage\": \"Select the logical operation to perform\",\n        \"enumValues\": [\n            { \"Logic AND\": \"And\" },\n            { \"Logic OR\": \"Or\" }\n        ]\n    }\n}"
          },
          {
            "topic": "Automation Task Settings#",
            "code": ".\n└── Tab\n    ├── Section1\n    │   ├── Setting One\n    │   ├── Setting Two\n    │   └── ...\n    └── Section2\n        ├── Setting\n        └── ...{\n    \"General\": {\n        \"Settings\": [\n            {\n                ...\n            }\n        ]\n    },\n    \"Inputs\": {\n    },\n    \"Outputs\": {\n    },\n    \"Code\": {\n    }\n}timerType != null && timerType !== \"CronJob\""
          }
        ],
        "links": [
          {
            "topic": "Automation Tasks Library Metadata#",
            "links": [
              {
                "description": "Automation Tasks Library Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-tasks-library-metadata"
              }
            ]
          },
          {
            "topic": "Metadata#",
            "links": [
              {
                "description": "Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#metadata"
              }
            ]
          },
          {
            "topic": "Converters#",
            "links": [
              {
                "description": "Converters# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#converters"
              }
            ]
          },
          {
            "topic": "Tasks#",
            "links": [
              {
                "description": "Tasks# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#tasks"
              }
            ]
          },
          {
            "topic": "Automation Task Input#",
            "links": [
              {
                "description": "Automation Task Input# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-input"
              }
            ]
          },
          {
            "topic": "Automation Task Input Type#",
            "links": [
              {
                "description": "Automation Task Input Type# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-input-type"
              }
            ]
          },
          {
            "topic": "Automation Task Output#",
            "links": [
              {
                "description": "Automation Task Output# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-output"
              }
            ]
          },
          {
            "topic": "Automation Task Output Type#",
            "links": [
              {
                "description": "Automation Task Output Type# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-output-type"
              }
            ]
          },
          {
            "topic": "Automation Task Settings#",
            "links": [
              {
                "description": "Automation Task Settings# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/#automation-task-settings"
              },
              {
                "description": "Automation Task Settings# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/images/atl_task_settings.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/automation-tasks-library/metadata/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Tutorial\n\n\n\n\n\n\n\n\n\nTutorial\n\n\n\n\n\nSECS/GEM Integration Tutorial",
        "definition": [
          {
            "topic": "Automation#",
            "definition": "# Critical Manufacturing MES is able to automate and integrate with equipment or equivalent interfaces using the Connect IoT module. Multiple protocol drivers for some of the most common interfaces used by shop floor equipment are already provided out of the box. The integration interface is an extensible mechanism where the logic is represented using flow-based programming. To get started, see the Environment Setup page. Environment Setup "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Automation#",
            "links": [
              {
                "description": "Automation# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/#automation"
              },
              {
                "description": "Automation# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/tutorial/",
        "flag": true,
        "submodulos": [
          {
            "topic": "SECS/GEM Integration Tutorial",
            "definition": [
              {
                "topic": "SECS/GEM Integration Tutorial#",
                "definition": "# This tutorial covers the integration of a secs/gem interface to update the resource state (using SEMI E10 model) in MES. Updating the state in MES will allow OEE calculation. Note During this tutorial, Automation Manager will run in console mode in order to highlight the most important events when they occur. "
              },
              {
                "topic": "Automation Manager process starting#",
                "definition": "# Choose an unique identifier for the Automation Manager name, and set it as the id value of the json configuration file. In this example, SecsGemTutorialManager name is used.   Start the manager process in console mode.   The manager process will try to identify the unique name in the MES, and fails because it is not created yet. It will retry until the process ends or the Automation Manager entity is created.   "
              },
              {
                "topic": "Automation Manager#",
                "definition": "# The Automation Manager entity represents a server process that will run and control a number of instances. This can be seen as an Operating System that will execute several processes. Each of the processes will be responsible to either connect to an interface of an equipment (network address, shared folder, etc) using a protocol driver, or execute the logic intended to model the behavior of the automation (what to do when the equipment raises an alarm, send a stop command, etc). Go to Business Data > Automation Manager and click the New button. Enter the name, description, type and provide a unique name (in this example SecsGemTutorialManager) as the Automation Manager ID.   Click the Create button. The Automation Manager state becomes Active. Note The Automation Manager entity is not versioned. Check the Automation Manager console. The Automation Manager process is now able to identify the unique name in the MES and gets the list of instances to start and monitor (none so far, they will be instantiated later).   "
              },
              {
                "topic": "Automation Protocol#",
                "definition": "# The Automation Protocol entity represents the technical specification of the protocol communication interface, implemented by the corresponding communication driver package. It holds the protocol parameters, the protocol data types and extended data meaningful to the protocol implementation. The default values for the protocol parameters are imported directly from the communication driver package, but they can be overridden as well. Go to Business Data > Automation Protocol and click the Newbutton. Click the Create button to create a new ChangeSet or select an existing one. If creating a new one, enter the name, type and click the Create button.   Click the Next button. In the general data, provide: A name that represents the automation protocol; A description; The type (for classification purposes); @criticalmanufacturing/connect-iot-driver-secsgem as the package name; The package version. A name that represents the automation protocol; A description; The type (for classification purposes); @criticalmanufacturing/connect-iot-driver-secsgem as the package name; The package version. Note The package name and version selected will later indicate to the Automation Manager that is running, what process and version to download, prepare and execute.   Click the Next button. Set the default values for the SECS/GEM protocol parameters. Note These values can be individually overridden by the Automation Controller workflows. In this step we will only define what will be the default values for all automations that use this protocol. Click the Next button. Click the Create button. The Automation Protocol state becomes Created. Note The Automation Protocol entity is versioned. "
              },
              {
                "topic": "Automation Driver Definition#",
                "definition": "# The Automation Driver Definition entity represents the characteristics of a particular equipment type interface according to the vendor specification. A list of properties, events, the relation between them, commands and command parameters, must be chosen according to the requirements of the integration to implement. For this tutorial we will require only one property (SVID in SECS/GEM) and one event (CEID in SECS/GEM) to detect the equipment changing its process status. Go to Business Data > Automation Driver Definition and click the New button. Select or create an existing ChangeSet. Click the Next button. In the general data, provide: A name that represents the automation driver A description The type (for classification purposes) The name of the previously created Automation Protocol - Secs Gem Protocol.1 The Resource type as the entity type for the new Automation Driver Definition. A name that represents the automation driver A description The type (for classification purposes) The name of the previously created Automation Protocol - Secs Gem Protocol.1 The Resource type as the entity type for the new Automation Driver Definition.   Click the Next button. Let's assume that according to the specification, the VID representing the equipment status is 2011, of data type U1 (Format) and it is a Status variable (SV). Table: VID Property Add a new entry to the list of Properties by clicking the + button. In the property details, provide: A name that represents the variable name; A description; The device id which is the SVID in SECS/GEM; The type of data of the variable; The writable and readable flags (in this case, we cannot change the value); The data type of the variable in SECS/GEM format; Finally, the SECS/GEM variable type (Status variable, data variable or constant) ; A name that represents the variable name; A description; The device id which is the SVID in SECS/GEM; The type of data of the variable; The writable and readable flags (in this case, we cannot change the value); The data type of the variable in SECS/GEM format; Finally, the SECS/GEM variable type (Status variable, data variable or constant) ;   Click the Next button. Let's assume that according to the specification, the CEID representing the equipment changing status event is 1000. Table: CEID Property Add a new entry to the list of Events by clicking the + button. In the event details, provide: A name that represents the event name; A description; The device id which is the CEID in SECS/GEM; The enabled flag (in this case, turn it on. If off, the event will be ignored); The event as alarm flag (identify this event as an alarm in SECS/GEM. In this case, turn it off); A name that represents the event name; A description; The device id which is the CEID in SECS/GEM; The enabled flag (in this case, turn it on. If off, the event will be ignored); The event as alarm flag (identify this event as an alarm in SECS/GEM. In this case, turn it off);   Click the Next button. In the following step, we combine the information between events and properties. The list of configured events is available on the left side. For each event, add the associated properties on the right side according to the vendor specification. If a specific report id is also provided by the specification (RPTID in SECS/GEM) , you should set it as well. Note If the report id is left blank, it will be auto generated. Let's assume that according to the specification, the RPTID associated to the event StatusChanged is 2. Table: Status changed event Note For each event, make sure to add the properties and the reports in the exact order mentioned by the vendor specification. Otherwise it will compromise the mapping between the data sent by the equipment and the expected data configured by the driver definition, which in turn might lead to an unexpected behavior by the automation controller.   Click the Next button. This tutorial does not focus on the equipment commands, so skip the Commands panel by selecting the Next button. Skip the Command Parameters panel as well by selecting the Create button. The Automation Driver Definition state becomes Created. Note The Automation Driver Definition entity is versioned. "
              },
              {
                "topic": "Automation Controller#",
                "definition": "# The Automation Controller will orchestrate the behavior between the equipment and the MES system. In this tutorial it will detect the change of the equipment status property and map it to a SEMI E10 Resource State, according to the following table: Table: Mapping SEMI E10 Resource State to a property Go to Business Data > Automation Controller and click the New button. Select or create an existing ChangeSet. Click the Next button. Provide a name, description, type, controller package version and set Resource as the entity type for the new Automation Driver Controller. Click the Next button.   In the drivers definitions panel, add a new driver definition by clicking the + button. Provide a friendly name for it, select the previously created Automation Driver Definition and choose a color to paint the tasks that will be associated to this driver definition. Click the Next button.   In the tasks panel, select the task packages that will be relevant for the integration itself and available in the workflow designer. For this tutorial, the Core Package - connect-iot-controller-engine-core-tasks - is enough. Note This package contains driver related tasks such as equipment setup, event triggering, property handling, command handling, etc. Also contains system related tasks such as entity instance, execute a service or action, adjust entity state, etc. And finally logic/flow related tasks, such as persistency handling, switch statement, timers, logging messages, etc.   Note The tasks loaded by the Automation Controller are set in metadata through a ControllerEngineFilter structure, making the packages and tasks visible and/or selected and mandatory according to the loaded information. These filters can indicate mandatory and or dependency status and there are several rules that dictate the proper functioning: If a package matches the mandatory filters, it will be selected in the package list and cannot be unselected. All others will be unselected; If a tasks package is listed with a dependency and doesn't match the filder, it should appear as disabled in the list of packages available for selection. Specific tasks follow the same rules, meaning that the system can have a configured package with some tasks that only work along with specific drivers and scopes; The GUI sorts the available package in the list by the following order: Mandatory (and selected) Available for selection Disabled If a package matches the mandatory filters, it will be selected in the package list and cannot be unselected. All others will be unselected; If a tasks package is listed with a dependency and doesn't match the filder, it should appear as disabled in the list of packages available for selection. Specific tasks follow the same rules, meaning that the system can have a configured package with some tasks that only work along with specific drivers and scopes; The GUI sorts the available package in the list by the following order: Mandatory (and selected) Available for selection Disabled Click the Create button. The Automation Controller state becomes Created. Note The Automation Controller entity is versioned. "
              },
              {
                "topic": "Automation Controller Workflow#",
                "definition": "# In the newly created controller go to Views > Workflow.   The workflow designer is divided in two areas: On the left side (1), the page designer, where the tasks objects are dragged and dropped for a particular page. You can also adjust the zoom level, fit to the window, expand or collapse all task instances. On the right side (2), a menu which consists of three panels Pages panel (3), where you can select the page to view or edit, create a new page, remove an existing page or reorder the list of pages. Pages are created for logistical purposes, to group task instances related to each other. It's not possible to link tasks from distinct pages; Tasks panel (4), where you can view and filter all the available tasks and select the ones to drag to the page designer; View panel (5), where you can show or hide some details of the tasks within the page designer. On the left side (1), the page designer, where the tasks objects are dragged and dropped for a particular page. You can also adjust the zoom level, fit to the window, expand or collapse all task instances. On the right side (2), a menu which consists of three panels Pages panel (3), where you can select the page to view or edit, create a new page, remove an existing page or reorder the list of pages. Pages are created for logistical purposes, to group task instances related to each other. It's not possible to link tasks from distinct pages; Tasks panel (4), where you can view and filter all the available tasks and select the ones to drag to the page designer; View panel (5), where you can show or hide some details of the tasks within the page designer.   As you can see above, there is a workflow page that was automatically created, called Setup with two tasks within it: On Equipment Setup and Equipment Setup Result. On Equipment Setup and Equipment Setup Result. These are driver related tasks regarding communication configuration and initialization. Link them, as shown below: Link the onInitialize output directly to the connect input; Link the onSetup output to the successinput. Link the onInitialize output directly to the connect input; Link the onSetup output to the successinput.   Save the changes. Note When the connection between the controller and the driver processes is established the onInitialize event is triggered. By linking it to the connect input, it indicates the driver process to configure and connect to the equipment. When the connection to the equipment is established the onSetup event is triggered. By linking it to the success input, it informs the driver that the setup process was a success (the driver state changes to Communicating. If the setup process is intended to fail, it should link to the failure input. In that case, the driver state changes to ConnectingFailed and enters into a retry loop until it connects to the equipment successfully). Having the possibility to decide if the setup process succeeds or fails, allows the workflow developer to perform specific tasks, like some additional configuration within the equipment. This tutorial does not cover that for now. Create a new Page and give it a meaningful name. For example, State Change Scenario.   You should save the changes in order to not lose them. Just click the Save button at the top ribbon. You may save the changes whenever needed from now on, after performing any change within the workflow.   Drag and drop the following tasks to the State Change Scenario page designer: Entity Instance (will represent the MES Resource entity in runtime) On Equipment Event (Will be triggered when the state changes in the equipment/simulator) Switch (Will decide the final Semi E-10 state name) Adjust State (Will change the state of the resource in MES) Entity Instance (will represent the MES Resource entity in runtime) On Equipment Event (Will be triggered when the state changes in the equipment/simulator) Switch (Will decide the final Semi E-10 state name) Adjust State (Will change the state of the resource in MES)   When adding the Entity Instance task, it will be asked for you to choose between the entity associated to one of the drivers or the entity associated to the controller. Choose the Main Tool driver and click the button Save and Close.   It should look like the below example. Note There is only three outputs for the On Equipment Event task. These are the default ones. As soon as a specific event is configured, the associated properties, if any, will be displayed as outputs as well.   Go to the Settings of the On Equipment Event task and select the event StatusChanged. Click the OK button.   Note Notice that there is now one new output available - Status, as defined previously at the Automation Driver Definition for the StatusChanged event.   Go to the Settings of the Entity Instance task and enable the Auto activate flag. Click the OK button.   Go to the Settingsof the Switch task and set the Input Type to Integer. Click the OK button.   In the Outputs panel, add 6 output entries. For each one, configure the Name, Equals to, Type and Value, as shown below. All output types are String and the Equals to goes from 1 to 6. Click the OK button.   Now we can link the tasks together, in order to produce the desired result of detecting the change of the equipment status and map it to a SEMI E10 Resource State in the MES for the resource entity that will be associated to this controller: Link the $Status output of the On Equipment Event task instance to the valueinput of the Switch task instance; Link the Instance output of the Entity Instance task instance to the entity input of the Adjust State task instance; Link each one of the outputs of the Switch task instance to both toState and Activate inputs of the Adjust State task instance. Link the $Status output of the On Equipment Event task instance to the valueinput of the Switch task instance; Link the Instance output of the Entity Instance task instance to the entity input of the Adjust State task instance; Link each one of the outputs of the Switch task instance to both toState and Activate inputs of the Adjust State task instance. It should look like this.   So, basically what will happen behind the scenes, is that whenever the driver process detects the trigger of an event defined in the Automation Driver Definition, it will forward it to the controller process. The controller process by its turn will check if the event configured in the On Equipment Event matches the event sent by the driver. If so, the Switch task instance gets activated, and compares the Statusvalue with the switch case. When a match is found it activates the Adjust State task instance. The Adjust State task instance will update the SEMI E10 state for the given Resource Entity Instance in MES. Note The Resource Entity Instance will be assigned in the next step when creating the Automation Controller Instance. "
              },
              {
                "topic": "Automation Controller Instance#",
                "definition": "# Now that we defined the intended behavior through the Automation Controller, we need to associate it to an entity and a manager in order to make it work. Go back to the workflow details. Go to Views > Details.   Click the Connect button at the top ribbon.   You must provide the resource and the automation manager this instance will be associated to. Choose the resource and select the automation manager previously created in this tutorial.   Click the Next button. In the Automation Drivers panel select the Main Tool driver and choose the same resource chosen before for the controller (Etch-01 in this example).   Note The entity that gets selected will provide context to either the controller or driver definitions. The controller and each driver definition might have distinct entities associated to it. For example, let's consider a line with 3 equipment. The controller entity might be associated to the resource that represents the line, and each individual driver definition the corresponding equipment resource. Click the Connect button. Now, if you scroll down you can find a summary of the instances for this controller. In this case, you will see the one that was just created.   You can also check for the controller instance and the associated driver instance if you go to the Automation menu item. Here are listed all available instances in the system, grouped by the automation manager.   Now check the Automation Manager console. As the Automation Controller information was updated the process now gets again the list of instances to start and monitor. The Automation Monitor then asks the Automation Manager to start the processes for the Automation Controller instance and the Automation Driver instance.   "
              },
              {
                "topic": "Equipment Simulator Tests#",
                "definition": "# In order to test this integration tutorial, let's open the Secs/Gem Equipment Simulator Tool (you can download it from this location. location Run the GenericEquipmentSimulator.exe file. The following window will appear.   Notice that the simulator communication state is set to Disconnected. Go to the Configuration tab (1). Click the ...button (2) to open the simulation configuration file. Select the SecsGemTutorial.xml file and click the Open button.   You must check the Communication Parameters (1) and validate if the communication settings (2) are compatible with the default settings (3) of the On Equipment Setup task instance configured in the workflow.   Once the parameters are validated, you can turn the simulator on by clicking the Go button.   Notice that the simulator communication state changes from Disconnected to Connected. Also notice that the communication state in the Automation tab in the MES system changes to Communicating for the driver instance.   Note If you turn the simulator off by clicking the 'Stop' button, the communication states will change back to Disconnected. You can test by yourself by alternating between the Go and Stopbutton, but then leave it communicating for being able to follow the next steps of the tutorial. Go to Business Data > Resource and search for the resource. Click over the resource Etch-01to open its details.   You can see that the resource is associated to the Secs Gem Controller.1 Automation Controller (1) and that the current SEMI E10 state is set toStandby (2).   Let's switch to the Equipment tab in the Secs/Gem Equipment Simulator Tool.   There you can find six colored buttons, each one emitting the status changed event (CEID 1000) with the status variable (SVID 2011) value ranging between 1 and 6 according to the following mapping. Table: Simulator Status Button Let's click for example in the blue Engineering button and see what changes in the resource details. Click the Refresh button (1) and notice that the SEMI E10 state changed to Engineering as well.   Also in the Automation Manager console, we can see what is going on. The value 4 is sent along with the event 1000, and the switch case handles it, outputting the Engineeringvalue.   You can try, by clicking the other buttons of the simulator, and then refreshing the resource details and checking the update of the resource state happening in the MES system. "
              }
            ],
            "code": [
              {
                "topic": "Automation Manager process starting#",
                "code": "idSecsGemTutorialManager"
              },
              {
                "topic": "Automation Manager#",
                "code": "Business Data > Automation ManagerNewSecsGemTutorialManagerCreateActive"
              },
              {
                "topic": "Automation Protocol#",
                "code": "Business Data > Automation ProtocolNewCreateCreateNext@criticalmanufacturing/connect-iot-driver-secsgemNextNextCreateCreated"
              },
              {
                "topic": "Automation Driver Definition#",
                "code": "Business Data > Automation Driver DefinitionNewNextSecs Gem Protocol.1ResourceNextNextNextNextNextCreateCreated"
              },
              {
                "topic": "Automation Controller#",
                "code": "Business Data > Automation ControllerNewNextNextNextconnect-iot-controller-engine-core-tasksControllerEngineFilterCreateCreated"
              },
              {
                "topic": "Automation Controller Workflow#",
                "code": "Views > WorkflowPagesTasksViewSetuponInitializeconnectonSetupsuccessonInitializeconnectonSetupsuccessCommunicatingfailureConnectingFailedState Change ScenarioSaveMain ToolSave and CloseSettingsOn Equipment EventStatusChangedOKStatusStatusChangedSettingsEntity InstanceAuto activateOKSettingsSwitchIntegerOKStringEquals toOK$StatusOn Equipment EventvalueSwitchInstanceEntity InstanceentityAdjust StateSwitchtoStateActivateAdjust StateOn Equipment EventSwitchStatusAdjust StateAdjust State"
              },
              {
                "topic": "Automation Controller Instance#",
                "code": "Views > DetailsConnectNextMain ToolConnectAutomation"
              },
              {
                "topic": "Equipment Simulator Tests#",
                "code": "DisconnectedConfiguration...SecsGemTutorial.xmlOpenCommunication ParametersOn Equipment SetupGoDisconnectedConnectedAutomationCommunicatingDisconnectedGoStopBusiness Data > ResourceEtch-01Secs Gem Controller.1StandbyEquipmentEngineeringRefreshEngineeringEngineering"
              }
            ],
            "links": [
              {
                "topic": "SECS/GEM Integration Tutorial#",
                "links": [
                  {
                    "description": "SECS/GEM Integration Tutorial# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#secsgem-integration-tutorial"
                  }
                ]
              },
              {
                "topic": "Automation Manager process starting#",
                "links": [
                  {
                    "description": "Automation Manager process starting# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-manager-process-starting"
                  },
                  {
                    "description": "Automation Manager process starting# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/config_file.png"
                  },
                  {
                    "description": "Automation Manager process starting# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_start.png"
                  },
                  {
                    "description": "Automation Manager process starting# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_error_identify.png"
                  }
                ]
              },
              {
                "topic": "Automation Manager#",
                "links": [
                  {
                    "description": "Automation Manager# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-manager"
                  },
                  {
                    "description": "Automation Manager# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_create.png"
                  },
                  {
                    "description": "Automation Manager# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_found.png"
                  }
                ]
              },
              {
                "topic": "Automation Protocol#",
                "links": [
                  {
                    "description": "Automation Protocol# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-protocol"
                  },
                  {
                    "description": "Automation Protocol# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/protocol_changeset.png"
                  },
                  {
                    "description": "Automation Protocol# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/protocol_create.png"
                  }
                ]
              },
              {
                "topic": "Automation Driver Definition#",
                "links": [
                  {
                    "description": "Automation Driver Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-driver-definition"
                  },
                  {
                    "description": "Automation Driver Definition# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_create.png"
                  },
                  {
                    "description": "Automation Driver Definition# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_properties.png"
                  },
                  {
                    "description": "Automation Driver Definition# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_events.png"
                  },
                  {
                    "description": "Automation Driver Definition# (5)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_event_properties.png"
                  }
                ]
              },
              {
                "topic": "Automation Controller#",
                "links": [
                  {
                    "description": "Automation Controller# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller"
                  },
                  {
                    "description": "Automation Controller# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_create.png"
                  },
                  {
                    "description": "Automation Controller# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_driver_definitions.png"
                  },
                  {
                    "description": "Automation Controller# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_task_packages.png"
                  }
                ]
              },
              {
                "topic": "Automation Controller Workflow#",
                "links": [
                  {
                    "description": "Automation Controller Workflow# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller-workflow"
                  },
                  {
                    "description": "Automation Controller Workflow# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_views_workflow.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_designer_layout.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_setup_links.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (5)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (6)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_save_changes.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (7)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_task_icons.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (8)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_entity.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (9)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_tasks.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (10)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_edit_event.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (11)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_event_set.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (12)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_edit_entity.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (13)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_switch_general.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (14)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_switch_outputs.png"
                  },
                  {
                    "description": "Automation Controller Workflow# (15)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_tasks_final.png"
                  }
                ]
              },
              {
                "topic": "Automation Controller Instance#",
                "links": [
                  {
                    "description": "Automation Controller Instance# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller-instance"
                  },
                  {
                    "description": "Automation Controller Instance# (2)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_views_details.png"
                  },
                  {
                    "description": "Automation Controller Instance# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect.png"
                  },
                  {
                    "description": "Automation Controller Instance# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect_entity.png"
                  },
                  {
                    "description": "Automation Controller Instance# (5)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect_drivers.png"
                  },
                  {
                    "description": "Automation Controller Instance# (6)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_instances.png"
                  },
                  {
                    "description": "Automation Controller Instance# (7)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/automation_instances.png"
                  },
                  {
                    "description": "Automation Controller Instance# (8)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_updated1.png"
                  }
                ]
              },
              {
                "topic": "Equipment Simulator Tests#",
                "links": [
                  {
                    "description": "Equipment Simulator Tests# (1)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#equipment-simulator-tests"
                  },
                  {
                    "description": "Equipment Simulator Tests# (2)",
                    "link": "https://developer.criticalmanufacturing.com/files/SecsGemSimulator.zip"
                  },
                  {
                    "description": "Equipment Simulator Tests# (3)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_run_exec.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (4)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_open_lib.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (5)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_check_comm_params.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (6)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_connected.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (7)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/automation_instance_communicating.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (8)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_find.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (9)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_details.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (10)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_equipment_status.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (11)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_details_Engineering.png"
                  },
                  {
                    "description": "Equipment Simulator Tests# (12)",
                    "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_console_state_change.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "SECS/GEM Integration Tutorial",
        "definition": [
          {
            "topic": "SECS/GEM Integration Tutorial#",
            "definition": "# This tutorial covers the integration of a secs/gem interface to update the resource state (using SEMI E10 model) in MES. Updating the state in MES will allow OEE calculation. Note During this tutorial, Automation Manager will run in console mode in order to highlight the most important events when they occur. "
          },
          {
            "topic": "Automation Manager process starting#",
            "definition": "# Choose an unique identifier for the Automation Manager name, and set it as the id value of the json configuration file. In this example, SecsGemTutorialManager name is used.   Start the manager process in console mode.   The manager process will try to identify the unique name in the MES, and fails because it is not created yet. It will retry until the process ends or the Automation Manager entity is created.   "
          },
          {
            "topic": "Automation Manager#",
            "definition": "# The Automation Manager entity represents a server process that will run and control a number of instances. This can be seen as an Operating System that will execute several processes. Each of the processes will be responsible to either connect to an interface of an equipment (network address, shared folder, etc) using a protocol driver, or execute the logic intended to model the behavior of the automation (what to do when the equipment raises an alarm, send a stop command, etc). Go to Business Data > Automation Manager and click the New button. Enter the name, description, type and provide a unique name (in this example SecsGemTutorialManager) as the Automation Manager ID.   Click the Create button. The Automation Manager state becomes Active. Note The Automation Manager entity is not versioned. Check the Automation Manager console. The Automation Manager process is now able to identify the unique name in the MES and gets the list of instances to start and monitor (none so far, they will be instantiated later).   "
          },
          {
            "topic": "Automation Protocol#",
            "definition": "# The Automation Protocol entity represents the technical specification of the protocol communication interface, implemented by the corresponding communication driver package. It holds the protocol parameters, the protocol data types and extended data meaningful to the protocol implementation. The default values for the protocol parameters are imported directly from the communication driver package, but they can be overridden as well. Go to Business Data > Automation Protocol and click the Newbutton. Click the Create button to create a new ChangeSet or select an existing one. If creating a new one, enter the name, type and click the Create button.   Click the Next button. In the general data, provide: A name that represents the automation protocol; A description; The type (for classification purposes); @criticalmanufacturing/connect-iot-driver-secsgem as the package name; The package version. A name that represents the automation protocol; A description; The type (for classification purposes); @criticalmanufacturing/connect-iot-driver-secsgem as the package name; The package version. Note The package name and version selected will later indicate to the Automation Manager that is running, what process and version to download, prepare and execute.   Click the Next button. Set the default values for the SECS/GEM protocol parameters. Note These values can be individually overridden by the Automation Controller workflows. In this step we will only define what will be the default values for all automations that use this protocol. Click the Next button. Click the Create button. The Automation Protocol state becomes Created. Note The Automation Protocol entity is versioned. "
          },
          {
            "topic": "Automation Driver Definition#",
            "definition": "# The Automation Driver Definition entity represents the characteristics of a particular equipment type interface according to the vendor specification. A list of properties, events, the relation between them, commands and command parameters, must be chosen according to the requirements of the integration to implement. For this tutorial we will require only one property (SVID in SECS/GEM) and one event (CEID in SECS/GEM) to detect the equipment changing its process status. Go to Business Data > Automation Driver Definition and click the New button. Select or create an existing ChangeSet. Click the Next button. In the general data, provide: A name that represents the automation driver A description The type (for classification purposes) The name of the previously created Automation Protocol - Secs Gem Protocol.1 The Resource type as the entity type for the new Automation Driver Definition. A name that represents the automation driver A description The type (for classification purposes) The name of the previously created Automation Protocol - Secs Gem Protocol.1 The Resource type as the entity type for the new Automation Driver Definition.   Click the Next button. Let's assume that according to the specification, the VID representing the equipment status is 2011, of data type U1 (Format) and it is a Status variable (SV). Table: VID Property Add a new entry to the list of Properties by clicking the + button. In the property details, provide: A name that represents the variable name; A description; The device id which is the SVID in SECS/GEM; The type of data of the variable; The writable and readable flags (in this case, we cannot change the value); The data type of the variable in SECS/GEM format; Finally, the SECS/GEM variable type (Status variable, data variable or constant) ; A name that represents the variable name; A description; The device id which is the SVID in SECS/GEM; The type of data of the variable; The writable and readable flags (in this case, we cannot change the value); The data type of the variable in SECS/GEM format; Finally, the SECS/GEM variable type (Status variable, data variable or constant) ;   Click the Next button. Let's assume that according to the specification, the CEID representing the equipment changing status event is 1000. Table: CEID Property Add a new entry to the list of Events by clicking the + button. In the event details, provide: A name that represents the event name; A description; The device id which is the CEID in SECS/GEM; The enabled flag (in this case, turn it on. If off, the event will be ignored); The event as alarm flag (identify this event as an alarm in SECS/GEM. In this case, turn it off); A name that represents the event name; A description; The device id which is the CEID in SECS/GEM; The enabled flag (in this case, turn it on. If off, the event will be ignored); The event as alarm flag (identify this event as an alarm in SECS/GEM. In this case, turn it off);   Click the Next button. In the following step, we combine the information between events and properties. The list of configured events is available on the left side. For each event, add the associated properties on the right side according to the vendor specification. If a specific report id is also provided by the specification (RPTID in SECS/GEM) , you should set it as well. Note If the report id is left blank, it will be auto generated. Let's assume that according to the specification, the RPTID associated to the event StatusChanged is 2. Table: Status changed event Note For each event, make sure to add the properties and the reports in the exact order mentioned by the vendor specification. Otherwise it will compromise the mapping between the data sent by the equipment and the expected data configured by the driver definition, which in turn might lead to an unexpected behavior by the automation controller.   Click the Next button. This tutorial does not focus on the equipment commands, so skip the Commands panel by selecting the Next button. Skip the Command Parameters panel as well by selecting the Create button. The Automation Driver Definition state becomes Created. Note The Automation Driver Definition entity is versioned. "
          },
          {
            "topic": "Automation Controller#",
            "definition": "# The Automation Controller will orchestrate the behavior between the equipment and the MES system. In this tutorial it will detect the change of the equipment status property and map it to a SEMI E10 Resource State, according to the following table: Table: Mapping SEMI E10 Resource State to a property Go to Business Data > Automation Controller and click the New button. Select or create an existing ChangeSet. Click the Next button. Provide a name, description, type, controller package version and set Resource as the entity type for the new Automation Driver Controller. Click the Next button.   In the drivers definitions panel, add a new driver definition by clicking the + button. Provide a friendly name for it, select the previously created Automation Driver Definition and choose a color to paint the tasks that will be associated to this driver definition. Click the Next button.   In the tasks panel, select the task packages that will be relevant for the integration itself and available in the workflow designer. For this tutorial, the Core Package - connect-iot-controller-engine-core-tasks - is enough. Note This package contains driver related tasks such as equipment setup, event triggering, property handling, command handling, etc. Also contains system related tasks such as entity instance, execute a service or action, adjust entity state, etc. And finally logic/flow related tasks, such as persistency handling, switch statement, timers, logging messages, etc.   Note The tasks loaded by the Automation Controller are set in metadata through a ControllerEngineFilter structure, making the packages and tasks visible and/or selected and mandatory according to the loaded information. These filters can indicate mandatory and or dependency status and there are several rules that dictate the proper functioning: If a package matches the mandatory filters, it will be selected in the package list and cannot be unselected. All others will be unselected; If a tasks package is listed with a dependency and doesn't match the filder, it should appear as disabled in the list of packages available for selection. Specific tasks follow the same rules, meaning that the system can have a configured package with some tasks that only work along with specific drivers and scopes; The GUI sorts the available package in the list by the following order: Mandatory (and selected) Available for selection Disabled If a package matches the mandatory filters, it will be selected in the package list and cannot be unselected. All others will be unselected; If a tasks package is listed with a dependency and doesn't match the filder, it should appear as disabled in the list of packages available for selection. Specific tasks follow the same rules, meaning that the system can have a configured package with some tasks that only work along with specific drivers and scopes; The GUI sorts the available package in the list by the following order: Mandatory (and selected) Available for selection Disabled Click the Create button. The Automation Controller state becomes Created. Note The Automation Controller entity is versioned. "
          },
          {
            "topic": "Automation Controller Workflow#",
            "definition": "# In the newly created controller go to Views > Workflow.   The workflow designer is divided in two areas: On the left side (1), the page designer, where the tasks objects are dragged and dropped for a particular page. You can also adjust the zoom level, fit to the window, expand or collapse all task instances. On the right side (2), a menu which consists of three panels Pages panel (3), where you can select the page to view or edit, create a new page, remove an existing page or reorder the list of pages. Pages are created for logistical purposes, to group task instances related to each other. It's not possible to link tasks from distinct pages; Tasks panel (4), where you can view and filter all the available tasks and select the ones to drag to the page designer; View panel (5), where you can show or hide some details of the tasks within the page designer. On the left side (1), the page designer, where the tasks objects are dragged and dropped for a particular page. You can also adjust the zoom level, fit to the window, expand or collapse all task instances. On the right side (2), a menu which consists of three panels Pages panel (3), where you can select the page to view or edit, create a new page, remove an existing page or reorder the list of pages. Pages are created for logistical purposes, to group task instances related to each other. It's not possible to link tasks from distinct pages; Tasks panel (4), where you can view and filter all the available tasks and select the ones to drag to the page designer; View panel (5), where you can show or hide some details of the tasks within the page designer.   As you can see above, there is a workflow page that was automatically created, called Setup with two tasks within it: On Equipment Setup and Equipment Setup Result. On Equipment Setup and Equipment Setup Result. These are driver related tasks regarding communication configuration and initialization. Link them, as shown below: Link the onInitialize output directly to the connect input; Link the onSetup output to the successinput. Link the onInitialize output directly to the connect input; Link the onSetup output to the successinput.   Save the changes. Note When the connection between the controller and the driver processes is established the onInitialize event is triggered. By linking it to the connect input, it indicates the driver process to configure and connect to the equipment. When the connection to the equipment is established the onSetup event is triggered. By linking it to the success input, it informs the driver that the setup process was a success (the driver state changes to Communicating. If the setup process is intended to fail, it should link to the failure input. In that case, the driver state changes to ConnectingFailed and enters into a retry loop until it connects to the equipment successfully). Having the possibility to decide if the setup process succeeds or fails, allows the workflow developer to perform specific tasks, like some additional configuration within the equipment. This tutorial does not cover that for now. Create a new Page and give it a meaningful name. For example, State Change Scenario.   You should save the changes in order to not lose them. Just click the Save button at the top ribbon. You may save the changes whenever needed from now on, after performing any change within the workflow.   Drag and drop the following tasks to the State Change Scenario page designer: Entity Instance (will represent the MES Resource entity in runtime) On Equipment Event (Will be triggered when the state changes in the equipment/simulator) Switch (Will decide the final Semi E-10 state name) Adjust State (Will change the state of the resource in MES) Entity Instance (will represent the MES Resource entity in runtime) On Equipment Event (Will be triggered when the state changes in the equipment/simulator) Switch (Will decide the final Semi E-10 state name) Adjust State (Will change the state of the resource in MES)   When adding the Entity Instance task, it will be asked for you to choose between the entity associated to one of the drivers or the entity associated to the controller. Choose the Main Tool driver and click the button Save and Close.   It should look like the below example. Note There is only three outputs for the On Equipment Event task. These are the default ones. As soon as a specific event is configured, the associated properties, if any, will be displayed as outputs as well.   Go to the Settings of the On Equipment Event task and select the event StatusChanged. Click the OK button.   Note Notice that there is now one new output available - Status, as defined previously at the Automation Driver Definition for the StatusChanged event.   Go to the Settings of the Entity Instance task and enable the Auto activate flag. Click the OK button.   Go to the Settingsof the Switch task and set the Input Type to Integer. Click the OK button.   In the Outputs panel, add 6 output entries. For each one, configure the Name, Equals to, Type and Value, as shown below. All output types are String and the Equals to goes from 1 to 6. Click the OK button.   Now we can link the tasks together, in order to produce the desired result of detecting the change of the equipment status and map it to a SEMI E10 Resource State in the MES for the resource entity that will be associated to this controller: Link the $Status output of the On Equipment Event task instance to the valueinput of the Switch task instance; Link the Instance output of the Entity Instance task instance to the entity input of the Adjust State task instance; Link each one of the outputs of the Switch task instance to both toState and Activate inputs of the Adjust State task instance. Link the $Status output of the On Equipment Event task instance to the valueinput of the Switch task instance; Link the Instance output of the Entity Instance task instance to the entity input of the Adjust State task instance; Link each one of the outputs of the Switch task instance to both toState and Activate inputs of the Adjust State task instance. It should look like this.   So, basically what will happen behind the scenes, is that whenever the driver process detects the trigger of an event defined in the Automation Driver Definition, it will forward it to the controller process. The controller process by its turn will check if the event configured in the On Equipment Event matches the event sent by the driver. If so, the Switch task instance gets activated, and compares the Statusvalue with the switch case. When a match is found it activates the Adjust State task instance. The Adjust State task instance will update the SEMI E10 state for the given Resource Entity Instance in MES. Note The Resource Entity Instance will be assigned in the next step when creating the Automation Controller Instance. "
          },
          {
            "topic": "Automation Controller Instance#",
            "definition": "# Now that we defined the intended behavior through the Automation Controller, we need to associate it to an entity and a manager in order to make it work. Go back to the workflow details. Go to Views > Details.   Click the Connect button at the top ribbon.   You must provide the resource and the automation manager this instance will be associated to. Choose the resource and select the automation manager previously created in this tutorial.   Click the Next button. In the Automation Drivers panel select the Main Tool driver and choose the same resource chosen before for the controller (Etch-01 in this example).   Note The entity that gets selected will provide context to either the controller or driver definitions. The controller and each driver definition might have distinct entities associated to it. For example, let's consider a line with 3 equipment. The controller entity might be associated to the resource that represents the line, and each individual driver definition the corresponding equipment resource. Click the Connect button. Now, if you scroll down you can find a summary of the instances for this controller. In this case, you will see the one that was just created.   You can also check for the controller instance and the associated driver instance if you go to the Automation menu item. Here are listed all available instances in the system, grouped by the automation manager.   Now check the Automation Manager console. As the Automation Controller information was updated the process now gets again the list of instances to start and monitor. The Automation Monitor then asks the Automation Manager to start the processes for the Automation Controller instance and the Automation Driver instance.   "
          },
          {
            "topic": "Equipment Simulator Tests#",
            "definition": "# In order to test this integration tutorial, let's open the Secs/Gem Equipment Simulator Tool (you can download it from this location. location Run the GenericEquipmentSimulator.exe file. The following window will appear.   Notice that the simulator communication state is set to Disconnected. Go to the Configuration tab (1). Click the ...button (2) to open the simulation configuration file. Select the SecsGemTutorial.xml file and click the Open button.   You must check the Communication Parameters (1) and validate if the communication settings (2) are compatible with the default settings (3) of the On Equipment Setup task instance configured in the workflow.   Once the parameters are validated, you can turn the simulator on by clicking the Go button.   Notice that the simulator communication state changes from Disconnected to Connected. Also notice that the communication state in the Automation tab in the MES system changes to Communicating for the driver instance.   Note If you turn the simulator off by clicking the 'Stop' button, the communication states will change back to Disconnected. You can test by yourself by alternating between the Go and Stopbutton, but then leave it communicating for being able to follow the next steps of the tutorial. Go to Business Data > Resource and search for the resource. Click over the resource Etch-01to open its details.   You can see that the resource is associated to the Secs Gem Controller.1 Automation Controller (1) and that the current SEMI E10 state is set toStandby (2).   Let's switch to the Equipment tab in the Secs/Gem Equipment Simulator Tool.   There you can find six colored buttons, each one emitting the status changed event (CEID 1000) with the status variable (SVID 2011) value ranging between 1 and 6 according to the following mapping. Table: Simulator Status Button Let's click for example in the blue Engineering button and see what changes in the resource details. Click the Refresh button (1) and notice that the SEMI E10 state changed to Engineering as well.   Also in the Automation Manager console, we can see what is going on. The value 4 is sent along with the event 1000, and the switch case handles it, outputting the Engineeringvalue.   You can try, by clicking the other buttons of the simulator, and then refreshing the resource details and checking the update of the resource state happening in the MES system. "
          }
        ],
        "code": [
          {
            "topic": "Automation Manager process starting#",
            "code": "idSecsGemTutorialManager"
          },
          {
            "topic": "Automation Manager#",
            "code": "Business Data > Automation ManagerNewSecsGemTutorialManagerCreateActive"
          },
          {
            "topic": "Automation Protocol#",
            "code": "Business Data > Automation ProtocolNewCreateCreateNext@criticalmanufacturing/connect-iot-driver-secsgemNextNextCreateCreated"
          },
          {
            "topic": "Automation Driver Definition#",
            "code": "Business Data > Automation Driver DefinitionNewNextSecs Gem Protocol.1ResourceNextNextNextNextNextCreateCreated"
          },
          {
            "topic": "Automation Controller#",
            "code": "Business Data > Automation ControllerNewNextNextNextconnect-iot-controller-engine-core-tasksControllerEngineFilterCreateCreated"
          },
          {
            "topic": "Automation Controller Workflow#",
            "code": "Views > WorkflowPagesTasksViewSetuponInitializeconnectonSetupsuccessonInitializeconnectonSetupsuccessCommunicatingfailureConnectingFailedState Change ScenarioSaveMain ToolSave and CloseSettingsOn Equipment EventStatusChangedOKStatusStatusChangedSettingsEntity InstanceAuto activateOKSettingsSwitchIntegerOKStringEquals toOK$StatusOn Equipment EventvalueSwitchInstanceEntity InstanceentityAdjust StateSwitchtoStateActivateAdjust StateOn Equipment EventSwitchStatusAdjust StateAdjust State"
          },
          {
            "topic": "Automation Controller Instance#",
            "code": "Views > DetailsConnectNextMain ToolConnectAutomation"
          },
          {
            "topic": "Equipment Simulator Tests#",
            "code": "DisconnectedConfiguration...SecsGemTutorial.xmlOpenCommunication ParametersOn Equipment SetupGoDisconnectedConnectedAutomationCommunicatingDisconnectedGoStopBusiness Data > ResourceEtch-01Secs Gem Controller.1StandbyEquipmentEngineeringRefreshEngineeringEngineering"
          }
        ],
        "links": [
          {
            "topic": "SECS/GEM Integration Tutorial#",
            "links": [
              {
                "description": "SECS/GEM Integration Tutorial# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#secsgem-integration-tutorial"
              }
            ]
          },
          {
            "topic": "Automation Manager process starting#",
            "links": [
              {
                "description": "Automation Manager process starting# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-manager-process-starting"
              },
              {
                "description": "Automation Manager process starting# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/config_file.png"
              },
              {
                "description": "Automation Manager process starting# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_start.png"
              },
              {
                "description": "Automation Manager process starting# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_error_identify.png"
              }
            ]
          },
          {
            "topic": "Automation Manager#",
            "links": [
              {
                "description": "Automation Manager# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-manager"
              },
              {
                "description": "Automation Manager# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_create.png"
              },
              {
                "description": "Automation Manager# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_found.png"
              }
            ]
          },
          {
            "topic": "Automation Protocol#",
            "links": [
              {
                "description": "Automation Protocol# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-protocol"
              },
              {
                "description": "Automation Protocol# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/protocol_changeset.png"
              },
              {
                "description": "Automation Protocol# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/protocol_create.png"
              }
            ]
          },
          {
            "topic": "Automation Driver Definition#",
            "links": [
              {
                "description": "Automation Driver Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-driver-definition"
              },
              {
                "description": "Automation Driver Definition# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_create.png"
              },
              {
                "description": "Automation Driver Definition# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_properties.png"
              },
              {
                "description": "Automation Driver Definition# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_events.png"
              },
              {
                "description": "Automation Driver Definition# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/driver_definition_event_properties.png"
              }
            ]
          },
          {
            "topic": "Automation Controller#",
            "links": [
              {
                "description": "Automation Controller# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller"
              },
              {
                "description": "Automation Controller# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_create.png"
              },
              {
                "description": "Automation Controller# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_driver_definitions.png"
              },
              {
                "description": "Automation Controller# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_task_packages.png"
              }
            ]
          },
          {
            "topic": "Automation Controller Workflow#",
            "links": [
              {
                "description": "Automation Controller Workflow# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller-workflow"
              },
              {
                "description": "Automation Controller Workflow# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_views_workflow.png"
              },
              {
                "description": "Automation Controller Workflow# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_designer_layout.png"
              },
              {
                "description": "Automation Controller Workflow# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_setup_links.png"
              },
              {
                "description": "Automation Controller Workflow# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario.png"
              },
              {
                "description": "Automation Controller Workflow# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_save_changes.png"
              },
              {
                "description": "Automation Controller Workflow# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_task_icons.png"
              },
              {
                "description": "Automation Controller Workflow# (8)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_entity.png"
              },
              {
                "description": "Automation Controller Workflow# (9)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_tasks.png"
              },
              {
                "description": "Automation Controller Workflow# (10)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_edit_event.png"
              },
              {
                "description": "Automation Controller Workflow# (11)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_event_set.png"
              },
              {
                "description": "Automation Controller Workflow# (12)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_edit_entity.png"
              },
              {
                "description": "Automation Controller Workflow# (13)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_switch_general.png"
              },
              {
                "description": "Automation Controller Workflow# (14)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_switch_outputs.png"
              },
              {
                "description": "Automation Controller Workflow# (15)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_workflow_state_change_scenario_tasks_final.png"
              }
            ]
          },
          {
            "topic": "Automation Controller Instance#",
            "links": [
              {
                "description": "Automation Controller Instance# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#automation-controller-instance"
              },
              {
                "description": "Automation Controller Instance# (2)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_views_details.png"
              },
              {
                "description": "Automation Controller Instance# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect.png"
              },
              {
                "description": "Automation Controller Instance# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect_entity.png"
              },
              {
                "description": "Automation Controller Instance# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_connect_drivers.png"
              },
              {
                "description": "Automation Controller Instance# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/controller_instances.png"
              },
              {
                "description": "Automation Controller Instance# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/automation_instances.png"
              },
              {
                "description": "Automation Controller Instance# (8)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_updated1.png"
              }
            ]
          },
          {
            "topic": "Equipment Simulator Tests#",
            "links": [
              {
                "description": "Equipment Simulator Tests# (1)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/#equipment-simulator-tests"
              },
              {
                "description": "Equipment Simulator Tests# (2)",
                "link": "https://developer.criticalmanufacturing.com/files/SecsGemSimulator.zip"
              },
              {
                "description": "Equipment Simulator Tests# (3)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_run_exec.png"
              },
              {
                "description": "Equipment Simulator Tests# (4)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_open_lib.png"
              },
              {
                "description": "Equipment Simulator Tests# (5)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_check_comm_params.png"
              },
              {
                "description": "Equipment Simulator Tests# (6)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_connected.png"
              },
              {
                "description": "Equipment Simulator Tests# (7)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/automation_instance_communicating.png"
              },
              {
                "description": "Equipment Simulator Tests# (8)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_find.png"
              },
              {
                "description": "Equipment Simulator Tests# (9)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_details.png"
              },
              {
                "description": "Equipment Simulator Tests# (10)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/equipment_simulator_equipment_status.png"
              },
              {
                "description": "Equipment Simulator Tests# (11)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/resource_details_Engineering.png"
              },
              {
                "description": "Equipment Simulator Tests# (12)",
                "link": "https://developer.criticalmanufacturing.com/automation/tutorial/images/secsgem/manager_console_state_change.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/automation/tutorial/tutorial_secsgem/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "Automation#",
        "links": [
          {
            "description": "Automation# (1)",
            "link": "https://developer.criticalmanufacturing.com/automation/#automation"
          },
          {
            "description": "Automation# (2)",
            "link": "https://developer.criticalmanufacturing.com/automation/customization_environmentsetup/"
          }
        ]
      }
    ]
  },
  {
    "topic": "Business",
    "href": "https://developer.criticalmanufacturing.com/business/",
    "flag": true,
    "definition": [
      {
        "topic": "Business Tier#",
        "definition": "# The extensibility of the Business Tier can be achieved either by modifying the provided business logic or by creating new business logic. This section describes the different Business Tier extensibility points. "
      },
      {
        "topic": "Development Tools#",
        "definition": "# For customization and development on the Presentation Tier, the following tools are required: Microsoft Visual Studio (http://www.microsoft.com/vstudio ⧉) Microsoft Visual Studio (http://www.microsoft.com/vstudio ⧉) http://www.microsoft.com/vstudio ⧉ "
      },
      {
        "topic": "Development Skills#",
        "definition": "# The customization of the Presentation Tier requires some knowledge on the following areas: C# or other .Net language C# or other .Net language "
      },
      {
        "topic": "Extensibility Options#",
        "definition": "# The following list describes the different mechanisms for extending the Business Tier. Each topic is explained in detail in a separate section. Creating Remote Export Plugins - custom formatter and transports for material ship and receive information Creating DEE Actions - pre and post transaction logic Creating Custom Dispatch Sort Rules - rules to sort the material or resource dispatch list Creating Custom Entity Types - business objects that integrate into the system framework Creating Custom SPC Rules - rules to test for spc violation patterns Creating Orchestration - services that orchestrate different business objects and operations Creating Services - apis of the application Creating Static Actions - custom logic to be run upon host startup Creating Tables - generic, lookup and smart tables Creating Remote Export Plugins - custom formatter and transports for material ship and receive information Creating Remote Export Plugins Creating DEE Actions - pre and post transaction logic Creating DEE Actions Creating Custom Dispatch Sort Rules - rules to sort the material or resource dispatch list Creating Custom Dispatch Sort Rules Creating Custom Entity Types - business objects that integrate into the system framework Creating Custom Entity Types Creating Custom SPC Rules - rules to test for spc violation patterns Creating Custom SPC Rules Creating Orchestration - services that orchestrate different business objects and operations Creating Orchestration Creating Services - apis of the application Creating Services Creating Static Actions - custom logic to be run upon host startup Creating Static Actions Creating Tables - generic, lookup and smart tables Creating Tables "
      },
      {
        "topic": "BI Cards#",
        "definition": "# BI Cards Technical Reference - explains the architecture and the input and output data formats that are used during calculation Tutorial - contains a step-by-step example of how to setup a bi card BI Cards Technical Reference - explains the architecture and the input and output data formats that are used during calculation BI Cards Technical Reference Tutorial - contains a step-by-step example of how to setup a bi card Tutorial "
      },
      {
        "topic": "Additional Sections#",
        "definition": "# The Business section of the customization guide contains additional sections that describe: Exporting Relations - how to export and import entity type relations Overriding the System Context Resolutions Smart Tables - how to override the system context resolution smart tables Light Business Objects (LBOs) - how to create a proxy library with the system business objects ERP - BAPI Return Handler - how to customize bapi calls return handling MES services through HTTP API - how to connect to the mes through the http api that is available in the system Enabling ElasticAPM - how to enable elastic apm agent on the host service Execute Parallel Code - how to execute parallel code Message Bus Tutorial - how to use the Message Bus assemblies to publish and subscribe to messages Exporting Relations - how to export and import entity type relations Exporting Relations Overriding the System Context Resolutions Smart Tables - how to override the system context resolution smart tables Overriding the System Context Resolutions Smart Tables Light Business Objects (LBOs) - how to create a proxy library with the system business objects Light Business Objects (LBOs) ERP - BAPI Return Handler - how to customize bapi calls return handling ERP - BAPI Return Handler MES services through HTTP API - how to connect to the mes through the http api that is available in the system MES services through HTTP API Enabling ElasticAPM - how to enable elastic apm agent on the host service Enabling ElasticAPM Execute Parallel Code - how to execute parallel code Execute Parallel Code Message Bus Tutorial - how to use the Message Bus assemblies to publish and subscribe to messages Message Bus Tutorial "
      }
    ],
    "submodulos": [
      {
        "topic": "ERP - BAPI Return Handler",
        "definition": [
          {
            "topic": "ERP - BAPI Return Handler#",
            "definition": "# In Critical Manufacturing MES versions earlier than version 4.0, when a BAPI was called asynchronously, the system would place this call in a output queue and another thread would call the ERP. The system would then search the returned tables and structures (based in the SAP structures BAPIRETURN, BAPIRET1, BAPIRET2, BAPI_CORU_RETURN) for rows with column TYPE = 'E'. If there is at least one match, the BAPI call was considered an error and it would be stored in the output error queue for later automatic retry or manual analysis. From version 4.0 onwards, the analysis of the BAPI return is done in the DEE Action ERPOutputMessageHandlerAction. This allows the user to customize the analysis of the BAPI return and change the standard behavior if necessary. The shipped DEE Action code will perform the search described above, and if any error records are found, it will automatically send an email to a distribution list (if defined). "
          }
        ],
        "code": [
          {
            "topic": "ERP - BAPI Return Handler#",
            "code": "TYPE = 'E'"
          }
        ],
        "links": [
          {
            "topic": "ERP - BAPI Return Handler#",
            "links": [
              {
                "description": "ERP - BAPI Return Handler# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bapireturnhandler/#erp-bapi-return-handler"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bapireturnhandler/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "BI Cards\n\n\n\n\n\n\n\n\n\nBI Cards\n\n\n\n\n\nTutorial\n\n\n\n\n\n\nTechnical Reference",
        "definition": [
          {
            "topic": "BI Cards#",
            "definition": "# Technical Reference - explains the architecture and the input and output data formats that are used during calculation. Tutorial - contains a step-by-step example of how to setup a bi card. Technical Reference - explains the architecture and the input and output data formats that are used during calculation. Technical Reference Tutorial - contains a step-by-step example of how to setup a bi card. Tutorial "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "BI Cards#",
            "links": [
              {
                "description": "BI Cards# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/#bi-cards"
              },
              {
                "description": "BI Cards# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/"
              },
              {
                "description": "BI Cards# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Tutorial",
            "definition": [
              {
                "topic": "Tutorial#",
                "definition": "# As an example, the following tutorial will show how to create a new KPI to monitor the number of materials in a step for a given period. We will create 3 dimensions during this exercise: Current Shift; Current Day and Last 7 Days which will represent the number of materials that entered a step (and remained in it) since the specific threshold accordingly. "
              },
              {
                "topic": "New KPI named #Materials In Step#",
                "definition": "# The following picture depicts the details to create the desired dynamic KPI, please notice the selection of the entity type Step, the parameter of type “long” (i.e. this KPI will output numeric, non-floating values), the type “Minimum” (i.e. the smaller the value, the better) and default target thresholds.   "
              },
              {
                "topic": "KPI Dimensions#",
                "definition": "# Below its shown how to create the previously described dimensions. "
              },
              {
                "topic": "Current Day#",
                "definition": "# To create a dimension users need to define the name of the dimension, it’s value type (DataValue means a single value shall be returned) the source (in this case OperationalDataStore), the actual command to run (the SQL statement) and the default visualization (although users can change it when defining BI Cards afterwards).   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
              },
              {
                "topic": "Last 7 Days#",
                "definition": "# This dimension has its own SQL statement and is defined as a DataSeries, i.e. it will output multiple values (in this case the count by day). Also, the default visualization is the bar chart instead of a “data value”.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
              },
              {
                "topic": "Current Shift#",
                "definition": "# This dimension is very similar to the “Current Day”, the main difference is that it will only count the materials that arrived and remained in the step since the start of the shift.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
              },
              {
                "topic": "KPI Timeframes#",
                "definition": "# Timeframes allow the definition of distinct target values depending on the specific step, dimension, and timeframe. In the below example you can see specific targets for the step Mixing and dimension “Current Day”:   Imagine on the next week there will be a peak of production, a power user could set here another timeframe within the next week dates accordingly as shown below:   "
              },
              {
                "topic": "New BI Card#",
                "definition": "# Start by adding a new “BI Card” into a UIPage, then on the settings you can setup the layout and details of the BI Card. "
              },
              {
                "topic": "General Step#",
                "definition": "#   "
              },
              {
                "topic": "Setup Step#",
                "definition": "#   "
              },
              {
                "topic": "Layout Step#",
                "definition": "# Here users can select the KPIs and dimensions they want to see in the BI Card, as well as the chart type and name to show in the header of the chart widget. Note Values shown are actual values returned from the database.   "
              },
              {
                "topic": "BI Card - Duplicate Option#",
                "definition": "# To easy the setup of multiple similar BI Cards for many entities, users can use the “Duplicate” option:   Then users can change the entity name (in this example the step changed from Mixing to Cooling) and in the end you shall have something like the following UI Page which could, for instance, be continuously shown, and automatically refreshed, in a screen monitor in a production line:   "
              },
              {
                "topic": "BI Card on Fullscreen#",
                "definition": "#   "
              }
            ],
            "code": [],
            "links": [
              {
                "topic": "Tutorial#",
                "links": [
                  {
                    "description": "Tutorial# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#tutorial"
                  }
                ]
              },
              {
                "topic": "New KPI named #Materials In Step#",
                "links": [
                  {
                    "description": "New KPI named #Materials In Step# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-kpi-named-materials-in-step"
                  },
                  {
                    "description": "New KPI named #Materials In Step# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image7.png"
                  }
                ]
              },
              {
                "topic": "KPI Dimensions#",
                "links": [
                  {
                    "description": "KPI Dimensions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-dimensions"
                  }
                ]
              },
              {
                "topic": "Current Day#",
                "links": [
                  {
                    "description": "Current Day# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-day"
                  },
                  {
                    "description": "Current Day# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image8.png"
                  }
                ]
              },
              {
                "topic": "Last 7 Days#",
                "links": [
                  {
                    "description": "Last 7 Days# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#last-7-days"
                  },
                  {
                    "description": "Last 7 Days# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image9.png"
                  }
                ]
              },
              {
                "topic": "Current Shift#",
                "links": [
                  {
                    "description": "Current Shift# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-shift"
                  },
                  {
                    "description": "Current Shift# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image10.png"
                  }
                ]
              },
              {
                "topic": "KPI Timeframes#",
                "links": [
                  {
                    "description": "KPI Timeframes# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-timeframes"
                  },
                  {
                    "description": "KPI Timeframes# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image11.png"
                  },
                  {
                    "description": "KPI Timeframes# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image12.png"
                  }
                ]
              },
              {
                "topic": "New BI Card#",
                "links": [
                  {
                    "description": "New BI Card# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-bi-card"
                  }
                ]
              },
              {
                "topic": "General Step#",
                "links": [
                  {
                    "description": "General Step# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#general-step"
                  },
                  {
                    "description": "General Step# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image13.png"
                  }
                ]
              },
              {
                "topic": "Setup Step#",
                "links": [
                  {
                    "description": "Setup Step# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#setup-step"
                  },
                  {
                    "description": "Setup Step# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image14.png"
                  }
                ]
              },
              {
                "topic": "Layout Step#",
                "links": [
                  {
                    "description": "Layout Step# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#layout-step"
                  },
                  {
                    "description": "Layout Step# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image15.png"
                  }
                ]
              },
              {
                "topic": "BI Card - Duplicate Option#",
                "links": [
                  {
                    "description": "BI Card - Duplicate Option# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-duplicate-option"
                  },
                  {
                    "description": "BI Card - Duplicate Option# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image16.png"
                  },
                  {
                    "description": "BI Card - Duplicate Option# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image17.png"
                  }
                ]
              },
              {
                "topic": "BI Card on Fullscreen#",
                "links": [
                  {
                    "description": "BI Card on Fullscreen# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-on-fullscreen"
                  },
                  {
                    "description": "BI Card on Fullscreen# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/image18.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Technical Reference",
            "definition": [
              {
                "topic": "Technical Reference#",
                "definition": "# The KPIs definitions will reside in the MES database as KPI objects. Using the UI Page designer, it will be possible to create widgets that reference the different available KPIs. During runtime, the GUIs will request the application server to retrieve the value of the KPIs. A special service (GetKPIValues) will abstract and implement the logic required to calculate and return the needed KPI values.   Each widget rendering a kpi will issue a request to GetKPIValues, passing it information about the associated Entity Type and about the KPI. The API is then responsible for fetching the data from the configured data source, optionally preparing the required parameters according to the datasource requirements, perform system and user defined calculations on that data and return a result suitable for being rendered in the widget. "
              },
              {
                "topic": "KPI General Output Data Structure#",
                "definition": "# To produce uniform results, the KPI value calculation output result must follow a preestablished column-value data structure convention. This structure applies to both static and dynamic KPIs. Afterwards static and dynamic KPIs extend this data structure by adding additional columns (notice the last line on the following table). Table: KPI General Output Data Structure "
              },
              {
                "topic": "Static KPIs#",
                "definition": "# The output data structure for static KPIs is established from the linked KPI timeframe and is as follows: Table: Static KPIs "
              },
              {
                "topic": "Dynamic KPIs#",
                "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked to a Business Rule and will be written in C#, they can be made of SQL Statements or MDX Statements targeting a given data source. In both cases the output data structure for dynamic KPIs established from the target KPI as well from the execution run-time and/or the resolved KPI timeframe and is as follows: Table: Dynamic KPIs "
              },
              {
                "topic": "Dynamic KPIs calculated with Rules#",
                "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked with a business rule (internally referred as DEE action). The business rule is written in C# and has as input\\output a list of key-value pair parameters as follows: https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8 ⧉ Table: Dynamic KPIs calculated with Rules "
              },
              {
                "topic": "Code Example#",
                "definition": "# An example of a business rule code is listed below: "
              },
              {
                "topic": "Dynamic KPIs calculated SQL Statements#",
                "definition": "# The SQL statements can target the ODS, the DWH and the AS databases. "
              },
              {
                "topic": "Predefined Parameters#",
                "definition": "# The system provides a set predefined parameters that can be used to compose the ODS, the DWH or the AS SQL statements and hence aid in the KPI value calculation. Table: Predefined parameters The target Entity instance Calendar (and respective time zone) is evaluated by calling the business rule EvaluateCalendarForEntity with the result being as follows: Table: Entity instance example "
              },
              {
                "topic": "Manifests#",
                "definition": "# The dynamic KPIs that target the Analytics datastore ( source type = ‘AS’ ) require the SQL statements to have a special header (manifest) in order to properly handle the required input output parameters data and format. The manifest is framed inside a TSQL block comment (/* */) and has the following format: Where the ‘@{?}’ pattern refers to input parameters and the *@Output{?}_Column* pattern refers to output parameters. The manifest token description is as follows: https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017 ⧉ https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef ⧉ Table: Manifests "
              },
              {
                "topic": "Example#",
                "definition": "# Below, an example of a SQL Statement based calculation. Consider a dynamic KPI, with source type = ‘AS’ (analysis services), to infer the ‘Volume In per Resource for Last 7 Days’ for which the > MDX statement (specific language to query cube databases) "
              },
              {
                "topic": "Input parameters#",
                "definition": "# Table: Input parameters example "
              },
              {
                "topic": "Output parameters#",
                "definition": "# Table: Output parameters example "
              },
              {
                "topic": "The MDX statement#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Dynamic KPIs calculated with Rules#",
                "code": "{KPI}{KPIDimension}{<entity instance>}{NgpDataSet}"
              },
              {
                "topic": "Code Example#",
                "code": "UseReference(\"Cmf.Foundation.Common.dll\", \"\");\nUseReference(\"Cmf.Navigo.BusinessObjects.dll\", \"Cmf.Navigo.BusinessObjects\");\n\nDictionary<string, object> Output = new Dictionary<string,object>();\n\nif (Input == null)\n{\n    Input = new Dictionary<string, object>();\n}\n\nif (!Input.ContainsKey(\"KPI\") || Input[\"KPI\"] == null || !(Input[\"KPI\"] is IKPI))\n{\n    throw new ArgumentNullCmfException(\"KPI\");\n}\n\nIKPI kpi = Input[\"KPI\"] as IKPI;\n\nif(kpi.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPI\");\n}\n\nkpi.Load();\n\nif (!Input.ContainsKey(\"KPIDimension\") || Input[\"KPIDimension\"] == null || !(Input[\"KPIDimension\"] is IKPIDimension))\n{\n    throw new ArgumentNullCmfException(\"KPIDimension\");\n}\n\nIKPIDimension kpiDimension = Input[\"KPIDimension\"] as IKPIDimension;\n\nif(kpiDimension.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPIDimension\");\n}\n\nkpiDimension.Load();\n\n// initialize DataTable\nDataTable dataTable = new DataTable(\"DataTableResult\");\n\n// add mandatory structure (columns)\ndataTable.Columns.Add(\"Category\");\ndataTable.Columns.Add(\"EntityName\");\ndataTable.Columns.Add(\"Name\");\ndataTable.Columns.Add(\"Value\");\n\nCollection<IEntity> objects = null;\n\nif (Input.ContainsKey(\"Objects\") && Input[\"Objects\"] != null && Input[\"Objects\"] is Collection<IEntity>)\n{\n    objects = Input[\"Objects\"] as Collection<IEntity>;\n    foreach (IEntity entity in objects)\n    {\n    /*\n    TODO: implement KPI value logic calculation per Entity instance\n    */\n    }\n}\n\nDataSet dataSet = new DataSet(\"DataSetResult\");\ndataSet.Tables.Add(dataTable);\n\n// create output\nOutput.Add(\"Result\", NgpDataSet.FromDataSet(dataSet));\n\n// return output\nreturn Output;"
              },
              {
                "topic": "Predefined Parameters#",
                "code": "EvaluateCalendarForEntity"
              },
              {
                "topic": "Manifests#",
                "code": "/* *//*\n\n@{parameter-name} | {parameter-sql-data-type} | {parameter-net-string-format}\n@Output_{parameter-name}_Column | {parameter-column-name}\n\n*/*@Output{?}_Column*"
              },
              {
                "topic": "The MDX statement#",
                "code": "/*\n\n        @CurrentDay | Date | \"yyyy-MM-dd\"\n        @EntityName | String |\n\n        @Output_NAME_Column | \"[In Process Date].[CalendarDay].[Calendar Day].[MEMBER_CAPTION]\"\n    @Output_VALUE_Column | \"[Measures].[Value]\"\n\n        */\n\n        WITH\n\n        MEMBER [Measures].[Value] AS\n            IIF(ISEMPTY([Measures].[In Process Primary Quantity]) , 0 , [Measures].[In Process Primary Quantity])\n        + IIF(ISEMPTY([Measures].[In Process Sub Materials Primary Quantity]) , 0 ,[Measures].[In Process Sub Materials Primary Quantity])\n\n    MEMBER [Measures].[DisplayValue] AS\n            'Round([Measures].[Value],1)'\n            SELECT\n                { [Measures].[Value] , [Measures].[DisplayValue] } ON COLUMNS, NON EMPTY ([In Process Date].[Calendar Day].ALLMEMBERS) ON ROWS\n            FROM ( SELECT ( { [Resource].[Resource Name].&[@EntityName] } ) ON COLUMNS\n            FROM ( SELECT ( { [Material Hierarchy].[Hierarchy].&[TopMost Material] } ) ON COLUMNS\n            FROM ( SELECT ( [In Process Date].[Calendar Day].&[@CurrentDay].Lag(6) : [In Process Date].[Calendar Day].&[@CurrentDay] ) ON COLUMNS\n            FROM [Material] )))"
              }
            ],
            "links": [
              {
                "topic": "Technical Reference#",
                "links": [
                  {
                    "description": "Technical Reference# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#technical-reference"
                  },
                  {
                    "description": "Technical Reference# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/bicards_kpi_calculation_architecture.png"
                  }
                ]
              },
              {
                "topic": "KPI General Output Data Structure#",
                "links": [
                  {
                    "description": "KPI General Output Data Structure# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#kpi-general-output-data-structure"
                  }
                ]
              },
              {
                "topic": "Static KPIs#",
                "links": [
                  {
                    "description": "Static KPIs# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#static-kpis"
                  }
                ]
              },
              {
                "topic": "Dynamic KPIs#",
                "links": [
                  {
                    "description": "Dynamic KPIs# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis"
                  }
                ]
              },
              {
                "topic": "Dynamic KPIs calculated with Rules#",
                "links": [
                  {
                    "description": "Dynamic KPIs calculated with Rules# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-with-rules"
                  },
                  {
                    "description": "Dynamic KPIs calculated with Rules# (2)",
                    "link": "https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8"
                  }
                ]
              },
              {
                "topic": "Code Example#",
                "links": [
                  {
                    "description": "Code Example# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#code-example"
                  }
                ]
              },
              {
                "topic": "Dynamic KPIs calculated SQL Statements#",
                "links": [
                  {
                    "description": "Dynamic KPIs calculated SQL Statements# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-sql-statements"
                  }
                ]
              },
              {
                "topic": "Predefined Parameters#",
                "links": [
                  {
                    "description": "Predefined Parameters# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#predefined-parameters"
                  }
                ]
              },
              {
                "topic": "Manifests#",
                "links": [
                  {
                    "description": "Manifests# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#manifests"
                  },
                  {
                    "description": "Manifests# (2)",
                    "link": "https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017"
                  },
                  {
                    "description": "Manifests# (3)",
                    "link": "https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef"
                  }
                ]
              },
              {
                "topic": "Example#",
                "links": [
                  {
                    "description": "Example# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#example"
                  }
                ]
              },
              {
                "topic": "Input parameters#",
                "links": [
                  {
                    "description": "Input parameters# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#input-parameters"
                  }
                ]
              },
              {
                "topic": "Output parameters#",
                "links": [
                  {
                    "description": "Output parameters# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#output-parameters"
                  }
                ]
              },
              {
                "topic": "The MDX statement#",
                "links": [
                  {
                    "description": "The MDX statement# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#the-mdx-statement"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Tutorial",
        "definition": [
          {
            "topic": "Tutorial#",
            "definition": "# As an example, the following tutorial will show how to create a new KPI to monitor the number of materials in a step for a given period. We will create 3 dimensions during this exercise: Current Shift; Current Day and Last 7 Days which will represent the number of materials that entered a step (and remained in it) since the specific threshold accordingly. "
          },
          {
            "topic": "New KPI named #Materials In Step#",
            "definition": "# The following picture depicts the details to create the desired dynamic KPI, please notice the selection of the entity type Step, the parameter of type “long” (i.e. this KPI will output numeric, non-floating values), the type “Minimum” (i.e. the smaller the value, the better) and default target thresholds.   "
          },
          {
            "topic": "KPI Dimensions#",
            "definition": "# Below its shown how to create the previously described dimensions. "
          },
          {
            "topic": "Current Day#",
            "definition": "# To create a dimension users need to define the name of the dimension, it’s value type (DataValue means a single value shall be returned) the source (in this case OperationalDataStore), the actual command to run (the SQL statement) and the default visualization (although users can change it when defining BI Cards afterwards).   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "Last 7 Days#",
            "definition": "# This dimension has its own SQL statement and is defined as a DataSeries, i.e. it will output multiple values (in this case the count by day). Also, the default visualization is the bar chart instead of a “data value”.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "Current Shift#",
            "definition": "# This dimension is very similar to the “Current Day”, the main difference is that it will only count the materials that arrived and remained in the step since the start of the shift.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "KPI Timeframes#",
            "definition": "# Timeframes allow the definition of distinct target values depending on the specific step, dimension, and timeframe. In the below example you can see specific targets for the step Mixing and dimension “Current Day”:   Imagine on the next week there will be a peak of production, a power user could set here another timeframe within the next week dates accordingly as shown below:   "
          },
          {
            "topic": "New BI Card#",
            "definition": "# Start by adding a new “BI Card” into a UIPage, then on the settings you can setup the layout and details of the BI Card. "
          },
          {
            "topic": "General Step#",
            "definition": "#   "
          },
          {
            "topic": "Setup Step#",
            "definition": "#   "
          },
          {
            "topic": "Layout Step#",
            "definition": "# Here users can select the KPIs and dimensions they want to see in the BI Card, as well as the chart type and name to show in the header of the chart widget. Note Values shown are actual values returned from the database.   "
          },
          {
            "topic": "BI Card - Duplicate Option#",
            "definition": "# To easy the setup of multiple similar BI Cards for many entities, users can use the “Duplicate” option:   Then users can change the entity name (in this example the step changed from Mixing to Cooling) and in the end you shall have something like the following UI Page which could, for instance, be continuously shown, and automatically refreshed, in a screen monitor in a production line:   "
          },
          {
            "topic": "BI Card on Fullscreen#",
            "definition": "#   "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Tutorial#",
            "links": [
              {
                "description": "Tutorial# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#tutorial"
              }
            ]
          },
          {
            "topic": "New KPI named #Materials In Step#",
            "links": [
              {
                "description": "New KPI named #Materials In Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-kpi-named-materials-in-step"
              },
              {
                "description": "New KPI named #Materials In Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image7.png"
              }
            ]
          },
          {
            "topic": "KPI Dimensions#",
            "links": [
              {
                "description": "KPI Dimensions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-dimensions"
              }
            ]
          },
          {
            "topic": "Current Day#",
            "links": [
              {
                "description": "Current Day# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-day"
              },
              {
                "description": "Current Day# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image8.png"
              }
            ]
          },
          {
            "topic": "Last 7 Days#",
            "links": [
              {
                "description": "Last 7 Days# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#last-7-days"
              },
              {
                "description": "Last 7 Days# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image9.png"
              }
            ]
          },
          {
            "topic": "Current Shift#",
            "links": [
              {
                "description": "Current Shift# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-shift"
              },
              {
                "description": "Current Shift# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image10.png"
              }
            ]
          },
          {
            "topic": "KPI Timeframes#",
            "links": [
              {
                "description": "KPI Timeframes# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-timeframes"
              },
              {
                "description": "KPI Timeframes# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image11.png"
              },
              {
                "description": "KPI Timeframes# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image12.png"
              }
            ]
          },
          {
            "topic": "New BI Card#",
            "links": [
              {
                "description": "New BI Card# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-bi-card"
              }
            ]
          },
          {
            "topic": "General Step#",
            "links": [
              {
                "description": "General Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#general-step"
              },
              {
                "description": "General Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image13.png"
              }
            ]
          },
          {
            "topic": "Setup Step#",
            "links": [
              {
                "description": "Setup Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#setup-step"
              },
              {
                "description": "Setup Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image14.png"
              }
            ]
          },
          {
            "topic": "Layout Step#",
            "links": [
              {
                "description": "Layout Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#layout-step"
              },
              {
                "description": "Layout Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image15.png"
              }
            ]
          },
          {
            "topic": "BI Card - Duplicate Option#",
            "links": [
              {
                "description": "BI Card - Duplicate Option# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-duplicate-option"
              },
              {
                "description": "BI Card - Duplicate Option# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image16.png"
              },
              {
                "description": "BI Card - Duplicate Option# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image17.png"
              }
            ]
          },
          {
            "topic": "BI Card on Fullscreen#",
            "links": [
              {
                "description": "BI Card on Fullscreen# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-on-fullscreen"
              },
              {
                "description": "BI Card on Fullscreen# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image18.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Technical Reference",
        "definition": [
          {
            "topic": "Technical Reference#",
            "definition": "# The KPIs definitions will reside in the MES database as KPI objects. Using the UI Page designer, it will be possible to create widgets that reference the different available KPIs. During runtime, the GUIs will request the application server to retrieve the value of the KPIs. A special service (GetKPIValues) will abstract and implement the logic required to calculate and return the needed KPI values.   Each widget rendering a kpi will issue a request to GetKPIValues, passing it information about the associated Entity Type and about the KPI. The API is then responsible for fetching the data from the configured data source, optionally preparing the required parameters according to the datasource requirements, perform system and user defined calculations on that data and return a result suitable for being rendered in the widget. "
          },
          {
            "topic": "KPI General Output Data Structure#",
            "definition": "# To produce uniform results, the KPI value calculation output result must follow a preestablished column-value data structure convention. This structure applies to both static and dynamic KPIs. Afterwards static and dynamic KPIs extend this data structure by adding additional columns (notice the last line on the following table). Table: KPI General Output Data Structure "
          },
          {
            "topic": "Static KPIs#",
            "definition": "# The output data structure for static KPIs is established from the linked KPI timeframe and is as follows: Table: Static KPIs "
          },
          {
            "topic": "Dynamic KPIs#",
            "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked to a Business Rule and will be written in C#, they can be made of SQL Statements or MDX Statements targeting a given data source. In both cases the output data structure for dynamic KPIs established from the target KPI as well from the execution run-time and/or the resolved KPI timeframe and is as follows: Table: Dynamic KPIs "
          },
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked with a business rule (internally referred as DEE action). The business rule is written in C# and has as input\\output a list of key-value pair parameters as follows: https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8 ⧉ Table: Dynamic KPIs calculated with Rules "
          },
          {
            "topic": "Code Example#",
            "definition": "# An example of a business rule code is listed below: "
          },
          {
            "topic": "Dynamic KPIs calculated SQL Statements#",
            "definition": "# The SQL statements can target the ODS, the DWH and the AS databases. "
          },
          {
            "topic": "Predefined Parameters#",
            "definition": "# The system provides a set predefined parameters that can be used to compose the ODS, the DWH or the AS SQL statements and hence aid in the KPI value calculation. Table: Predefined parameters The target Entity instance Calendar (and respective time zone) is evaluated by calling the business rule EvaluateCalendarForEntity with the result being as follows: Table: Entity instance example "
          },
          {
            "topic": "Manifests#",
            "definition": "# The dynamic KPIs that target the Analytics datastore ( source type = ‘AS’ ) require the SQL statements to have a special header (manifest) in order to properly handle the required input output parameters data and format. The manifest is framed inside a TSQL block comment (/* */) and has the following format: Where the ‘@{?}’ pattern refers to input parameters and the *@Output{?}_Column* pattern refers to output parameters. The manifest token description is as follows: https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017 ⧉ https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef ⧉ Table: Manifests "
          },
          {
            "topic": "Example#",
            "definition": "# Below, an example of a SQL Statement based calculation. Consider a dynamic KPI, with source type = ‘AS’ (analysis services), to infer the ‘Volume In per Resource for Last 7 Days’ for which the > MDX statement (specific language to query cube databases) "
          },
          {
            "topic": "Input parameters#",
            "definition": "# Table: Input parameters example "
          },
          {
            "topic": "Output parameters#",
            "definition": "# Table: Output parameters example "
          },
          {
            "topic": "The MDX statement#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "code": "{KPI}{KPIDimension}{<entity instance>}{NgpDataSet}"
          },
          {
            "topic": "Code Example#",
            "code": "UseReference(\"Cmf.Foundation.Common.dll\", \"\");\nUseReference(\"Cmf.Navigo.BusinessObjects.dll\", \"Cmf.Navigo.BusinessObjects\");\n\nDictionary<string, object> Output = new Dictionary<string,object>();\n\nif (Input == null)\n{\n    Input = new Dictionary<string, object>();\n}\n\nif (!Input.ContainsKey(\"KPI\") || Input[\"KPI\"] == null || !(Input[\"KPI\"] is IKPI))\n{\n    throw new ArgumentNullCmfException(\"KPI\");\n}\n\nIKPI kpi = Input[\"KPI\"] as IKPI;\n\nif(kpi.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPI\");\n}\n\nkpi.Load();\n\nif (!Input.ContainsKey(\"KPIDimension\") || Input[\"KPIDimension\"] == null || !(Input[\"KPIDimension\"] is IKPIDimension))\n{\n    throw new ArgumentNullCmfException(\"KPIDimension\");\n}\n\nIKPIDimension kpiDimension = Input[\"KPIDimension\"] as IKPIDimension;\n\nif(kpiDimension.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPIDimension\");\n}\n\nkpiDimension.Load();\n\n// initialize DataTable\nDataTable dataTable = new DataTable(\"DataTableResult\");\n\n// add mandatory structure (columns)\ndataTable.Columns.Add(\"Category\");\ndataTable.Columns.Add(\"EntityName\");\ndataTable.Columns.Add(\"Name\");\ndataTable.Columns.Add(\"Value\");\n\nCollection<IEntity> objects = null;\n\nif (Input.ContainsKey(\"Objects\") && Input[\"Objects\"] != null && Input[\"Objects\"] is Collection<IEntity>)\n{\n    objects = Input[\"Objects\"] as Collection<IEntity>;\n    foreach (IEntity entity in objects)\n    {\n    /*\n    TODO: implement KPI value logic calculation per Entity instance\n    */\n    }\n}\n\nDataSet dataSet = new DataSet(\"DataSetResult\");\ndataSet.Tables.Add(dataTable);\n\n// create output\nOutput.Add(\"Result\", NgpDataSet.FromDataSet(dataSet));\n\n// return output\nreturn Output;"
          },
          {
            "topic": "Predefined Parameters#",
            "code": "EvaluateCalendarForEntity"
          },
          {
            "topic": "Manifests#",
            "code": "/* *//*\n\n@{parameter-name} | {parameter-sql-data-type} | {parameter-net-string-format}\n@Output_{parameter-name}_Column | {parameter-column-name}\n\n*/*@Output{?}_Column*"
          },
          {
            "topic": "The MDX statement#",
            "code": "/*\n\n        @CurrentDay | Date | \"yyyy-MM-dd\"\n        @EntityName | String |\n\n        @Output_NAME_Column | \"[In Process Date].[CalendarDay].[Calendar Day].[MEMBER_CAPTION]\"\n    @Output_VALUE_Column | \"[Measures].[Value]\"\n\n        */\n\n        WITH\n\n        MEMBER [Measures].[Value] AS\n            IIF(ISEMPTY([Measures].[In Process Primary Quantity]) , 0 , [Measures].[In Process Primary Quantity])\n        + IIF(ISEMPTY([Measures].[In Process Sub Materials Primary Quantity]) , 0 ,[Measures].[In Process Sub Materials Primary Quantity])\n\n    MEMBER [Measures].[DisplayValue] AS\n            'Round([Measures].[Value],1)'\n            SELECT\n                { [Measures].[Value] , [Measures].[DisplayValue] } ON COLUMNS, NON EMPTY ([In Process Date].[Calendar Day].ALLMEMBERS) ON ROWS\n            FROM ( SELECT ( { [Resource].[Resource Name].&[@EntityName] } ) ON COLUMNS\n            FROM ( SELECT ( { [Material Hierarchy].[Hierarchy].&[TopMost Material] } ) ON COLUMNS\n            FROM ( SELECT ( [In Process Date].[Calendar Day].&[@CurrentDay].Lag(6) : [In Process Date].[Calendar Day].&[@CurrentDay] ) ON COLUMNS\n            FROM [Material] )))"
          }
        ],
        "links": [
          {
            "topic": "Technical Reference#",
            "links": [
              {
                "description": "Technical Reference# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#technical-reference"
              },
              {
                "description": "Technical Reference# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/bicards_kpi_calculation_architecture.png"
              }
            ]
          },
          {
            "topic": "KPI General Output Data Structure#",
            "links": [
              {
                "description": "KPI General Output Data Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#kpi-general-output-data-structure"
              }
            ]
          },
          {
            "topic": "Static KPIs#",
            "links": [
              {
                "description": "Static KPIs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#static-kpis"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs#",
            "links": [
              {
                "description": "Dynamic KPIs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "links": [
              {
                "description": "Dynamic KPIs calculated with Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-with-rules"
              },
              {
                "description": "Dynamic KPIs calculated with Rules# (2)",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8"
              }
            ]
          },
          {
            "topic": "Code Example#",
            "links": [
              {
                "description": "Code Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#code-example"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs calculated SQL Statements#",
            "links": [
              {
                "description": "Dynamic KPIs calculated SQL Statements# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-sql-statements"
              }
            ]
          },
          {
            "topic": "Predefined Parameters#",
            "links": [
              {
                "description": "Predefined Parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#predefined-parameters"
              }
            ]
          },
          {
            "topic": "Manifests#",
            "links": [
              {
                "description": "Manifests# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#manifests"
              },
              {
                "description": "Manifests# (2)",
                "link": "https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017"
              },
              {
                "description": "Manifests# (3)",
                "link": "https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef"
              }
            ]
          },
          {
            "topic": "Example#",
            "links": [
              {
                "description": "Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#example"
              }
            ]
          },
          {
            "topic": "Input parameters#",
            "links": [
              {
                "description": "Input parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#input-parameters"
              }
            ]
          },
          {
            "topic": "Output parameters#",
            "links": [
              {
                "description": "Output parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#output-parameters"
              }
            ]
          },
          {
            "topic": "The MDX statement#",
            "links": [
              {
                "description": "The MDX statement# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#the-mdx-statement"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating DEE Actions\n\n\n\n\n\nCreating DEE Actions\n\n\n\n\n\nTable of contents\n\n\n\n\nTest Condition\n\n\n\n\nAction Code\n\n\n\n\nAccessing the Service Provider\n\n\n\n\nAutomatic Execution\n\n\n\n\nManual Execution\n\n\n\n\nCSharp Template\n\n\n\n\nObject creation and editing sequence",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Test Condition",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Action Code",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Accessing the Service Provider",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Automatic Execution",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Manual Execution",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "CSharp Template",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Object creation and editing sequence",
            "definition": [
              {
                "topic": "Creating DEE Actions#",
                "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
              },
              {
                "topic": "Test Condition#",
                "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
              },
              {
                "topic": "Action Code#",
                "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
              },
              {
                "topic": "Accessing the Service Provider#",
                "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
              },
              {
                "topic": "Automatic Execution#",
                "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
              },
              {
                "topic": "Manual Execution#",
                "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
              },
              {
                "topic": "CSharp Template#",
                "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
              },
              {
                "topic": "Object creation and editing sequence#",
                "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Test Condition#",
                "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
              },
              {
                "topic": "Accessing the Service Provider#",
                "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
              },
              {
                "topic": "Automatic Execution#",
                "code": "Rule.RuleOrchestration.CreateRule.Pre"
              },
              {
                "topic": "Manual Execution#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
              },
              {
                "topic": "CSharp Template#",
                "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
              },
              {
                "topic": "Object creation and editing sequence#",
                "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
              }
            ],
            "links": [
              {
                "topic": "Creating DEE Actions#",
                "links": [
                  {
                    "description": "Creating DEE Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
                  },
                  {
                    "description": "Creating DEE Actions# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
                  },
                  {
                    "description": "Creating DEE Actions# (3)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
                  }
                ]
              },
              {
                "topic": "Test Condition#",
                "links": [
                  {
                    "description": "Test Condition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
                  }
                ]
              },
              {
                "topic": "Action Code#",
                "links": [
                  {
                    "description": "Action Code# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
                  },
                  {
                    "description": "Action Code# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
                  }
                ]
              },
              {
                "topic": "Accessing the Service Provider#",
                "links": [
                  {
                    "description": "Accessing the Service Provider# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
                  }
                ]
              },
              {
                "topic": "Automatic Execution#",
                "links": [
                  {
                    "description": "Automatic Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
                  },
                  {
                    "description": "Automatic Execution# (2)",
                    "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
                  }
                ]
              },
              {
                "topic": "Manual Execution#",
                "links": [
                  {
                    "description": "Manual Execution# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
                  }
                ]
              },
              {
                "topic": "CSharp Template#",
                "links": [
                  {
                    "description": "CSharp Template# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
                  }
                ]
              },
              {
                "topic": "Object creation and editing sequence#",
                "links": [
                  {
                    "description": "Object creation and editing sequence# (1)",
                    "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
                  },
                  {
                    "description": "Object creation and editing sequence# (2)",
                    "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Test Condition",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Action Code",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Accessing the Service Provider",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Automatic Execution",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Manual Execution",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "CSharp Template",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Object creation and editing sequence",
        "definition": [
          {
            "topic": "Creating DEE Actions#",
            "definition": "# Dynamic Execution Engine (DEE or DE²) actions are the most powerful mechanisms in what concerns to customization and extensibility within Critical Manufacturing MES. DEE Actions are blocks compiled C# code that are automatically executed in runtime (they can also be executed manually). To create a DEE, follow these steps: Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button. Access the DEE Actions page in the 'Administration' page group and press the New DEE Action button Enter a name for the DEE Action Enter a description for the DEE Action (optional) Enter a classification for the DEE Action (optional) Mark the DEE Action as enabled or disabled. A disabled DEE Action will not be executed neither by the 'Pre' or 'Post' transaction logic Add the DEE Action to as many DEE Action Groups as desired. The DEE Action, if enabled, will be executed automatically as part of the 'Pre' and 'Post' transaction logic Edit the test condition. It must return a boolean value: true means that the action will be executed, whereas false means that the action will not be executed Edit the DEE Action code Press Save. The code will be validated automatically. It can also be explicitly validated at any point by pressing the 'Validate' button.     "
          },
          {
            "topic": "Test Condition#",
            "definition": "# In all DEE Actions, a test condition must be specified. This condition must be written in C# and the return value (true/false) will decide whether or not the action will be executed. Info The return value must be a Boolean Info If no executing condition is applicable then return true to always execute the action "
          },
          {
            "topic": "Action Code#",
            "definition": "# An example of how a DEE action code looks like is shown below   The first part of the code (red box) is a specific syntax to reference the system or external assemblies. The second part (blue box) is the C# code which will be compiled and executed at runtime. The UseReference directive takes two arguments of type string. The first argument is the name of the assembly to include as reference (equivalent to Add Reference in Visual Studio) and the second argument is the namespace within the assembly to be used (equivalent to the using keyword in C#). "
          },
          {
            "topic": "Accessing the Service Provider#",
            "definition": "# When executing any DEE action, the Input object (of type Dictionary) will always have an entry in the test condition and in the action code with a 'ServiceProvider' key that holds the current service provider (of type IServiceProvider). This allows access to the dependency injection container, as shown in the following code sample below: "
          },
          {
            "topic": "Automatic Execution#",
            "definition": "# DEE actions are executed automatically by the system within the context of a service or operation as a 'Pre' or 'Post' transaction logic. To correctly configure an DEE Action to be executed in a 'Pre' or 'Post' transaction logic, it must be associated with at least one Action Group. The Action Group must follow the naming convention Namespace.Operation.Pre/Post Example: Rule.RuleOrchestration.CreateRule.Pre   Info In case multiple DEE Actions exist for the same Action Group, they will be executed in a cascading sequence according to their order (lowest to highest). Be careful of any possible side-effects caused by each executed DEE Action Info When multiple versions of an DEE Action exist, the system will execute only the effective action or (if no effective action is established) the action with the highest version "
          },
          {
            "topic": "Manual Execution#",
            "definition": "# DEE Actions can also be explicitly executed within the orchestration code or even from another DEE Actions, as shown in the following code sample: "
          },
          {
            "topic": "CSharp Template#",
            "definition": "# This simple snippet in csharp can be used as template for a DEE Action: "
          },
          {
            "topic": "Object creation and editing sequence#",
            "definition": "# Starting on version 9.0.0, to create an entity, revision or version and save the properties associated to each one of those levels, always save before creating and follow the diagram below: As an example for object creation in DEE contexts, make sure that the properties for the object are saved before the object itself is created. These changes will be displayed in the History section of the object. For more information, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Test Condition#",
            "code": "// This action will execute if it's not yet 10 o'clock\n\nint actualHour = System.DateTime.UtcNow.Hour;\n\nif (actualHour < 10)\n{\n return true;\n}\nelse\n{\n return false;\n}"
          },
          {
            "topic": "Accessing the Service Provider#",
            "code": "UseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Microsoft.Extensions.DependencyInjection.Abstractions.dll\", \"Microsoft.Extensions.DependencyInjection\");\nUseReference(\"%MicrosoftNetPath%\\\\System.ComponentModel.dll\", \"System\");\nUseReference(\"Cmf.Foundation.Security.dll\", \"Cmf.Foundation.Security.Abstractions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIUser user = ((IServiceProvider)Input[\"ServiceProvider\"]).GetService<IUser>();\nuser.Load(\"ExampleUser\");\noutput[\"Result\"] = user.UserName;\n\nreturn output;"
          },
          {
            "topic": "Automatic Execution#",
            "code": "Rule.RuleOrchestration.CreateRule.Pre"
          },
          {
            "topic": "Manual Execution#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nCmf.Foundation.Common.Abstractions.IAction deeRule = serviceProvider.GetService<Cmf.Foundation.Common.Abstractions.IAction>();\ndeeRule.Load(\"CustomDEEAction\");\n\nList<KeyValuePair<string, object>> parameters = new List<KeyValuePair<string, object>>();\n\nif (this.Material != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Material, this.Material));\n}\n\nif (this.Resource != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Resource, this.Resource));\n}\n\nif (this.Product != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Product, this.Product));\n}\n\nif (this.Step != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Step, this.Step));\n}\n\nif (this.Facility != null)\n{\n parameters.Add(new KeyValuePair<string, object>(Cmf.Navigo.Common.Constants.Facility, this.Facility));\n}\n\nif (!string.IsNullOrEmpty(this.MaterialOperation))\n{\n parameters.Add(new KeyValuePair<string, object>(\"MaterialOperation\", this.MaterialOperation));\n}\n\nif (!string.IsNullOrEmpty(this.ResourceTransition))\n{\n parameters.Add(new KeyValuePair<string, object>(\"ResourceTransition\", this.ResourceTransition));\n}\n\n// execute DEE Action explicitly\nDictionary<string, object> result = deeRule.ExecuteAction(parameters.ToArray());\nif (!result.ContainsKey(\"Result\"))\n{\n throw new MissingOutputParameterCmfException(\n  \"DeeAction\",\n  param.ParameterCalculationFunction,\n  \"Result\");\n}"
          },
          {
            "topic": "CSharp Template#",
            "code": "csharpusing Cmf.Foundation.BusinessObjects;\nusing Cmf.Navigo.BusinessObjects;\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Linq;\n\nnamespace Cmf.Custom.Core.Actions.MaterialActions\n{\n    public class CustomDEEAction : DeeDevBase\n    {\n        /// <summary>\n        /// Dee's the test condition.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return true if is to execute action.\n        /// </returns>\n        public override bool DeeTestCondition(Dictionary<string, object> Input)\n        {\n            //---Start DEE Condition Code---\n\n            /// <summary>\n            /// Summary Text\n            /// Description of DEE Action\n            /// Action Groups:  -\n            ///                 \n            /// </summary>\n            /// <param name=\"Input\">The input.</param>\n            /// <returns>\n            /// Return true if is to execute action.\n            /// </returns>\n\n            return true;\n\n            //---End DEE Condition Code---\n        }\n\n        /// <summary>\n        /// Dee's the action code.\n        /// </summary>\n        /// <param name=\"Input\">The input.</param>\n        /// <returns>\n        /// Return the Input for the next Action.\n        /// </returns>\n        public override Dictionary<string, object> DeeActionCode(Dictionary<string, object> Input)\n        {\n            //---Start DEE Code---\n            UseReference(\"Cmf.Navigo.BusinessObjects.dll\",\"Cmf.Navigo.BusinessObjects\");\n            UseReference(\"Cmf.Foundation.BusinessObjects.dll\",\"Cmf.Foundation.BusinessObjects\");\n\n            Dictionary<String, Object> Output = new Dictionary<string, object>();\n\n            IMaterial material = null;\n\n            if (Input.ContainsKey(\"Material\"))\n            {\n              material = (IMaterial)Input[\"Material\"];\n            }\n            else if (Input.ContainsKey(\"RecipeInstance\"))\n            {\n              material = ((IRecipeInstance)Input[\"RecipeInstance\"]).Material;\n            }\n            else if (Input.ContainsKey(\"DataCollectionInstance\"))\n            {\n              material = ((IDataCollectionInstance)Input[\"DataCollectionInstance\"]).Material;\n            }\n\n            if (material != null)\n            {\n              DateTime now = DateTime.Now;\n              TimeSpan processingTime = now.Subtract(material.TrackInDate ?? now);\n\n              Output.Add(\"Result\", processingTime);\n            }\n            else\n            {\n              throw new ArgumentNullCmfException(\"Material\");\n            }\n\n            //---End DEE Code---\n\n            return Output;\n        }\n    }\n}"
          },
          {
            "topic": "Object creation and editing sequence#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nIProduct prod = serviceProvider.GetService<IProduct>();\n\n// save the properties associated to the revision of an entity before creating a version\n\nprod.Save();\n\nprod.CreateVersion();\nprod.CreateRevision();\nprod.CreateEntity();"
          }
        ],
        "links": [
          {
            "topic": "Creating DEE Actions#",
            "links": [
              {
                "description": "Creating DEE Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#creating-dee-actions"
              },
              {
                "description": "Creating DEE Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/CreateDEE.gif"
              },
              {
                "description": "Creating DEE Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEDialog.png"
              }
            ]
          },
          {
            "topic": "Test Condition#",
            "links": [
              {
                "description": "Test Condition# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#test-condition"
              }
            ]
          },
          {
            "topic": "Action Code#",
            "links": [
              {
                "description": "Action Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#action-code"
              },
              {
                "description": "Action Code# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEActionCode.png"
              }
            ]
          },
          {
            "topic": "Accessing the Service Provider#",
            "links": [
              {
                "description": "Accessing the Service Provider# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#accessing-the-service-provider"
              }
            ]
          },
          {
            "topic": "Automatic Execution#",
            "links": [
              {
                "description": "Automatic Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#automatic-execution"
              },
              {
                "description": "Automatic Execution# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEENamespace.png"
              }
            ]
          },
          {
            "topic": "Manual Execution#",
            "links": [
              {
                "description": "Manual Execution# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#manual-execution"
              }
            ]
          },
          {
            "topic": "CSharp Template#",
            "links": [
              {
                "description": "CSharp Template# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#csharp-template"
              }
            ]
          },
          {
            "topic": "Object creation and editing sequence#",
            "links": [
              {
                "description": "Object creation and editing sequence# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence"
              },
              {
                "description": "Object creation and editing sequence# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createdeeactions/#object-creation-and-editing-sequence",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Orchestration",
        "definition": [
          {
            "topic": "Creating Orchestration#",
            "definition": "# An orchestration consists in all the logic that is executed in a service and that can be reused by other orchestrations "
          },
          {
            "topic": "Coding the Orchestration#",
            "definition": "# An orchestration is also used within services and thus it shares some of the services guidelines, such as: For each orchestration used within a service, input and output objects have to be created and should match the service signature (e.g. 'CreateMaterial' service will have as input 'CreateMaterialInput' and as output 'CreateMaterialOutput') Each orchestration method should have a 'StartMethod' reference at the beginning and an 'EndMethod' reference at the end For each orchestration used within a service, input and output objects have to be created and should match the service signature (e.g. 'CreateMaterial' service will have as input 'CreateMaterialInput' and as output 'CreateMaterialOutput') Each orchestration method should have a 'StartMethod' reference at the beginning and an 'EndMethod' reference at the end The following code sample represents an example of an orchestration method that is used in a service. Warning The ValidateServiceConditions method should always be called so that all the proper validations are performed before the orchestration is called. Also, the objects used within the orchestration should be a copy of the ones coming out of ValidateServiceConditions and not the ones from the input object. Example: "
          },
          {
            "topic": "Deploying the Orchestration#",
            "definition": "# To deploy a new orchestration, follow these steps: Compile the orchestration code into a .NET assembly Copy the assembly file to the path of each host in all Application Servers Compile the orchestration code into a .NET assembly Copy the assembly file to the path of each host in all Application Servers Info The host must be restarted when updating an existing orchestration, otherwise the orchestration is ready to be used "
          }
        ],
        "code": [
          {
            "topic": "Coding the Orchestration#",
            "code": "private readonly IUtilities _utilities;\nprivate readonly ICallContext _callContext;\nprivate readonly IEntityFactory _entityFactory;\n\n// Orchestration class constructor\npublic Orchestration(IUtilities utilities, ICallContext callContext, IEntityFactory entityFactory)\n{\n  this._utilities = utilities;\n  this._callContext = callContext;\n  this._entityFactory = entityFactory;\n}\n\n/// <summary>\n/// Creates a Material instance\n/// </summary>\n/// <param name=\"createMaterialInput\">Input object for CreateMaterial Service</param>\n/// <returns>Output object for CreateMaterial Service</returns>\n/// <exception cref=\"ArgumentNullCmfException\">Is thrown if Material name not specified and no name generator is established</exception>\n/// <exception cref=\"CmfBaseException\">Is thrown an unhandled error occurs</exception>\n\npublic CreateMaterialOutput CreateMaterial(CreateMaterialInput createMaterialInput)\n{\n // call StartMethod\n _utilities.StartMethod(\n  objectTypeName,\n  \"CreateMaterial\",\n  new KeyValuePair<string, object>(\"CreateMaterialInput\", createMaterialInput));\n\n CreateMaterialOutput createMaterialOutput;\n\n // validate if input properties are null excluding the 'SubMaterialContainers' property\n _utilities.ValidateNullInput(createMaterialInput, new List<string>() { \"SubMaterialContainers\" });\n\n createMaterialOutput = new CreateMaterialOutput();\n createMaterialOutput.Material = _entityFactory.Create<IMaterial>();\n\n // add service comments\n _callContext.AddServiceComments(createMaterialInput.ServiceComments);\n\n // create a copy of the Material in the input (initialize Material in the output)\n _utilities.CopyObject(createMaterialInput.Material, createMaterialOutput.Material);\n\n // generate Material name if not already\n if (string.IsNullOrEmpty(createMaterialInput.Material.Name))\n {\n  if (string.IsNullOrEmpty(createMaterialInput.NameGeneratorName))\n  {\n    throw new ArgumentNullCmfException(\"Name\");\n  }\n\n  // generate Material name\n  createMaterialOutput.Material.Name = Cmf.Foundation.BusinessObjects.NameGenerator.GenerateName(\n    createMaterialInput.NameGeneratorName,\n    createMaterialOutput.Material);\n  }\n\n // create Material\n createMaterialOutput.Material.Create(createMaterialInput.OperationAttributes);\n\n // call EndMethod\n _utilities.EndMethod(\n  createMaterialOutput.Material.EntityType.Id,\n  createMaterialOutput.Material.Id,\n  new KeyValuePair<string, object>(\"CreateMaterialOutput\", createMaterialOutput),\n  new KeyValuePair<string, object>(\"CreateMaterialInput\", createMaterialInput));\n\n return createMaterialOutput;\n}ValidateServiceConditionsValidateServiceConditionsupdateMaterialOutput = new UpdateMaterialOutput();\nupdateMaterialOutput.Material = _utilities.ValidateServiceConditions<IMaterial>(\n    updateMaterialInput.ServiceComments,\n    updateMaterialInput.IgnoreLastServiceId,\n    updateMaterialInput.Material);"
          }
        ],
        "links": [
          {
            "topic": "Creating Orchestration#",
            "links": [
              {
                "description": "Creating Orchestration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createorchestration/#creating-orchestration"
              }
            ]
          },
          {
            "topic": "Coding the Orchestration#",
            "links": [
              {
                "description": "Coding the Orchestration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createorchestration/#coding-the-orchestration"
              }
            ]
          },
          {
            "topic": "Deploying the Orchestration#",
            "links": [
              {
                "description": "Deploying the Orchestration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createorchestration/#deploying-the-orchestration"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createorchestration/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Services",
        "definition": [
          {
            "topic": "Creating Services#",
            "definition": "# Services can be created and made available dynamically in Critical Manufacturing system without any downtime and also without having to recompile the application. The Business Tier services comprises three layers: Controller - contains the specification (signature) of the service, including it's URI, HTTP Method and other REST API details Orchestration - the service implementation, that consists in the orchestration of several operations, often involving different objects and object types Operation - the object level methods Controller - contains the specification (signature) of the service, including it's URI, HTTP Method and other REST API details Orchestration - the service implementation, that consists in the orchestration of several operations, often involving different objects and object types Operation - the object level methods "
          },
          {
            "topic": "Guidelines#",
            "definition": "# In order to create a service, there are some guidelines and conventions that must be followed: The service logic must be always implemented in the orchestration The service is only a wrapper of the orchestration For each service, an input and output object must be created Each service should only have one input parameter of type <ServiceName>Input Each service should only have one output parameter of type <ServiceName>Output Each service implementation (method) must call the 'StartMethod' and 'EndMethod' methods at the beginning and at the end The service and orchestration must be collection oriented Input parameters should be as follows, according to the applicable scenario: Collection + one common Parameter Collection + one different Parameter (e.g. dictionary) Collection + one common and one different parameters (above 9.1 + 9.2) Collection + multiple different parameters (e.g. TrackinMaterialInputParameters) Collection + multiple different parameters (e.g. TrackinMaterialInputParameters) When creating new objects, there's no need to create all core services (e.g. 'Create', 'Terminate', 'Load', etc.) because the existing generic services will be used instead. Note that generic services DON'T call any orchestration, instead they call the object operations directly When coding, sometimes you might find necessary to perform the 'SaveOperationAttributes' method before saving the object. When this occurs, there is a guideline that you must follow in order to correctly perform all saving operations:\nCreate a dictionary of type 'Dictionary<{MyObject}, OperationAttributeCollection>'\nAdd to this dictionary all the operation attributes entries to be saved\nAfter calling the object operation (e.g. 'Save') on '{MyObject}', add the following code: Create a dictionary of type 'Dictionary<{MyObject}, OperationAttributeCollection>' Add to this dictionary all the operation attributes entries to be saved After calling the object operation (e.g. 'Save') on '{MyObject}', add the following code: The service logic must be always implemented in the orchestration The service is only a wrapper of the orchestration For each service, an input and output object must be created Each service should only have one input parameter of type <ServiceName>Input Each service should only have one output parameter of type <ServiceName>Output Each service implementation (method) must call the 'StartMethod' and 'EndMethod' methods at the beginning and at the end The service and orchestration must be collection oriented Input parameters should be as follows, according to the applicable scenario: Collection + one common Parameter Collection + one different Parameter (e.g. dictionary) Collection + one common and one different parameters (above 9.1 + 9.2) Collection + multiple different parameters (e.g. TrackinMaterialInputParameters) Collection + multiple different parameters (e.g. TrackinMaterialInputParameters) When creating new objects, there's no need to create all core services (e.g. 'Create', 'Terminate', 'Load', etc.) because the existing generic services will be used instead. Note that generic services DON'T call any orchestration, instead they call the object operations directly When coding, sometimes you might find necessary to perform the 'SaveOperationAttributes' method before saving the object. When this occurs, there is a guideline that you must follow in order to correctly perform all saving operations:\nCreate a dictionary of type 'Dictionary<{MyObject}, OperationAttributeCollection>'\nAdd to this dictionary all the operation attributes entries to be saved\nAfter calling the object operation (e.g. 'Save') on '{MyObject}', add the following code: Create a dictionary of type 'Dictionary<{MyObject}, OperationAttributeCollection>' Add to this dictionary all the operation attributes entries to be saved After calling the object operation (e.g. 'Save') on '{MyObject}', add the following code: Create a dictionary of type 'Dictionary<{MyObject}, OperationAttributeCollection>' Add to this dictionary all the operation attributes entries to be saved After calling the object operation (e.g. 'Save') on '{MyObject}', add the following code: "
          },
          {
            "topic": "Coding the Service#",
            "definition": "# Below lies an example of a guideline compliant service implementation (e.g. CreateMaterial): "
          },
          {
            "topic": "CreateMaterialInput object (service input)#",
            "definition": "# "
          },
          {
            "topic": "CreateMaterialOutput object (service output)#",
            "definition": "# "
          },
          {
            "topic": "MaterialManagement Orchestration Interface#",
            "definition": "# "
          },
          {
            "topic": "MaterialManagement Orchestration (services orchestration)#",
            "definition": "# Warning The orchestration class must be registered in a StartupModule as providing the orchestration interface. Example: "
          },
          {
            "topic": "MaterialManagement (services implementation)#",
            "definition": "# Then you create the controller file. The controller should be created in a separated assemblies. While the input, output and orchestration classes are usually on the same assembly, the controller is located in a separate assembly. This will helps you identify issues while loading new services. "
          },
          {
            "topic": "Deploying the Service#",
            "definition": "# To make the service available, you just need to compile the code and copy the assembly into the host directory. The host will pick-up on the assemblies automatically. Not further deployment steps are required. Info New service assemblies (and external references) must be copied to all the application hosts. "
          }
        ],
        "code": [
          {
            "topic": "Guidelines#",
            "code": "<ServiceName>Input<ServiceName>OutputParallel.ForEach({MyObject}, element =>\n{\n element.Key.SaveOperationAttributes(element.Value, \"Save\");\n});"
          },
          {
            "topic": "CreateMaterialInput object (service input)#",
            "code": "namespace Cmf.Navigo.BusinessOrchestration.MaterialManagement.InputObjects\n{\n /// <summary>\n /// Input object for CreateMaterial service\n /// </summary>\n [DataContract(Namespace=\"\", IsReference = true, Name = \"CreateMaterialInput\")]\n public class CreateMaterialInput : BaseInput\n {\n  /// <summary>\n  /// The Material object to be created\n  /// </summary>\n  [DataMember(Name = \"Material\", Order = 0)]\n  public IMaterial Material { get; set; }\n\n  /// <summary>\n  /// The name generator name to use if Material does not have a established name\n  /// </summary>\n  [DataMember(Name = \"NameGeneratorName\", Order = 0)]\n  public string NameGeneratorName { get; set; }\n }\n}"
          },
          {
            "topic": "CreateMaterialOutput object (service output)#",
            "code": "namespace Cmf.Navigo.BusinessOrchestration.MaterialManagement.OutputObjects\n{\n /// <summary>\n /// Output object for CreateMaterial service\n /// </summary>\n [DataContract(Namespace=\"\", IsReference = true, Name = \"CreateMaterialOutput\")]\n public class CreateMaterialOutput : BaseOutput\n {\n  /// <summary>\n  /// The created Material object\n  /// </summary>\n  [DataMember(Name = \"Material\", Order = 0)]\n  public IMaterial Material{ get; set; }\n }\n}"
          },
          {
            "topic": "MaterialManagement Orchestration Interface#",
            "code": "namespace Cmf.Navigo.BusinessOrchestration.Abstractions\n{\n    /// <summary>\n    /// Material Management Services orchestration interface\n    /// </summary>\n    public interface IMaterialManagementOrchestration\n    {\n      /// <summary>\n      /// Creates a Material instance\n      /// </summary>\n      /// <param name=\"createMaterialInput\">Input object for CreateMaterial Service</param>\n      /// <returns>Output object for CreateMaterial Service</returns>\n      /// <exception cref=\"ArgumentNullCmfException\">Is thrown if Material name not specified and no name generator is established</exception>\n      /// <exception cref=\"CmfBaseException\">Is thrown an unhandled error occurs</exception>\n      CreateMaterialOutput CreateMaterial(CreateMaterialInput createMaterialInput);\n    }\n}"
          },
          {
            "topic": "MaterialManagement Orchestration (services orchestration)#",
            "code": "namespace Cmf.Navigo.BusinessOrchestration.MaterialManagement\n{\n    /// <summary>\n    /// Material Management Services orchestration\n    /// </summary>\n    public partial class MaterialManagementOrchestration: IMaterialManagementOrchestration\n    {\n      private readonly IUtilities _utilities;\n      private readonly ICallContext _callContext;\n      private readonly IEntityFactory _entityFactory;\n\n      // Orchestration class constructor\n      public MaterialManagementOrchestration(IUtilities utilities, ICallContext callContext, IEntityFactory entityFactory)\n      {\n        this._utilities = utilities;\n        this._callContext = callContext;\n        this._entityFactory = entityFactory;\n      }\n\n      /// <summary>\n      /// Creates a Material instance\n      /// </summary>\n      /// <param name=\"createMaterialInput\">Input object for CreateMaterial Service</param>\n      /// <returns>Output object for CreateMaterial Service</returns>\n      /// <exception cref=\"ArgumentNullCmfException\">Is thrown if Material name not specified and no name generator is established</exception>\n      /// <exception cref=\"CmfBaseException\">Is thrown an unhandled error occurs</exception>\n\n      public CreateMaterialOutput CreateMaterial(CreateMaterialInput createMaterialInput)\n      {\n       // call StartMethod\n       _utilities.StartMethod(\n        objectTypeName,\n        \"CreateMaterial\",\n        new KeyValuePair<string, object>(\"CreateMaterialInput\", createMaterialInput));\n\n       CreateMaterialOutput createMaterialOutput;\n\n\n      // validate if input properties are null excluding the 'SubMaterialContainers' property\n      _utilities.ValidateNullInput(createMaterialInput, new List<string>() { \"SubMaterialContainers\" });\n\n      createMaterialOutput = new CreateMaterialOutput();\n      createMaterialOutput.Material = _entityFactory.Create<IMaterial>();\n\n      // add service comments\n      _callContext.AddServiceComments(createMaterialInput.ServiceComments);\n\n      // create a copy of the Material in the input (initialize Material in the output)\n      _utilities.CopyObject(createMaterialInput.Material, createMaterialOutput.Material);\n\n      // generate Material name if not already\n      if (string.IsNullOrEmpty(createMaterialInput.Material.Name))\n      {\n        if (string.IsNullOrEmpty(createMaterialInput.NameGeneratorName))\n        {\n          throw new ArgumentNullCmfException(\"Name\");\n        }\n\n        // generate Material name\n        createMaterialOutput.Material.Name = Cmf.Foundation.BusinessObjects.NameGenerator.GenerateName(\n        createMaterialInput.NameGeneratorName,\n        createMaterialOutput.Material);\n      }\n\n      // create Material\n      createMaterialOutput.Material.Create(createMaterialInput.OperationAttributes);\n\n      // call EndMethod\n      _utilities.EndMethod(\n        createMaterialOutput.Material.EntityType.Id,\n        createMaterialOutput.Material.Id,\n        new KeyValuePair<string, object>(\"CreateMaterialOutput\", createMaterialOutput),\n        new KeyValuePair<string, object>(\"CreateMaterialInput\", createMaterialInput));\n\n      return createMaterialOutput;\n    }\n  }\n}namespace Cmf.Navigo.BusinessOrchestration\n{\n    /// <inheritdoc/>\n    public class BusinessOrchestrationStartupModule : IStartupModule\n    {\n        /// <inheritdoc/>\n        public MiddlewarePositioning MiddlewarePositioning => MiddlewarePositioning.None;\n\n        /// <inheritdoc/>\n        public int ServiceRegistrationOrder => 0;\n\n        /// <inheritdoc/>\n        public void Configure(IApplicationBuilder app, ConfigureMiddlewareContext context){}\n\n        /// <inheritdoc/>\n        public void ConfigureRootServices(IServiceCollection services){}\n\n        /// <inheritdoc/>\n        public void ConfigureServices(IServiceCollection services, ConfigureServicesContext context)\n        {\n            // ... other orchestration services ...\n            ....\n\n            // MaterialManagementOrchestration\n            services.AddTransient<IMaterialManagementOrchestration, MaterialManagementOrchestration>();\n        }\n    }\n}"
          },
          {
            "topic": "MaterialManagement (services implementation)#",
            "code": "namespace Cmf.Navigo.Services.MaterialManagement\n{\n    /// <summary>\n    /// Material Management Controller\n    /// </summary>\n    [ApiController]\n    [Route(\"api/[controller]/[action]\")]\n    [CmfContractModule(Name = \"MES\")]\n    public class MaterialController : ControllerBase\n    {\n      private readonly IUtilities _utilities;\n      private readonly IMaterialManagementOrchestration _materialOrchestration;\n\n      // Controller class constructor\n      public MaterialController(IUtilities utilities, IMaterialManagementOrchestration materialOrchestration)\n      {\n        this._utilities = utilities;\n        this._materialOrchestration = materialOrchestration;\n      }\n\n      /// <summary>\n      /// <summary>\n      /// Create a material instance\n      /// </summary>\n      /// <param name=\"createMaterialInput\">Input material with data to create a new instance</param>\n      /// <returns>output parameter containing the new material data</returns>\n      [HttpPost]\n      public CreateMaterialOutput CreateMaterial(CreateMaterialInput createMaterialInput)\n      {\n        _utilities.StartMethod(objectTypeName, \"CreateMaterial\", new KeyValuePair<String, Object>(\"CreateMaterialInput\", createMaterialInput));\n        reateMaterialOutput createMaterialOutput = null;\n\n        //Material material, OperationAttributeCollection operationAttributeCollection\n        createMaterialOutput = _materialOrchestration.CreateMaterial(createMaterialInput);\n\n        _utilities.EndMethod(createMaterialInput.Material.EntityType.Id, createMaterialOutput.Material.Id,\n          new KeyValuePair<String, Object>(\"CreateMaterialInput\", createMaterialInput),\n          new KeyValuePair<String, Object>(\"CreateMaterialOutput\", createMaterialOutput));\n\n        return createMaterialOutput;\n      }\n  ...\n    }\n}"
          }
        ],
        "links": [
          {
            "topic": "Creating Services#",
            "links": [
              {
                "description": "Creating Services# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#creating-services"
              }
            ]
          },
          {
            "topic": "Guidelines#",
            "links": [
              {
                "description": "Guidelines# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#guidelines"
              }
            ]
          },
          {
            "topic": "Coding the Service#",
            "links": [
              {
                "description": "Coding the Service# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#coding-the-service"
              }
            ]
          },
          {
            "topic": "CreateMaterialInput object (service input)#",
            "links": [
              {
                "description": "CreateMaterialInput object (service input)# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#creatematerialinput-object-service-input"
              }
            ]
          },
          {
            "topic": "CreateMaterialOutput object (service output)#",
            "links": [
              {
                "description": "CreateMaterialOutput object (service output)# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#creatematerialoutput-object-service-output"
              }
            ]
          },
          {
            "topic": "MaterialManagement Orchestration Interface#",
            "links": [
              {
                "description": "MaterialManagement Orchestration Interface# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#materialmanagement-orchestration-interface"
              }
            ]
          },
          {
            "topic": "MaterialManagement Orchestration (services orchestration)#",
            "links": [
              {
                "description": "MaterialManagement Orchestration (services orchestration)# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#materialmanagement-orchestration-services-orchestration"
              }
            ]
          },
          {
            "topic": "MaterialManagement (services implementation)#",
            "links": [
              {
                "description": "MaterialManagement (services implementation)# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#materialmanagement-services-implementation"
              }
            ]
          },
          {
            "topic": "Deploying the Service#",
            "links": [
              {
                "description": "Deploying the Service# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createservices/#deploying-the-service"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createservices/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Static Actions",
        "definition": [
          {
            "topic": "Creating Static Actions#",
            "definition": "# The MES host provides a functionality that allows the injection of DEEs via a DLL when the host starts. These DEEs are known internally as \"Static Actions\". Follow these steps to inject a static action when the host starts: Create a new C# project in Visual Studio. This Visual Studio project will generate a new assembly which will be your static action. This project can contain one or more classes and each class must implement the following interfaces: Cmf.Foundation.Common.DynamicExecutionEngine.IActionValidation Cmf.Foundation.Common.DynamicExecutionEngine.IRuleEvaluator Below, an example of a C# project named MyCode that provides a static action HelloWorldStaticAction: Your project structure should look like this: Create a second C# project in Visual Studio, with the following two classes: A class that implements the interface Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.IStaticDeeDataActionsProvider.\n\nThis class must implement the GetRegisteredDees method that should a list of Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticAction objects for each of the static actions that the assembly should load.\nEach StaticAction object must have the following properties filled:\nAssemblyPath - A string representing the path of the DLL that was generated in the first C# project\nType - A string containing the full name of the type that implements the static action\nActionGroups - A list of strings containing the list of action groups that should trigger the static action\n\nSee the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example: This class must implement the GetRegisteredDees method that should a list of Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticAction objects for each of the static actions that the assembly should load. Each StaticAction object must have the following properties filled:\nAssemblyPath - A string representing the path of the DLL that was generated in the first C# project\nType - A string containing the full name of the type that implements the static action\nActionGroups - A list of strings containing the list of action groups that should trigger the static action AssemblyPath - A string representing the path of the DLL that was generated in the first C# project Type - A string containing the full name of the type that implements the static action ActionGroups - A list of strings containing the list of action groups that should trigger the static action See the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example: A class that implements the Cmf.Foundation.Services.HostStartup.IStartupModule interface\n\nThis class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below: This class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below: This second project should have a structure similar to this: Place the DLLs generated from both projects in the BusinessTier folder where the MES host is running. Using the example code shown in the screenshot, you can confirm if the static action is correctly registered in the MES host by starting the MES host in the command line (so you can see the output of the Console.WriteLine statements) and adding a row to any Smart Table. You should see the following output: Create a new C# project in Visual Studio. This Visual Studio project will generate a new assembly which will be your static action. This project can contain one or more classes and each class must implement the following interfaces: Cmf.Foundation.Common.DynamicExecutionEngine.IActionValidation Cmf.Foundation.Common.DynamicExecutionEngine.IRuleEvaluator Below, an example of a C# project named MyCode that provides a static action HelloWorldStaticAction: Below, an example of a C# project named MyCode that provides a static action HelloWorldStaticAction:   Your project structure should look like this: Your project structure should look like this:   Create a second C# project in Visual Studio, with the following two classes: Create a second C# project in Visual Studio, with the following two classes: A class that implements the interface Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.IStaticDeeDataActionsProvider.\n\nThis class must implement the GetRegisteredDees method that should a list of Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticAction objects for each of the static actions that the assembly should load.\nEach StaticAction object must have the following properties filled:\nAssemblyPath - A string representing the path of the DLL that was generated in the first C# project\nType - A string containing the full name of the type that implements the static action\nActionGroups - A list of strings containing the list of action groups that should trigger the static action\n\nSee the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example: A class that implements the interface Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.IStaticDeeDataActionsProvider. This class must implement the GetRegisteredDees method that should a list of Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticAction objects for each of the static actions that the assembly should load. Each StaticAction object must have the following properties filled:\nAssemblyPath - A string representing the path of the DLL that was generated in the first C# project\nType - A string containing the full name of the type that implements the static action\nActionGroups - A list of strings containing the list of action groups that should trigger the static action AssemblyPath - A string representing the path of the DLL that was generated in the first C# project Type - A string containing the full name of the type that implements the static action ActionGroups - A list of strings containing the list of action groups that should trigger the static action See the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example: This class must implement the GetRegisteredDees method that should a list of Cmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticAction objects for each of the static actions that the assembly should load. Each StaticAction object must have the following properties filled:\nAssemblyPath - A string representing the path of the DLL that was generated in the first C# project\nType - A string containing the full name of the type that implements the static action\nActionGroups - A list of strings containing the list of action groups that should trigger the static action AssemblyPath - A string representing the path of the DLL that was generated in the first C# project Type - A string containing the full name of the type that implements the static action ActionGroups - A list of strings containing the list of action groups that should trigger the static action AssemblyPath - A string representing the path of the DLL that was generated in the first C# project Type - A string containing the full name of the type that implements the static action ActionGroups - A list of strings containing the list of action groups that should trigger the static action See the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example: See the following example for a class that registers a StaticAction based on the HelloWorldStaticAction that was previously given as an example:   A class that implements the Cmf.Foundation.Services.HostStartup.IStartupModule interface\n\nThis class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below: A class that implements the Cmf.Foundation.Services.HostStartup.IStartupModule interface This class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below: This class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below: This class should configure the services object so that when the host requests objects with the IStaticDeeDataActionsProvider interface, the previously created class is returned. Example below:   This second project should have a structure similar to this: This second project should have a structure similar to this:   Place the DLLs generated from both projects in the BusinessTier folder where the MES host is running. Place the DLLs generated from both projects in the BusinessTier folder where the MES host is running. Using the example code shown in the screenshot, you can confirm if the static action is correctly registered in the MES host by starting the MES host in the command line (so you can see the output of the Console.WriteLine statements) and adding a row to any Smart Table. You should see the following output: Using the example code shown in the screenshot, you can confirm if the static action is correctly registered in the MES host by starting the MES host in the command line (so you can see the output of the Console.WriteLine statements) and adding a row to any Smart Table. You should see the following output:   For more information on DEEs, please consult the section in the User Guide regarding DEE Actions ⧉. DEE Actions ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Creating Static Actions#",
            "code": "Cmf.Foundation.Common.DynamicExecutionEngine.IActionValidationCmf.Foundation.Common.DynamicExecutionEngine.IRuleEvaluatorMyCodeHelloWorldStaticActionCmf.Foundation.Common.DynamicExecutionEngine.StaticAction.IStaticDeeDataActionsProviderGetRegisteredDeesCmf.Foundation.Common.DynamicExecutionEngine.StaticAction.StaticActionStaticActionStaticActionHelloWorldStaticActionCmf.Foundation.Services.HostStartup.IStartupModuleIStaticDeeDataActionsProviderBusinessTierConsole.WriteLine"
          }
        ],
        "links": [
          {
            "topic": "Creating Static Actions#",
            "links": [
              {
                "description": "Creating Static Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createstaticactions/#creating-static-actions"
              },
              {
                "description": "Creating Static Actions# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_01.png"
              },
              {
                "description": "Creating Static Actions# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_02.png"
              },
              {
                "description": "Creating Static Actions# (4)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_03.png"
              },
              {
                "description": "Creating Static Actions# (5)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_04.png"
              },
              {
                "description": "Creating Static Actions# (6)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_05.png"
              },
              {
                "description": "Creating Static Actions# (7)",
                "link": "https://developer.criticalmanufacturing.com/business/images/StaticActions_06.png"
              },
              {
                "description": "Creating Static Actions# (8)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/dee_actions/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createstaticactions/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Tables",
        "definition": [
          {
            "topic": "Creating Tables#",
            "definition": "# There are three types of tables in the system which can be used to extend and customize the application: Generic Tables - general purpose tables each one having its own database table Lookup Tables - general purpose simple value-description pairs stored in a single database table Smart Tables - general purpose context resolution tables each one having its own database table Generic Tables - general purpose tables each one having its own database table Lookup Tables - general purpose simple value-description pairs stored in a single database table Smart Tables - general purpose context resolution tables each one having its own database table For more information, please consult the section in the User Guide regarding Tables ⧉. Tables ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Creating Tables#",
            "links": [
              {
                "description": "Creating Tables# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/createtables/#creating-tables"
              },
              {
                "description": "Creating Tables# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/tables/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/createtables/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Custom Entity Types",
        "definition": [
          {
            "topic": "Creating Custom Entity Types#",
            "definition": "# Custom Entity Types can be added to the system by establishing their metadata. This can be done using the 'Entity Types' GUI in the 'Administration' page group. For each Entity Type, the system will generate a new assembly (.dll) containing the respective C# object and will also create all the necessary tables in the database to handle the persistency of the generated Entity Type, including attributes and history. The generic Entity Type object model, for which there is a corresponding database schema, using the 'Rule' system Entity Type as example is shown in the next picture.   For more information, please consult the section in the User Guide regarding Entity Types ⧉, including information on entity type properties, attributes and operations as well as access level information. Entity Types ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Creating Custom Entity Types#",
            "links": [
              {
                "description": "Creating Custom Entity Types# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customentitytypes/#creating-custom-entity-types"
              },
              {
                "description": "Creating Custom Entity Types# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DataModel.png"
              },
              {
                "description": "Creating Custom Entity Types# (3)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/entity_types/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/customentitytypes/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Custom Dispatch Sort Rules",
        "definition": [
          {
            "topic": "Creating Custom Dispatch Sort Rules#",
            "definition": "# Custom dispatch Sort Rules provide a way of hooking custom logic on the dispatching sorting mechanism by using DEE Actions. It enables, for example, sorting the set of Materials that show up in a Resource's dispatch list based on a Material attribute or any other business logic that can be expressed in a sortable value. To properly understand the details that follow, it is highly recommended that the reader is familiar with the 'Rule' business object (specially the Material and Resource scopes) and with the 'Sort Rule Set' business object. "
          },
          {
            "topic": "Creating a DEE Action for Sort Rules#",
            "definition": "# In order to create a DEE Action that can be used in a Sort Rule, the following interface specification must be followed: If 'Rule' scope is 'ResourceMaterialSort', the 'Input' object (type Dictionary) must contain an entry with key 'Material' and with the value set to an instantiated Material object If 'Rule' scope is 'StepMaterialSort', the 'Input' object (type Dictionary) must contain an entry with key 'Resource' and with the value set to an instantiated Resource object The return (type Dictionary) must contain an entry with key 'Result' and with the value set to the sorting criteria If 'Rule' scope is 'ResourceMaterialSort', the 'Input' object (type Dictionary) must contain an entry with key 'Material' and with the value set to an instantiated Material object If 'Rule' scope is 'StepMaterialSort', the 'Input' object (type Dictionary) must contain an entry with key 'Resource' and with the value set to an instantiated Resource object The return (type Dictionary) must contain an entry with key 'Result' and with the value set to the sorting criteria The following code is an example of a DEE Action that can be used in a Sort Rule with the scope Material: "
          },
          {
            "topic": "Using the DEE Action in a Sort Rule Set#",
            "definition": "# To make use of a DEE Action built for dispatching purposes, you can must add it to a 'Rule' business object: Create a 'Rule' and define its scope as 'StepMaterialSort' or 'ResourceMaterialSort' and select the DEE Action which has been previously created Create a 'Sort Rule Set' and add the above 'Rule'\n\nInfo\n\nIt is possible to combine multiple 'Rules' in a single 'Sort Rule Set', whether they are system (provided by default) or custom defined. When dispatching lists are resolved, the system will sort Materials or Resources according to the order and sorting direction that is defined for each 'Rule' in the 'Sort Rule Set', regardless of how the 'Rule' result was calculated. The 'Rules' of higher order will only apply to Materials or Resources which were not resolved in the previous order’s 'Rule' (e.g. when more than one object resolved the same value). This means that it performs a subsequent ordering of the elements, preserving those already ordered Configure the 'Sort Rule Set' in a 'Resource' or 'Step'. When a dispatch list is generated, each one of the listed 'Materials' or 'Resources' (depending on the dispatching perspective) will be provided as the input for the execution of the 'Sort Rule Set Rules'. Each 'Rule' will compute a sortable value Create a 'Rule' and define its scope as 'StepMaterialSort' or 'ResourceMaterialSort' and select the DEE Action which has been previously created Create a 'Rule' and define its scope as 'StepMaterialSort' or 'ResourceMaterialSort' and select the DEE Action which has been previously created Create a 'Sort Rule Set' and add the above 'Rule'\n\nInfo\n\nIt is possible to combine multiple 'Rules' in a single 'Sort Rule Set', whether they are system (provided by default) or custom defined. When dispatching lists are resolved, the system will sort Materials or Resources according to the order and sorting direction that is defined for each 'Rule' in the 'Sort Rule Set', regardless of how the 'Rule' result was calculated. The 'Rules' of higher order will only apply to Materials or Resources which were not resolved in the previous order’s 'Rule' (e.g. when more than one object resolved the same value). This means that it performs a subsequent ordering of the elements, preserving those already ordered Create a 'Sort Rule Set' and add the above 'Rule' Info It is possible to combine multiple 'Rules' in a single 'Sort Rule Set', whether they are system (provided by default) or custom defined. When dispatching lists are resolved, the system will sort Materials or Resources according to the order and sorting direction that is defined for each 'Rule' in the 'Sort Rule Set', regardless of how the 'Rule' result was calculated. The 'Rules' of higher order will only apply to Materials or Resources which were not resolved in the previous order’s 'Rule' (e.g. when more than one object resolved the same value). This means that it performs a subsequent ordering of the elements, preserving those already ordered Configure the 'Sort Rule Set' in a 'Resource' or 'Step'. When a dispatch list is generated, each one of the listed 'Materials' or 'Resources' (depending on the dispatching perspective) will be provided as the input for the execution of the 'Sort Rule Set Rules'. Each 'Rule' will compute a sortable value Configure the 'Sort Rule Set' in a 'Resource' or 'Step'. When a dispatch list is generated, each one of the listed 'Materials' or 'Resources' (depending on the dispatching perspective) will be provided as the input for the execution of the 'Sort Rule Set Rules'. Each 'Rule' will compute a sortable value "
          }
        ],
        "code": [
          {
            "topic": "Creating a DEE Action for Sort Rules#",
            "code": "UseReference(\"\", \"Cmf.Foundation.Common\");\nUseReference(\"\", \"Cmf.Foundation.Common.Exceptions\");\nUseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Navigo.BusinessObjects.dll\", \"Cmf.Navigo.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\n\nstring attributeName = \"MySortingAttribute\";\n\nif (!Input.ContainsKey(\"Material\") || !(Input[\"Material\"] is IMaterial))\n{\n throw new ArgumentNullException(\"Material\");\n}\n\nDictionary<string, object> output = new Dictionary<string, object>();\nIMaterial material = (IMaterial)Input[\"Material\"];\nmaterial.LoadAttributes(new System.Collections.ObjectModel.Collection<string>() { attributeName });\n\nif (material.Attributes.ContainsKey(attributeName))\n{\n output[\"Result\"] = material.Attributes[attributeName];\n}\nelse\n{\n output[\"Result\"] = string.Empty;\n}\n\nreturn output;"
          }
        ],
        "links": [
          {
            "topic": "Creating Custom Dispatch Sort Rules#",
            "links": [
              {
                "description": "Creating Custom Dispatch Sort Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customsortrules/#creating-custom-dispatch-sort-rules"
              }
            ]
          },
          {
            "topic": "Creating a DEE Action for Sort Rules#",
            "links": [
              {
                "description": "Creating a DEE Action for Sort Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customsortrules/#creating-a-dee-action-for-sort-rules"
              }
            ]
          },
          {
            "topic": "Using the DEE Action in a Sort Rule Set#",
            "links": [
              {
                "description": "Using the DEE Action in a Sort Rule Set# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customsortrules/#using-the-dee-action-in-a-sort-rule-set"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/customsortrules/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Custom SPC Rules",
        "definition": [
          {
            "topic": "Creating Custom SPC Rules#",
            "definition": "# Custom SPC Rules can be added to Charts in order to detect and react to problematic pattern conditions that may not be captured by using the system SPC Rules already provided by the system. To properly understand the details that follow, it is highly recommended that the reader is familiar with the 'Rule' business object (specially the 'SPC' scopes) and with the 'Chart' business object. "
          },
          {
            "topic": "Creating a DEE Action for SPC Rules#",
            "definition": "# must contain an entry with key 'Material' and with the value set to an instantiated Material object In order to create a DEE Action for SPC Rules, the following interface specification must be followed: The 'Input' object (type Dictionary) must contain an entry with key 'ChartDataPoint' and with the value set to an instantiated ChartDataPoint object The return (type Dictionary) must contain an entry with key 'Result' and with the value set to a boolean defining if the rule was violated or not The 'Input' object (type Dictionary) must contain an entry with key 'ChartDataPoint' and with the value set to an instantiated ChartDataPoint object The return (type Dictionary) must contain an entry with key 'Result' and with the value set to a boolean defining if the rule was violated or not The following code is an example of a DEE Action that can be used within a 'Rule' with scope 'SPC'. It calculates whether 2 out of 2 points are out of spec: "
          },
          {
            "topic": "Using the DEE Action in a SPC Chart#",
            "definition": "# To make use of a DEE Action built for SPC purposes in a Chart, follow these steps: Create a 'Rule' with the scope 'SPC' and select the target DEE Action Create a 'Chart' and add the above 'Rule' a 'Chart Rule' Post two 'Chart' data points out of the 'Chart' specification limits and check if a violation was opened for the second 'Chart' data point Create a 'Rule' with the scope 'SPC' and select the target DEE Action Create a 'Chart' and add the above 'Rule' a 'Chart Rule' Post two 'Chart' data points out of the 'Chart' specification limits and check if a violation was opened for the second 'Chart' data point "
          }
        ],
        "code": [
          {
            "topic": "Creating a DEE Action for SPC Rules#",
            "code": "UseReference(\"Cmf.Navigo.BusinessObjects.dll\", \"Cmf.Navigo.BusinessObjects\");\nUseReference(\"Cmf.Foundation.Common.dll\", \"Cmf.Foundation.Common.Exceptions\");\n\nDictionary<string, object> output = new Dictionary<string, object>();\n\nIChartDataPoint chartDataPoint = (IChartDataPoint)Input[\"ChartDataPoint\"];\n\nBoolean isRuleViolated = false;\n\nList<string> missingProperties = new List<string>();\n\nif (chartDataPoint == null)\n{\n missingProperties.Add(\"ChartDataPoint\");\n}\nif (chartDataPoint.Value1 == null)\n{\n missingProperties.Add(\"ChartDataPointValue\");\n}\nif (chartDataPoint.CenterLine1 == null)\n{\n missingProperties.Add(\"ChartDataPointCenterLine1\");\n}\nif (missingProperties.Count > 0)\n{\n throw new MissingMandatoryPropertyCmfException(missingProperties.ToArray(), \"MySPCCustomRule\", true);\n}\n\n// 2 of 2 points out of spec\nDecimal upperSpec = chartDataPoint.LogicalChart.UpperSpecLimit ?? decimal.MaxValue;\nDecimal lowerSpec = chartDataPoint.LogicalChart.LowerSpecLimit ?? decimal.MinValue;\n\nif ((chartDataPoint.Value1 ?? 0) > upperSpec || (chartDataPoint.Value1 ?? 0) < lowerSpec)\n{\n IChartDataPointCollection  dps = LogicalChart.GetLogicalChartDatapoints(chartDataPoint, 1);\n Boolean checkAbove = (chartDataPoint.Value1 ?? 0) > (chartDataPoint.UpperSpecLimit ?? decimal.MaxValue);\n\n if (dps.Count > 0)\n {\n  Int32 countOutOfSpec = 1;\n\n  foreach (var dp in dps)\n  {\n   if (((dp.Value1 ?? 0) > (dp.UpperSpecLimit ?? decimal.MaxValue) && checkAbove) ||\n    ((dp.Value1 ?? 0) < (dp.LowerSpecLimit ?? decimal.MinValue) && !checkAbove))\n    {\n     countOutOfSpec++;\n    }\n\n   if (countOutOfSpec == 2)\n   {\n    isRuleViolated = true;\n    break;\n   }\n  }\n }\n}\n\nOutput[\"Result\"] = isRuleViolated;\nreturn Output;"
          }
        ],
        "links": [
          {
            "topic": "Creating Custom SPC Rules#",
            "links": [
              {
                "description": "Creating Custom SPC Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customspcrules/#creating-custom-spc-rules"
              }
            ]
          },
          {
            "topic": "Creating a DEE Action for SPC Rules#",
            "links": [
              {
                "description": "Creating a DEE Action for SPC Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customspcrules/#creating-a-dee-action-for-spc-rules"
              }
            ]
          },
          {
            "topic": "Using the DEE Action in a SPC Chart#",
            "links": [
              {
                "description": "Using the DEE Action in a SPC Chart# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/customspcrules/#using-the-dee-action-in-a-spc-chart"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/customspcrules/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "DEE Extension for Visual Studio",
        "definition": [
          {
            "topic": "DEE Extension for Visual Studio#",
            "definition": "# The Critical Manufacturing DEE Extension is a Visual Studio add-in to help in the development and debugging of DEE Actions. Typically, the source code for DEE Actions, which includes both the main Action code and the Test Condition code, is defined using the Critical Manufacturing web-based interface. This interface is not meant for source code authoring and thus lacks support for code formatting, auto-completion and validation. This Visual Studio add-in overcomes that limitation by offering a workbench where DEE Actions can be edited, validated, and debugged inside Visual Studio. Therefore, taking advantage of all the advanced features provided by this development environment. "
          },
          {
            "topic": "Requirements#",
            "definition": "# The Critical Manufacturing DEE Extension add-in is compatible with Visual Studio 2010 Professional or higher. "
          },
          {
            "topic": "Where to find it#",
            "definition": "# The Critical Manufacturing DEE Extension is available in the Visual Studio Marketplace and can be found here ⧉. Alternatively, you can search for CriticalManufacturing in the main Marketplace website and it will show up in the top search results. here ⧉ "
          },
          {
            "topic": "Installation#",
            "definition": "# The installation of Critical Manufacturing DEE Extension is performed by double-clicking on the installation package and confirming the operation when you are prompted for the installation as shown in the next picture.   Any instance of Visual Studio that was opened during the installation must be restarted before the add-in becomes available for use in that instance.   "
          },
          {
            "topic": "Remote Debugging#",
            "definition": "# The add-in can be connected to CriticalManufacturingMES Host processes running locally. For example, on the same machine where Visual Studio is being used, or processes are running on a remote server machine. In the later case there are some additional set up steps that must be performed on the server: Download and install the Microsoft Visual Studio Remote Debugger ⧉ on the server. Run the Remote Debugging Monitor on the Server using an administrator account or the same account used to run the CriticalManufacturingMES Host. Using the Remote Debugging Monitor console, assign Debug permissions to the user performing the remote debug. Download and install the Microsoft Visual Studio Remote Debugger ⧉ on the server. Microsoft Visual Studio Remote Debugger ⧉ Run the Remote Debugging Monitor on the Server using an administrator account or the same account used to run the CriticalManufacturingMES Host. Using the Remote Debugging Monitor console, assign Debug permissions to the user performing the remote debug. During the above steps you may be prompted to change some firewall rules on the server. For more information about security configurations for remote debugging see this link ⧉. this link ⧉ Warning VERY IMPORTANT: Remote debugging is a highly privileged operation, sometimes requiring sysadmin privileges on the Visual Studio host and the remote computer. Thus, remote debugging shall only be performed on development or test environments; it shall never be performed on productive environments. "
          },
          {
            "topic": "Configuration#",
            "definition": "# Configuration settings for the add-in are set using the Visual Studio Options dialog accessible from the menu Tools > Options.   All settings must be defined prior to use:   Host Address - represents the address + port of the machine running the host to which the Critical Manufacturing DEE Extension will connect. If running on a local environment, the address should be localhost. Access Token - represents the bearer token with a default duration of 14 days. To configure the access token that will be used in the API calls, it is necessary to retrieve the Authorization Bearer token from the browser. This can be done with a simple API call to the MES that retrieves data from the MES and intercepting that call via a network inspection software, such as the Chrome Developer Console. To that end, follow these steps: Access the local environment and open the Chrome Developer Console from within Google Chrome. Change to the Network tab and ensure it is capturing traffic. Perform any action that retrieves data from the MES, such as opening a Material or a Resource. Search for the matching POST method and retrieve the Authorization Bearer token. Personal Access Token - represents the user access token that can be explicitly generated using the User page. Host Address - represents the address + port of the machine running the host to which the Critical Manufacturing DEE Extension will connect. If running on a local environment, the address should be localhost. Access Token - represents the bearer token with a default duration of 14 days. To configure the access token that will be used in the API calls, it is necessary to retrieve the Authorization Bearer token from the browser. This can be done with a simple API call to the MES that retrieves data from the MES and intercepting that call via a network inspection software, such as the Chrome Developer Console. To that end, follow these steps: Access the local environment and open the Chrome Developer Console from within Google Chrome. Change to the Network tab and ensure it is capturing traffic. Perform any action that retrieves data from the MES, such as opening a Material or a Resource. Search for the matching POST method and retrieve the Authorization Bearer token. Personal Access Token - represents the user access token that can be explicitly generated using the User page. Info In a scenario where load balancing is enabled there will be a router and two or more CriticalManufacturingMES Host instances. Is this case the DEE Management Endpoint shall point directly to one of the instances bypassing the load balancing router. "
          },
          {
            "topic": "Add-in GUI#",
            "definition": "# The main window of the add-in is opened from the menu View > Other windows > Critical Manufacturing DEE Extension and can be docked at any location using Visual Studio standard docking features.   The window in divided in three areas: Toolbar – provides a button to manually load or reload Actions and Action groups, and another button to launch the Attach to Process dialog. Actions and Action Groups tree – shows the available Actions and Action Groups in a hierarchical structure. If the DEE Management Endpoint option is correctly set and the host is running the tree is populated immediately when the add-in window is first shown. Double-clicking on an Action in the tree opens a code editor containing the source code of the Action. Details panel – shows the details of the Action or Action Group currently selected in the tree. Toolbar – provides a button to manually load or reload Actions and Action groups, and another button to launch the Attach to Process dialog. Actions and Action Groups tree – shows the available Actions and Action Groups in a hierarchical structure. If the DEE Management Endpoint option is correctly set and the host is running the tree is populated immediately when the add-in window is first shown. Double-clicking on an Action in the tree opens a code editor containing the source code of the Action. Details panel – shows the details of the Action or Action Group currently selected in the tree. When an Action is selected the details panel has the following layout:   For each Action the information displayed is the following: Name – the name as returned by the DEE Management service. Enabled/Disabled status – indicates whether the action is enabled or disabled. Description – the description as returned by the DEE Management service. Debug mode – indicates whether the action can be debugged (debug mode enabled) or not (debug mode disabled). Pending changes – indicates whether there are changes in the source code file of the Action that were not yet saved to the system. Name – the name as returned by the DEE Management service. Enabled/Disabled status – indicates whether the action is enabled or disabled. Description – the description as returned by the DEE Management service. Debug mode – indicates whether the action can be debugged (debug mode enabled) or not (debug mode disabled). Pending changes – indicates whether there are changes in the source code file of the Action that were not yet saved to the system. The actions that can be performed are the following: Activate/deactivate debug mode. Save the source code (enabled only if there are pending changes) of the Action. Reload the source code of the Action. Activate/deactivate debug mode. Save the source code (enabled only if there are pending changes) of the Action. Reload the source code of the Action. "
          },
          {
            "topic": "Important notes#",
            "definition": "# The next paragraphs explain some concepts and behaviors that are important to better understand how the add-in operates. When the user double-clicks on an Action in the tree, the add-in calls a service that returns the source code of the Action; this creates a temporary file in the Output Path and opens it in a code editor. While this file is being edited changes are not immediately transmitted to the system, which means that unless an explicit save is performed (using the button in the details panel) there will be a mismatch between the source code being displayed in Visual Studio and the one stored in the system. This is very important because the code executed by the Host depends on if the debug mode of the Action is enabled or disabled: Debug mode disabled – the source code stored in the system is used. Pending changes in the temporary file are ignored. Debug mode enabled – the Host reads and compiles the source code directly from the temporary file being edited in Visual Studio. Pending changes must be saved in order to make them effective for all users. Debug mode disabled – the source code stored in the system is used. Pending changes in the temporary file are ignored. Debug mode enabled – the Host reads and compiles the source code directly from the temporary file being edited in Visual Studio. Pending changes must be saved in order to make them effective for all users. Debug mode is enabled on a per-user basis, which means that the code executed for a user with debug mode enabled can be different from the code executed for all other users. A DEE Action contains two separate source code parts, the Test Condition and the main Action Code (the main Action Code is only executed if the Test Condition returns true as the result). When editing an Action using CriticalManufacturingMES web interface these two parts are edited in independent text areas, whereas the add-in merges them in a single source code file with the following structure:   The method EvaluateRule contains the main Action Code, the method ValidateAction contains the Test Condition code. Except for the addition of new using statements, editing code outside the comments that delimit the method contents shall be avoided. It is especially important to notice that any new methods added to the class will be ignored and eliminated. "
          },
          {
            "topic": "Opening a DEE Action#",
            "definition": "# Double-clicking on an Action in the tree opens a code editor containing the source code of the Action. If there is a solution open and it contains a startup project the user will be prompted to add the file to that project, but only if none of the solution projects already contain the file. If there is no solution currently open a temporary one will be created by Visual Studio but no files will be added to it. Although not mandatory, it is highly advisable to always add the DEE Actions being edited to a project containing the references required to successfully compile the source code. Source code files containing DEE Actions source code can also be added to a project manually. The procedure is the following: Right-click on the project and chose Add > Existing Item… from the context menu. Browse to the folder where the DEE Action that you want to add is located. Choose the file with the same name as the action to be added to the project. Add the file to the project by choosing the Add as Link from the Add button drop-down menu. Right-click on the project and chose Add > Existing Item… from the context menu. Browse to the folder where the DEE Action that you want to add is located. Choose the file with the same name as the action to be added to the project. Add the file to the project by choosing the Add as Link from the Add button drop-down menu. The previous procedure only works if the DEE Action was previously open using the add-in, otherwise no source file with the name of the Action will exist. Warning VERY IMPORTANT: The source code of the Action shall ALWAYS be open from the Critical Manufacturing DEE Extension window (even if the project already contains links to DEE Action source code files). That is the only way to guarantee that the link between the DEE Action and the corresponding source code file is established allowing further operations like debug mode activation and saving. Not following this advice may result in source code loss. "
          },
          {
            "topic": "Editing a DEE Action#",
            "definition": "# After opening the Action from the Critical Manufacturing DEE Extension it can be edited as any other C# source code file. Saving using the standard Visual Studio Save command will persist changes to the temporary file but not to CriticalManufacturingMES. "
          },
          {
            "topic": "Saving a DEE Action#",
            "definition": "# In order to store the new code in CriticalManufacturingMES the button from the Action details panel must be used. This command takes the current source code in the temporary file and calls a service to permanently save it. If there are compilation errors the service will return a message containing all errors and warnings. In addition to the error codes and descriptions, the message also indicates the part on which the error was detected (Test Condition, main Action Code or General) and a line number. For Test Condition and Action Code related errors this line number is relative to the beginning of the corresponding method, not to the beginning of the file as it would be expected. The following image shows an example:   Line 6 in the message refers to the 6th line of the EvaluateRule method and not the 6th line of the complete file as it might be expected (we know that it is the EvaluateRule method because of the [Action Code] tag in the text). Note that an Action compiled successfully in Visual Studio may return compilation errors when saved. This usually happens when a using statement is added to the header of the class (making it compile in Visual Studio) but then no corresponding UseReference call is added to the body of the method (internally, the Host ignores all using statements defined in the header, inferring them instead from the UseReference calls). "
          },
          {
            "topic": "Debugging a DEE Action#",
            "definition": "# To debug a DEE Action with the Critical Manufacturing DEE Extension, follow these steps: Start the host locally. Ensure that the proper configurations for the Critical Manufacturing DEE Extension are set and operational so that the API host can be reached. Ensure that the DEE Extension Endpoint is the same as the endpoint of your host. Open the Critical Manufacturing DEE Extension window on Visual Studio by selecting the View > Other Windows > Critical Manufacturing DEE Extension menu option. Refresh the panel so that the list of Actions is displayed. If an error is thrown, recheck the configuration of the Critical Manufacturing DEE Extension and make sure that the address and port are set to the proper environment and the token is still valid. Attach the Visual Studio debugger to the local host console (looking for Cmf.Foundation.Services.HostConsole.exe executable in the Attach to Process menu option). Double-click on the DEE Action that you want to debug. A pop-up will appear so that the file can be added to a project if desired. Select No. Select the Enable DEE Debug button and the Debug mode should become Enabled. Place breakpoints in the code editor and trigger the execution of the DEE Action using the Critical Manufacturing MES web interface. Start the host locally. Ensure that the proper configurations for the Critical Manufacturing DEE Extension are set and operational so that the API host can be reached. Ensure that the DEE Extension Endpoint is the same as the endpoint of your host. Open the Critical Manufacturing DEE Extension window on Visual Studio by selecting the View > Other Windows > Critical Manufacturing DEE Extension menu option. Refresh the panel so that the list of Actions is displayed. If an error is thrown, recheck the configuration of the Critical Manufacturing DEE Extension and make sure that the address and port are set to the proper environment and the token is still valid. Attach the Visual Studio debugger to the local host console (looking for Cmf.Foundation.Services.HostConsole.exe executable in the Attach to Process menu option). Double-click on the DEE Action that you want to debug. A pop-up will appear so that the file can be added to a project if desired. Select No. Select the Enable DEE Debug button and the Debug mode should become Enabled. Place breakpoints in the code editor and trigger the execution of the DEE Action using the Critical Manufacturing MES web interface. Info As previously stated, with debug mode enabled the Host reads and compiles the source code directly from the file being displayed in Visual Studio. During compilation a mismatch between the using statements and the UseReference calls may be detected resulting in errors (even if compilation was successful in Visual Studio). In this situation the using statements that do not have a corresponding UseReference call are eliminated from the source file and the user is prompted to reload it in Visual Studio. During this process all code outside the EvaluateRule and ValidateAction methods will be eliminated, that is why it is so important to restrict code changes to the body of these two methods. "
          }
        ],
        "code": [
          {
            "topic": "Configuration#",
            "code": "Tools > Optionslocalhost"
          },
          {
            "topic": "Add-in GUI#",
            "code": "View > Other windows > Critical Manufacturing DEE Extension"
          },
          {
            "topic": "Important notes#",
            "code": "true"
          },
          {
            "topic": "Opening a DEE Action#",
            "code": "Add > Existing Item…"
          },
          {
            "topic": "Debugging a DEE Action#",
            "code": "View > Other Windows > Critical Manufacturing DEE ExtensionCmf.Foundation.Services.HostConsole.exeAttach to Process"
          }
        ],
        "links": [
          {
            "topic": "DEE Extension for Visual Studio#",
            "links": [
              {
                "description": "DEE Extension for Visual Studio# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#dee-extension-for-visual-studio"
              }
            ]
          },
          {
            "topic": "Requirements#",
            "links": [
              {
                "description": "Requirements# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#requirements"
              }
            ]
          },
          {
            "topic": "Where to find it#",
            "links": [
              {
                "description": "Where to find it# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#where-to-find-it"
              },
              {
                "description": "Where to find it# (2)",
                "link": "https://marketplace.visualstudio.com/publishers/CriticalManufacturing"
              }
            ]
          },
          {
            "topic": "Installation#",
            "links": [
              {
                "description": "Installation# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#installation"
              },
              {
                "description": "Installation# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs01.png"
              },
              {
                "description": "Installation# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs01_complete.png"
              }
            ]
          },
          {
            "topic": "Remote Debugging#",
            "links": [
              {
                "description": "Remote Debugging# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#remote-debugging"
              },
              {
                "description": "Remote Debugging# (2)",
                "link": "https://msdn.microsoft.com/library/y7f5zaaa.aspx"
              },
              {
                "description": "Remote Debugging# (3)",
                "link": "https://msdn.microsoft.com/library/y7f5zaaa.aspx"
              }
            ]
          },
          {
            "topic": "Configuration#",
            "links": [
              {
                "description": "Configuration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#configuration"
              },
              {
                "description": "Configuration# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs02.png"
              },
              {
                "description": "Configuration# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs03_authbearer.png"
              }
            ]
          },
          {
            "topic": "Add-in GUI#",
            "links": [
              {
                "description": "Add-in GUI# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#add-in-gui"
              },
              {
                "description": "Add-in GUI# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs03.png"
              },
              {
                "description": "Add-in GUI# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs04.png"
              }
            ]
          },
          {
            "topic": "Important notes#",
            "links": [
              {
                "description": "Important notes# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#important-notes"
              },
              {
                "description": "Important notes# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs05.png"
              }
            ]
          },
          {
            "topic": "Opening a DEE Action#",
            "links": [
              {
                "description": "Opening a DEE Action# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#opening-a-dee-action"
              }
            ]
          },
          {
            "topic": "Editing a DEE Action#",
            "links": [
              {
                "description": "Editing a DEE Action# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#editing-a-dee-action"
              }
            ]
          },
          {
            "topic": "Saving a DEE Action#",
            "links": [
              {
                "description": "Saving a DEE Action# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#saving-a-dee-action"
              },
              {
                "description": "Saving a DEE Action# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/DEEToolsForVs06.png"
              }
            ]
          },
          {
            "topic": "Debugging a DEE Action#",
            "links": [
              {
                "description": "Debugging a DEE Action# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/#debugging-a-dee-action"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/deetoolsforvisualstudio/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Elastic APM integration",
        "definition": [
          {
            "topic": "Elastic APM integration#",
            "definition": "# The Critical Manufacturing Host Service can be integrated with Elastic Application Performance Monitoring (APM) ⧉ agent to collect performance metrics for services, database queries or any manually defined code blocks. The performance metrics can be visualized in Kibana with pre-configured dashboards and a dedicated Kibana UI to easily pinpoint and debug performance bottlenecks and errors in the code. Elastic Application Performance Monitoring (APM) ⧉ "
          },
          {
            "topic": "Setup#",
            "definition": "# On the host folder, create a file named appsettings.json with the following structure: On the host folder, create a file named appsettings.json with the following structure: Where: elastic-apm-agent-url: URL of the Elastic APM agent that the host will use to publish the collected metrics service-name: optional, the name that will be display in the Kibana UI (Re)start the host The collected metrics can be analyzed in the Kibana UI (Kibana > Observability > APM) elastic-apm-agent-url: URL of the Elastic APM agent that the host will use to publish the collected metrics service-name: optional, the name that will be display in the Kibana UI service-name: optional, the name that will be display in the Kibana UI (Re)start the host (Re)start the host The collected metrics can be analyzed in the Kibana UI (Kibana > Observability > APM) Warning The Host performance is affected when the APM is enabled and collecting data. Under APM > Settings the configuration can be changed to reduce the overhead of collecting performance metrics. "
          },
          {
            "topic": "How to analyze the collect data?#",
            "definition": "# Using the Kibana UI it is possible to analyze the collected metrics by service/api. By default, SQL queries performance is also available. "
          },
          {
            "topic": "How to collect extra data?#",
            "definition": "# During development of new services or when investigating performance issues, it may be useful to analyze some code blocks in detail. The APM Public API ⧉ can be used for that. APM Public API ⧉ To use the APM Public API on our host, add the Elastic.Apm.dll assembly (available in the host folder) as reference to the C# project that you would like to collect extra metrics. "
          }
        ],
        "code": [
          {
            "topic": "Setup#",
            "code": "appsettings.json{\n  \"ElasticApm\": {\n    \"ServerUrl\": \"<elastic-apm-agent-url>\",\n    \"ServiceName\": \"<service-name>\"\n  }\n}"
          },
          {
            "topic": "How to collect extra data?#",
            "code": "Elastic.Apm.dll"
          }
        ],
        "links": [
          {
            "topic": "Elastic APM integration#",
            "links": [
              {
                "description": "Elastic APM integration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/enableelasticapm/#elastic-apm-integration"
              },
              {
                "description": "Elastic APM integration# (2)",
                "link": "https://www.elastic.co/observability/application-performance-monitoring"
              }
            ]
          },
          {
            "topic": "Setup#",
            "links": [
              {
                "description": "Setup# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/enableelasticapm/#setup"
              }
            ]
          },
          {
            "topic": "How to analyze the collect data?#",
            "links": [
              {
                "description": "How to analyze the collect data?# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/enableelasticapm/#how-to-analyze-the-collect-data"
              }
            ]
          },
          {
            "topic": "How to collect extra data?#",
            "links": [
              {
                "description": "How to collect extra data?# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/enableelasticapm/#how-to-collect-extra-data"
              },
              {
                "description": "How to collect extra data?# (2)",
                "link": "https://www.elastic.co/guide/en/apm/agent/dotnet/current/public-api.html"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/enableelasticapm/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Execute Parallel Code",
        "definition": [
          {
            "topic": "Execute Parallel Code#",
            "definition": "# To execute code in parallel, you must use our \"IAsync\" service. Which is located in \"Cmf.Foundation.Common.Abstractions\". In the following example, we use the service to run two different queries in parallel: "
          },
          {
            "topic": "Code Example#",
            "definition": "# "
          },
          {
            "topic": "Why do we need this service?#",
            "definition": "# Before the development of this service, when parallel code was executed, the following exception was thrown:   This service will also ensure that the service/operations history tree is correctly built. It will guarantee that the history between parallel operations is not mixed up. Note that when viewing the history, there is no indication that the operations were performed in parallel. "
          },
          {
            "topic": "What happens if the IAsync service is not used to execute parallel\\asynchronous code?#",
            "definition": "# If the code being executed tries to write operations history, an exception will be thrown: bash Asynchronous code must be executed using the Cmf.Foundation.Common.Abstractions.IAsync service. "
          }
        ],
        "code": [
          {
            "topic": "Code Example#",
            "code": "var serviceProvider = (IServiceProvider)Input[\"ServiceProvider\"];\nvar asyncUtil = serviceProvider.GetService<IAsync>();\n\nDataSet productDetails = null;\nvar productDetailsParams = serviceProvider.GetService<IQueryParameterCollection>();\n// productDetailsParams.Add() ...filters\n\nvar productDetailsTask = asyncUtil.Run(() => {\n    var query = new QueryObject();\n    query.Load(\"GetProductDetails\");\n    productDetails = query.Execute(false, productDetailsParams);\n});\n\nDataSet materialDetails = null;\nvar materialDetailsParams = serviceProvider.GetService<IQueryParameterCollection>();\n// materialDetailsParams.Add() ...filters\n\nvar materialDetailsTask = asyncUtil.Run(() => {\n    var query = new QueryObject();\n    query.Load(\"GetMaterialDetails\");\n    materialDetails = query.Execute(false, materialDetailsParams);\n});\n\nTask.WaitAll(productDetailsTask, materialDetailsTask);"
          },
          {
            "topic": "Why do we need this service?#",
            "code": "System.InvalidOperationException: ExecuteReader requires an open and available Connection. The connection's current state is closed."
          },
          {
            "topic": "What happens if the IAsync service is not used to execute parallel\\asynchronous code?#",
            "code": "bash Asynchronous code must be executed using the Cmf.Foundation.Common.Abstractions.IAsync service."
          }
        ],
        "links": [
          {
            "topic": "Execute Parallel Code#",
            "links": [
              {
                "description": "Execute Parallel Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/executeparallelcode/#execute-parallel-code"
              }
            ]
          },
          {
            "topic": "Code Example#",
            "links": [
              {
                "description": "Code Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/executeparallelcode/#code-example"
              }
            ]
          },
          {
            "topic": "Why do we need this service?#",
            "links": [
              {
                "description": "Why do we need this service?# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/executeparallelcode/#why-do-we-need-this-service"
              }
            ]
          },
          {
            "topic": "What happens if the IAsync service is not used to execute parallel\\asynchronous code?#",
            "links": [
              {
                "description": "What happens if the IAsync service is not used to execute parallel\\asynchronous code?# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/executeparallelcode/#what-happens-if-the-iasync-service-is-not-used-to-execute-parallelasynchronous-code"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/executeparallelcode/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Exporting Relations",
        "definition": [
          {
            "topic": "Exporting Relations#",
            "definition": "# The export mechanism is configured to export only attributes (by default relations are not exported). Nevertheless, it is possible to set a default behavior for each entity type and/or choose, one by one, the attributes and relations to export for each Entity Type. To setup the attributes / relations export, follow these steps: Open the 'Configuration' page in the 'Administration' page group Navigate to the configuration path 'Cmf > System > Configuration > Export' Search for the name of the desired object (e.g. 'Material') to see if there are already established export configurations If the object's name is not listed, add a new configuration entry with the name of the object (don't choose any type) Open the entry If the 'Attributes' and/or 'Relations' entry don't exist, add a new configuration entry with the name 'Attributes' and/or 'Relations' (don't choose any type) Open the 'Attributes' or 'Relations' entry To define the export of each attribute and/or relation independently, add a entry with the name of the target attribute and/or relation, set the type to boolean and set true or false whether is to export or not the attribute and/or relation (see the picture below) Save the configuration after setting up all attributes and/or relations Open the 'Configuration' page in the 'Administration' page group Navigate to the configuration path 'Cmf > System > Configuration > Export' Search for the name of the desired object (e.g. 'Material') to see if there are already established export configurations If the object's name is not listed, add a new configuration entry with the name of the object (don't choose any type) Open the entry If the 'Attributes' and/or 'Relations' entry don't exist, add a new configuration entry with the name 'Attributes' and/or 'Relations' (don't choose any type) Open the 'Attributes' or 'Relations' entry To define the export of each attribute and/or relation independently, add a entry with the name of the target attribute and/or relation, set the type to boolean and set true or false whether is to export or not the attribute and/or relation (see the picture below) Save the configuration after setting up all attributes and/or relations Info The export mechanism provides a keyword allowing to set all attributes and/or relations to be (or not) exported at once. The keyword name is <DEFAULT> and it must be of type boolean. Set this entry to true to export all attributes and/or relations, and false to not export any attributes and/or relations Info When the 'Attributes' and/or 'Relations' entry exist without any sibling entries, the system will assume that all attributes and/or relations of that entry are exportable Info Only enabled relations and/or attributes are exported Info The configuration entries names are case sensitive "
          }
        ],
        "code": [
          {
            "topic": "Exporting Relations#",
            "code": "<DEFAULT>"
          }
        ],
        "links": [
          {
            "topic": "Exporting Relations#",
            "links": [
              {
                "description": "Exporting Relations# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/exportrelations/#exporting-relations"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/exportrelations/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "MES services through HTTP API",
        "definition": [
          {
            "topic": "MES services through HTTP API#",
            "definition": "# This page will help you connect to the MES through the HTTP API that is available in the system. The requests listed in this page follow the curl format and can be imported or executed using Postman ⧉ or any other REST client. Postman ⧉ "
          },
          {
            "topic": "How to generate a Security Portal Access Token#",
            "definition": "# The usage of a generated Access Token is important to avoid storing user credentials in the application configurations. More information about how to generate an access token can be found on the Users ⧉ page of the user guide. Users ⧉ The following tokens will be used in the example requests below: http/https - depending whether MES is configured with SSL Address - MES/LoadBalancer Address SecurityPortalPort - Security Portal port configuration MESPort - MES port configuration. Default values are: 80 for Non-SSL 443 for SSL Tenant - MES System Tenant ClientId - Client ID configured for the Security Portal GeneratedToken - Token generated for the user AccessToken - Token retrieved by the system after login http/https - depending whether MES is configured with SSL Address - MES/LoadBalancer Address SecurityPortalPort - Security Portal port configuration MESPort - MES port configuration. Default values are: 80 for Non-SSL 443 for SSL Tenant - MES System Tenant ClientId - Client ID configured for the Security Portal GeneratedToken - Token generated for the user AccessToken - Token retrieved by the system after login "
          },
          {
            "topic": "Generating an access token using Security Portal#",
            "definition": "# "
          },
          {
            "topic": "Request#",
            "definition": "# For containerized environments, the request call is slightly different: "
          },
          {
            "topic": "Response#",
            "definition": "# The value for access_token on the response can be used on further MES API Calls until it expires. "
          },
          {
            "topic": "Sample call#",
            "definition": "# "
          },
          {
            "topic": "Request#",
            "definition": "# "
          },
          {
            "topic": "Response#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "MES services through HTTP API#",
            "code": "curl"
          },
          {
            "topic": "How to generate a Security Portal Access Token#",
            "code": "80443"
          },
          {
            "topic": "Request#",
            "code": "curl\n--location\n--request POST \"<http/https>://<Address>:<SecurityPortalPort>/api/tenant/<Tenant>/oauth2/token\"\n--header \"Content-Type: application/x-www-form-urlencoded\"\n--data-urlencode \"client_id=<ClientId>\"\n--data-urlencode \"grant_type=refresh_token\"\n--data-urlencode \"refresh_token=<GeneratedToken>\"curl\n--location\n--request POST \"<http/https>://<Address>:<Port>/SecurityPortal/api/tenant/<Tenant>/oauth2/token\"\n--header \"Content-Type: application/x-www-form-urlencoded\"\n--data-urlencode \"client_id=<ClientId>\"\n--data-urlencode \"grant_type=refresh_token\"\n--data-urlencode \"refresh_token=<GeneratedToken>\""
          },
          {
            "topic": "Response#",
            "code": "{\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsInRlbmFudE5hbWUiOiJIZW1sb2NrIn0.eyJ0ZW5hbnROYW1lIjoiSGVtbG9jayIsInN1YiI6IkFTRCIsInVzZXJBY2NvdW50IjoiQVNEIiwiaWF0IjoxNjM5NDA5Mjg1LCJleHAiOjE2NDMwMDkyODUsImF1ZCI6Ik1FU1RFU1QiLCJpc3MiOiJBdXRoUG9ydGFsIn0.eaK4Ciz7pB7nO-rz0onEh9eTX5UkkuojPXMJ2RGLhs0\",\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjbGllbnRJZCI6Ik1FU1RFU1QiLCJ0ZW5hbnROYW1lIjoiSGVtbG9jayIsInN1YiI6IkFTRCIsInNjb3BlIjpudWxsLCJpYXQiOjE2Mzk0MDkyODUsImV4cCI6NDA1ODYwOTI4NSwiYXVkIjoiQXV0aFBvcnRhbCIsImlzcyI6IkF1dGhQb3J0YWwifQ.QBzLeHcj85tY0r5oACigsNSwezI-S4TmzXlUZ1lnCj4\",\n    \"expires_in\": 3600000,\n    \"token_type\": \"Bearer\"\n}access_token"
          },
          {
            "topic": "Request#",
            "code": "curl\n    --location \n    --request POST \"<http/https>://<Address>:<MESPort>/api/Security/GetUserById\" \\\n    --header \"Content-Type: application/json\" \\\n    --header \"Authorization: Bearer <AccessToken>\" \\\n    --data-raw \"{\n        \"$type\": \"Cmf.Foundation.BusinessOrchestration.SecurityManagement.InputObjects.GetUserByIdInput, Cmf.Foundation.BusinessOrchestration\",\n        \"Id\":  \"2021120283727777\",\n        \"IsToLoadFromDataBase\": true\n    }\""
          },
          {
            "topic": "Response#",
            "code": "{\n    \"$id\": \"1\",\n    \"$type\": \"Cmf.Foundation.BusinessOrchestration.SecurityManagement.OutputObjects.GetUserByIdOutput, Cmf.Foundation.BusinessOrchestration\",\n    \"User\": {\n        \"$id\": \"2\",\n        \"$type\": \"Cmf.Foundation.Security.User, Cmf.Foundation.Security\",\n        \"Id\": \"2105031227580000002\",\n        \"UserName\": \"System\",\n        \"UserAccount\": \"System\",\n        \"CreatedOn\": \"2021-05-03T12:33:27.987+01:00\",\n        \"Roles\": [],\n        \"CreatedBy\": \"System\",\n        \"DirectRoles\": [],\n        \"ModifiedOn\": \"2021-05-03T12:33:27.987+01:00\",\n        \"ModifiedBy\": \"System\",\n        \"LastServiceHistoryId\": \"2105031227580000006\",\n        \"MailAddress\": \"\",\n        \"LastOperationHistorySeq\": \"637556384079866667\",\n        \"Token\": \"\",\n        \"UniversalState\": 0,\n        \"IsEnabled\": true,\n        \"ObjectLocked\": false,\n        \"LockType\": 0,\n        \"IsIntegrationUser\": false,\n        \"AuthenticationStrategy\": \"\",\n        \"RequirePasswordChange\": false\n    },\n    \"TotalRows\": 0\n}"
          }
        ],
        "links": [
          {
            "topic": "MES services through HTTP API#",
            "links": [
              {
                "description": "MES services through HTTP API# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#mes-services-through-http-api"
              },
              {
                "description": "MES services through HTTP API# (2)",
                "link": "https://www.postman.com/"
              }
            ]
          },
          {
            "topic": "How to generate a Security Portal Access Token#",
            "links": [
              {
                "description": "How to generate a Security Portal Access Token# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#how-to-generate-a-security-portal-access-token"
              },
              {
                "description": "How to generate a Security Portal Access Token# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/security/users/"
              }
            ]
          },
          {
            "topic": "Generating an access token using Security Portal#",
            "links": [
              {
                "description": "Generating an access token using Security Portal# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#generating-an-access-token-using-security-portal"
              }
            ]
          },
          {
            "topic": "Request#",
            "links": [
              {
                "description": "Request# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#request"
              }
            ]
          },
          {
            "topic": "Response#",
            "links": [
              {
                "description": "Response# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#response"
              }
            ]
          },
          {
            "topic": "Sample call#",
            "links": [
              {
                "description": "Sample call# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#sample-call"
              }
            ]
          },
          {
            "topic": "Request#",
            "links": [
              {
                "description": "Request# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#request_1"
              }
            ]
          },
          {
            "topic": "Response#",
            "links": [
              {
                "description": "Response# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/#response_1"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Light Business Objects",
        "definition": [
          {
            "topic": "Light Business Objects#",
            "definition": "# Light Business Objects (LBOs) is an SDK that allows developers to call Critical Manufacturing APIs. Currently, the supported targets are Dotnet-based and Typescript/Javascript-based applications. "
          },
          {
            "topic": "LBO Generator#",
            "definition": "# The tool responsible for generating LBOs is called LBOGenerator. In traditional setups, the LBO generator is distributed in the LboGenerator folder, whereas in containers, it is distributed as an API in a standalone container LBOGenerator is part of the MES stack as an API. "
          },
          {
            "topic": "How are LBOs Generated#",
            "definition": "# The LBO generator creates SDKs based on two sets of information: A folder containing the host assemblies. These must start with Cmf. and end with .dll, and their types must include the 'DataContract' or 'CollectionDataContract' attributes, or the tool ignores them) Metadata information managed by Critical Manufacturing MES. A folder containing the host assemblies. These must start with Cmf. and end with .dll, and their types must include the 'DataContract' or 'CollectionDataContract' attributes, or the tool ignores them) Metadata information managed by Critical Manufacturing MES. With this information, the LBO generator will transform entity types and input/output objects into classes and create a set of methods. These will include all the code required to make a successful call to any services defined in the services interface installed in Critical Manufacturing synchronously or asynchronously. All this information is stored inside a code file and compiled to generate an LBO SDK with its configuration files. "
          },
          {
            "topic": "How the the LBOGenerator API work#",
            "definition": "# When the LBOGenerator initializes, it downloads all the host assemblies and automatically initiates the LBO generation. If the Generation fails, default LBOs are available for download or the last successfully generated LBOs. The API exposes two endpoints: Generation State\nAvailable at http://address:port/lbogenerator/Api/GenerationState ⧉\nReturns the current state of the LboGenerator, namely the date of the last successful generation, the current stage (if running), a status code indicating either success, in progress, or error, and a list of errors if the generation failed. Available at http://address:port/lbogenerator/Api/GenerationState ⧉ Returns the current state of the LboGenerator, namely the date of the last successful generation, the current stage (if running), a status code indicating either success, in progress, or error, and a list of errors if the generation failed. Download LBOs\nAvailable at http://address:port/lbogenerator/Api/DownloadLBOs ⧉\nReturns a zip file containing either the last successfully generated LBOs or the default ones if no generation was yet successful. Available at http://address:port/lbogenerator/Api/DownloadLBOs ⧉ Returns a zip file containing either the last successfully generated LBOs or the default ones if no generation was yet successful. Generation State\nAvailable at http://address:port/lbogenerator/Api/GenerationState ⧉\nReturns the current state of the LboGenerator, namely the date of the last successful generation, the current stage (if running), a status code indicating either success, in progress, or error, and a list of errors if the generation failed. Available at http://address:port/lbogenerator/Api/GenerationState ⧉ Returns the current state of the LboGenerator, namely the date of the last successful generation, the current stage (if running), a status code indicating either success, in progress, or error, and a list of errors if the generation failed. Available at http://address:port/lbogenerator/Api/GenerationState ⧉ http://address:port/lbogenerator/Api/GenerationState ⧉ Returns the current state of the LboGenerator, namely the date of the last successful generation, the current stage (if running), a status code indicating either success, in progress, or error, and a list of errors if the generation failed. Download LBOs\nAvailable at http://address:port/lbogenerator/Api/DownloadLBOs ⧉\nReturns a zip file containing either the last successfully generated LBOs or the default ones if no generation was yet successful. Available at http://address:port/lbogenerator/Api/DownloadLBOs ⧉ Returns a zip file containing either the last successfully generated LBOs or the default ones if no generation was yet successful. Available at http://address:port/lbogenerator/Api/DownloadLBOs ⧉ http://address:port/lbogenerator/Api/DownloadLBOs ⧉ Returns a zip file containing either the last successfully generated LBOs or the default ones if no generation was yet successful. LBO generations are triggered by a message to the message bus with the the topic \"CMF.SYSTEM.ADMINISTRATION.ASSEMBLY\". If a generation is already in progress, that generation is canceled and and new generation will be triggered. The LBOGenerator also publishes messages to the MessageBus when it makes progress (\"CMF.SYSTEM.ADMINISTRATION.LBOSPROGRESS.UPDATE\") or finishes (\"CMF.SYSTEM.ADMINISTRATION.LBOSPROGRESS.FINISH\") with the following format: These messages exist to enable the GUI user feedback capabilities. The LBOGenerator container uses the following enviroment variables: ENABLE_JSON_LOGS, whether it should log as json ENABLE_FILE_LOG, whether it should log to a file CONSOLE_LOG_LEVEL, the log level (Trace | Debug | Information | Warning | Error | Fatal | Info) TARGETS, semi-colon separated values, either \"API;NetStandard;NodeJS;TypeScript\" or a subset of these SECURITY_PORTAL_CLIENT_ID, the client id to connect to the Security Portal SECURITY_PORTAL_CLIENT_SECRET, the client secret to connect to the Security Portal TENANT_NAME, the name of the tenant (e.g. MES) SECURITY_PORTAL_ADDRESS, the address of the Security Portal HOST_ADDRESS, the address of the Host ENABLE_JSON_LOGS, whether it should log as json ENABLE_FILE_LOG, whether it should log to a file CONSOLE_LOG_LEVEL, the log level (Trace | Debug | Information | Warning | Error | Fatal | Info) TARGETS, semi-colon separated values, either \"API;NetStandard;NodeJS;TypeScript\" or a subset of these SECURITY_PORTAL_CLIENT_ID, the client id to connect to the Security Portal SECURITY_PORTAL_CLIENT_SECRET, the client secret to connect to the Security Portal TENANT_NAME, the name of the tenant (e.g. MES) SECURITY_PORTAL_ADDRESS, the address of the Security Portal HOST_ADDRESS, the address of the Host "
          },
          {
            "topic": "How to use the LBOGenerator Console#",
            "definition": "# To use the LBOGenerator Console Open a command prompt inside the LBOGenerator folder; Execute the following command, replacing the value of --hostdir with the Business Tier path: Open a command prompt inside the LBOGenerator folder; Execute the following command, replacing the value of --hostdir with the Business Tier path: A folder with the LBOs for both C# and Typescript will be generated to your command prompt current working directory. "
          },
          {
            "topic": "How to debug LboGenerator API locally#",
            "definition": "# Locally the following Enviroment Variables can be set: SECURITY_PORTAL_CLIENT_ID TENANT_NAME SECURITY_PORTAL_CLIENT_SECRET_FILE TARGETS HOST_ADDRESS SECURITY_PORTAL_ADDRESS DB_ADDRESS USE_GATEWAY_EXTERNAL_ADDRESS SECURITY_PORTAL_CLIENT_ID TENANT_NAME SECURITY_PORTAL_CLIENT_SECRET_FILE TARGETS HOST_ADDRESS SECURITY_PORTAL_ADDRESS DB_ADDRESS USE_GATEWAY_EXTERNAL_ADDRESS These variables can be changed in the EnvironmentVariables section of the appSettings.json file in the API project, for example: "
          },
          {
            "topic": "Using the C# LBOs#",
            "definition": "# The C# LBOs assembly (Cmf.LightBusinessObjects.dll) that is generated under the NetStandard folder can be used in a Custom Dotnet application to make calls to the Critical Manufacturing Rest APIs. To do so, the generated assembly should referenced as well as some dependencies that can be found in the BusinessTier folder: Cmf.LoadBalancing.dll Cmf.MessageBus.Client.dll Newtonsoft.Json.dll System.Net.Http.dll System.Net.Http.Formatting.dll Cmf.LoadBalancing.dll Cmf.MessageBus.Client.dll Newtonsoft.Json.dll System.Net.Http.dll System.Net.Http.Formatting.dll To configure the connection to the API, the LBOs configuration must be set according to the following templates, either in App.config or directly in the source code of the application: "
          },
          {
            "topic": "App.config#",
            "definition": "# "
          },
          {
            "topic": "Source Code#",
            "definition": "# In the code snippet just above, the following tokens should must be replaced by: tokens wrapped around <>: Values used in the installation of Critical Manufacturing that can be found in the JSON file exported at the end of the installation process. PersonalAccessToken : Token created in the Access Tokens section of the Users page (visit the Users ⧉ section in the user guide for additional details/). SecurityPortalAddress: Configuration value under the path /Cmf/System/Configuration/SecurityPortal/Address/. _WebSiteAddress : Address of the MES application site (without the initial scheme). tokens wrapped around <>: Values used in the installation of Critical Manufacturing that can be found in the JSON file exported at the end of the installation process. PersonalAccessToken : Token created in the Access Tokens section of the Users page (visit the Users ⧉ section in the user guide for additional details/). Users ⧉ SecurityPortalAddress: Configuration value under the path /Cmf/System/Configuration/SecurityPortal/Address/. _WebSiteAddress : Address of the MES application site (without the initial scheme). After configuring the LBOs, calls to the MES API can be made using Input Objects (visit Host API for additional details). Below is an example of an API call to fetch a Material named MyMaterialName: "
          },
          {
            "topic": "Distributed request calls by LBOs#",
            "definition": "# For an external application or service to perform distributed request calls using LBOs, it is required to add a specific setting to the appsettings section of the application settings file: HostAddress - must be set to the cluster or Discovery Server address HostPort - must be set to the current application port. UseLoadBalacingGateway - must be set to true. HostAddress - must be set to the cluster or Discovery Server address HostPort - must be set to the current application port. UseLoadBalacingGateway - must be set to true. "
          }
        ],
        "code": [
          {
            "topic": "How the the LBOGenerator API work#",
            "code": "{\n  \"AssemblyName\": \"assemblyName\"\n}{\n  \"CurrentTarget\": \"typescript\",\n  \"CurrentTargetCount\": 1,\n  \"TotalTargets\": 4,\n  \"Restart\": false,\n  \"Error\": false\n}"
          },
          {
            "topic": "How to use the LBOGenerator Console#",
            "code": "--hostdirLboGenerator.exe --hostdir=\"_PathWhereProductHostIsLocated\""
          },
          {
            "topic": "How to debug LboGenerator API locally#",
            "code": "appSettings.json{\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Information\",\n            \"Microsoft.AspNetCore\": \"Warning\"\n        }\n    },\n    \"Kestrel\": {\n        \"Endpoints\": {\n            \"Http\": {\n                \"Url\": \"http://*:8080\"\n            }\n        }\n    },\n    \"AllowedHosts\": \"*\",\n    \"EnvironmentVariables\": {\n        \"SECURITY_PORTAL_CLIENT_ID\": \"clientid\",\n        \"TENANT_NAME\": \"tenantname\",\n        \"SECURITY_PORTAL_CLIENT_SECRET_FILE\": \".\\\\SECURITY_PORTAL_CLIENT_SECRET\",\n        \"TARGETS\": \"API;NetStandard;NodeJS;TypeScript\",\n        \"HOST_ADDRESS\": \"http://wsl:443/api/\",\n        \"SECURITY_PORTAL_ADDRESS\": \"http://wsl:443/SecurityPortal/\",\n        \"DB_ADDRESS\": \"wsl,1433\",\n        \"USE_GATEWAY_EXTERNAL_ADDRESS\": \"true\",\n        \"INSTALLATION_DATA_ROOT_PATH\": \"C:\\\\tmp\\\\LboGenerator\\\\\"\n    }\n}"
          },
          {
            "topic": "Using the C# LBOs#",
            "code": "Cmf.LightBusinessObjects.dll"
          },
          {
            "topic": "App.config#",
            "code": "<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <startup> \n        <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6.1\" />\n    </startup>\n    <appSettings>\n      <add key=\"HostAddress\" value=\"_WebSiteAddress:<Product.Presentation.IisConfiguration.Binding.Port>\"/>\n      <add key=\"ClientTenantName\" value=\"<Product.Tenant.Name>\"/>\n      <add key=\"IsUsingLoadBalancer\" value=\"<Product.LoadBalancer.Enabled>\"/>\n      <add key=\"ClientId\" value=\"<Product.SecurityPortal.ClientId>\"/>\n      <add key=\"UseSsl\" value=\"Product.Presentation.IisConfiguration.Binding.IsSslEnabled\"/>\n      <add key=\"SecurityAccessToken\" value=\"_PersonalAccessToken\"/>\n      <add key=\"SecurityPortalBaseAddress\" value=\"_SecurityPortalAddress\"/>\n    </appSettings>\n</configuration>"
          },
          {
            "topic": "Source Code#",
            "code": "ClientConfigurationProvider.ConfigurationFactory = () =>\n{\n    return new ClientConfiguration()\n    {\n        HostAddress = \"<_WebSiteAddress:<Product.Presentation.IisConfiguration.Binding.Port>\",\n        ClientTenantName = \"<Product.Tenant.Name>\",\n        IsUsingLoadBalancer = <Product.LoadBalancer.Enabled>,\n        ClientId = \"<Product.SecurityPortal.ClientId>\",\n        UseSsl = <Product.Presentation.IisConfiguration.Binding.IsSslEnabled>,\n        SecurityAccessToken = \"_PersonalAccessToken\",\n        SecurityPortalBaseAddress = new Uri(\"_SecurityPortalAddress\")\n    };\n};<>PersonalAccessTokenSecurityPortalAddress/Cmf/System/Configuration/SecurityPortal/Address/_WebSiteAddressGetObjectByNameInput getObjectByName = new GetObjectByNameInput()\n{\n    Name = \"MyMaterialName\",\n    Type = new Material()\n};\n\nvar output = getObjectByName.GetObjectByNameSync();\nMaterial outputMaterial = output.Instance as Material;\n\nConsole.WriteLine($\"{outputMaterial.Name}\");"
          },
          {
            "topic": "Distributed request calls by LBOs#",
            "code": "true"
          }
        ],
        "links": [
          {
            "topic": "Light Business Objects#",
            "links": [
              {
                "description": "Light Business Objects# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#light-business-objects"
              }
            ]
          },
          {
            "topic": "LBO Generator#",
            "links": [
              {
                "description": "LBO Generator# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#lbo-generator"
              }
            ]
          },
          {
            "topic": "How are LBOs Generated#",
            "links": [
              {
                "description": "How are LBOs Generated# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#how-are-lbos-generated"
              }
            ]
          },
          {
            "topic": "How the the LBOGenerator API work#",
            "links": [
              {
                "description": "How the the LBOGenerator API work# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#how-the-the-lbogenerator-api-work"
              },
              {
                "description": "How the the LBOGenerator API work# (2)",
                "link": "http://address:port/lbogenerator/Api/GenerationState"
              },
              {
                "description": "How the the LBOGenerator API work# (3)",
                "link": "http://address:port/lbogenerator/Api/DownloadLBOs"
              }
            ]
          },
          {
            "topic": "How to use the LBOGenerator Console#",
            "links": [
              {
                "description": "How to use the LBOGenerator Console# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#how-to-use-the-lbogenerator-console"
              }
            ]
          },
          {
            "topic": "How to debug LboGenerator API locally#",
            "links": [
              {
                "description": "How to debug LboGenerator API locally# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#how-to-debug-lbogenerator-api-locally"
              }
            ]
          },
          {
            "topic": "Using the C# LBOs#",
            "links": [
              {
                "description": "Using the C# LBOs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#using-the-c-lbos"
              }
            ]
          },
          {
            "topic": "App.config#",
            "links": [
              {
                "description": "App.config# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#appconfig"
              }
            ]
          },
          {
            "topic": "Source Code#",
            "links": [
              {
                "description": "Source Code# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#source-code"
              },
              {
                "description": "Source Code# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/security/users"
              }
            ]
          },
          {
            "topic": "Distributed request calls by LBOs#",
            "links": [
              {
                "description": "Distributed request calls by LBOs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/#distributed-request-calls-by-lbos"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "How to use CM MES Message Bus",
        "definition": [
          {
            "topic": "How to use CM MES Message Bus#",
            "definition": "# "
          },
          {
            "topic": "Overview#",
            "definition": "# This guide provides the information to create a .NET client to emit or subscribe messages on the CM MES Message Bus. Among other use cases, this functionality can be used: Trigger actions on External Systems or MES Customization code when an MES event occurs. For example, to automatically refresh an MES UI page; To publish customized messages for third parties. Trigger actions on External Systems or MES Customization code when an MES event occurs. For example, to automatically refresh an MES UI page; To publish customized messages for third parties. Note The guide uses C# code and references to the MES NetStandard LBOs. "
          },
          {
            "topic": "Prerequisites#",
            "definition": "# "
          },
          {
            "topic": "MES Installation#",
            "definition": "# A running MES installation is required for you to be able to use the CM MES Message Bus. Also, you must know the following information to properly configure the Message Bus Client connection: SecurityPortalBaseAddress - Base address for the MES security portal, accessible on the MES Administration page under /Cmf/System/Configuration/SecurityPortal/Address/ configuration; SecurityPortalClientId - The MES Security Portal ClientId defined during the installation (accessible on the MES administration page under /Cmf/System/Configuration/SecurityPortal/ClientId/ configuration); ClientTenantName - Tenant name of the MES environment, defined during installation; SecurityAccessToken - Personal Access Token (PAT) generated on the MES environment; HostAddress - MES UI address and port in the format: hostname:port; UseSSL - Set to true if UI should be accessed using HTTPS protocol, otherwise set to false; IsUsingLoadBalancer - Set to true if MES load balancing is enabled, otherwise set to false; ApplicationName - The name to use to identify the client application accessing the MES message bus. SecurityPortalBaseAddress - Base address for the MES security portal, accessible on the MES Administration page under /Cmf/System/Configuration/SecurityPortal/Address/ configuration; SecurityPortalClientId - The MES Security Portal ClientId defined during the installation (accessible on the MES administration page under /Cmf/System/Configuration/SecurityPortal/ClientId/ configuration); ClientTenantName - Tenant name of the MES environment, defined during installation; SecurityAccessToken - Personal Access Token (PAT) generated on the MES environment; HostAddress - MES UI address and port in the format: hostname:port; UseSSL - Set to true if UI should be accessed using HTTPS protocol, otherwise set to false; IsUsingLoadBalancer - Set to true if MES load balancing is enabled, otherwise set to false; ApplicationName - The name to use to identify the client application accessing the MES message bus. "
          },
          {
            "topic": "Setup a .NET Project#",
            "definition": "# Start by creating a NET project and make sure that it references the following assemblies: Cmf.LoadBalancing.dll Cmf.MessageBus.Client.dll Cmf.LightBusinessObjects.dll Cmf.LoadBalancing.dll Cmf.MessageBus.Client.dll Cmf.LightBusinessObjects.dll These libraries also have dependencies on other assemblies, that must also be referenced in the project: Newtonsoft.Json.dll System.Net.Http.Formatting.dll Newtonsoft.Json.dll System.Net.Http.Formatting.dll Below you can see an example of the CM Message Bus Client dependency tree:   All these libraries can be retrieved: On Traditional Environments, from the Business folder, in the MES installation base directory; On Containerized Environments, from MES UI if you go to Administration > Entity Types > Download LBOs. On Traditional Environments, from the Business folder, in the MES installation base directory; On Containerized Environments, from MES UI if you go to Administration > Entity Types > Download LBOs.   "
          },
          {
            "topic": "Configuration#",
            "definition": "# The configuration for a message bus client is the same as for the usage of CM MES LBOs (Light Business Objects). You need to store these settings on a repository that meets your requirements. The present guide assumes that your repository is App.config file, with the following format: Note Replace variables marked with @@ in App.config file with the adequate value, according to your MES environment. "
          },
          {
            "topic": "Client Implementation#",
            "definition": "# The next sub-sections present the steps to build a message bus client that listens and emits messages using the MES Message Bus, according to the following flow: "
          },
          {
            "topic": "1. Setup LBOs Configuration Factory#",
            "definition": "# You must start by setting up the factory that will be used by CM MES LBOs to retrieve the MES configuration. Assuming that the settings are stored on App.config file (as defined in Configuration) section, the below code snippet shows how to do it: After initializing the ClientConfigurationProvider.ConfigurationFactory, your application is ready to start using LBOs to call the MES APIs. Configuration "
          },
          {
            "topic": "2. Load Message Bus Configuration#",
            "definition": "# The message bus configuration must be retrieved from the MES and complemented with client-specific information, as presented below: "
          },
          {
            "topic": "3. Initialize Message Bus Transport#",
            "definition": "# The communication of a client with CM MES Message Bus is done through an instance of Cmf.MessageBus.Client.Transport. By design, this class has some limitations that you should consider: Does not implement IDisposable; Is not thread-safe; On close(), does not unsubscribe messages. Does not implement IDisposable; Is not thread-safe; On close(), does not unsubscribe messages. To overcome these limitations, consider implementing a wrapper with the features you need, for example: The client connection to the MES Message Bus is established when an instance of MessageBusTransceiver wrapper is created (see its constructor code for details). "
          },
          {
            "topic": "3. Subscribing to Messages#",
            "definition": "# To subscribe to Message Bus messages, two inputs are mandatory: The message subject of the topic to subscribe; The client event handler to delegate the handling of the messages. The message subject of the topic to subscribe; The client event handler to delegate the handling of the messages. The following code provides a message subscription example: The handling of the message will always depend on your use case. The example above is simply logging the message information. Note For more information on the Subject formats and Message Bus usage, check the Message Bus ⧉ section of the CM MES Documentation Portal. Message Bus ⧉ "
          },
          {
            "topic": "4. Emitting messages#",
            "definition": "# There are two ways of emitting messages: Send Request - will send a message and wait for the result; Publish - will not wait for the result. Send Request - will send a message and wait for the result; Publish - will not wait for the result. Below are examples of the usage of these two procedures: Info Complex objects may be exchanged in the CM message bus. Per example, you can serialize it to json: "
          },
          {
            "topic": "5. Close Transport#",
            "definition": "# To avoid memory leakage and ensure system maximum performance, it is extremely important the proper disposal of Message Bus client objects. As so, when an Cmf.MessageBus.Client.Transport instance is no longer needed, the following activities must be done: Unsubscribe all instance active subjects; Then call its Close() method. Unsubscribe all instance active subjects; Then call its Close() method. Note MessageBusTransceiver wrapper performs these tasks in the Dispose() method. "
          },
          {
            "topic": "Resources#",
            "definition": "# A full implementation of the client used to build this guide is available at: App.config - Configuration file example; Program.cs - Class that implements the flow of both message bus emitter and listener; MessageBusTransceiver.cs - Message Bus Client Transport wrapper. App.config - Configuration file example; App.config Program.cs - Class that implements the flow of both message bus emitter and listener; Program.cs MessageBusTransceiver.cs - Message Bus Client Transport wrapper. MessageBusTransceiver.cs "
          }
        ],
        "code": [
          {
            "topic": "MES Installation#",
            "code": "SecurityPortalBaseAddress/Cmf/System/Configuration/SecurityPortal/Address/SecurityPortalClientId/Cmf/System/Configuration/SecurityPortal/ClientId/ClientTenantNameSecurityAccessTokenHostAddresshostnameportUseSSLtruefalseIsUsingLoadBalancertruefalseApplicationName"
          },
          {
            "topic": "Setup a .NET Project#",
            "code": "Cmf.LoadBalancing.dllCmf.MessageBus.Client.dllCmf.LightBusinessObjects.dllNewtonsoft.Json.dllSystem.Net.Http.Formatting.dllBusinessAdministration > Entity Types > Download LBOs"
          },
          {
            "topic": "Configuration#",
            "code": "App.config<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<configuration>\n    <appSettings>\n        <!-- Security Portal settings -->\n        <add key=\"SecurityPortalBaseAddress\" value=\"@@mes_securityportal_address\" />\n        <add key=\"SecurityPortalClientId\"    value=\"@@mes_client_id\" />\n        <add key=\"ClientTenantName\"          value=\"@@mes_client_name\" />\n\n        <!-- PAT token to login on MES -->\n        <add key=\"SecurityAccessToken\"       value=\"@@mes_pat_token\" />\n\n        <!-- The MES UI settings -->\n        <add key=\"HostAddress\"               value=\"@@mes_ui_host_and_port\" />\n        <add key=\"UseSsl\"                    value=\"@@mes_ui_uses_ssl_flag\"/>\n        <add key=\"IsUsingLoadBalancer\"       value=\"@@mes_using_load_balancer_flag\" />\n\n        <!-- An identifier for the current application accessing MES services -->\n        <add key=\"ApplicationName\"           value=\"@@current_app_id\" />\n    </appSettings>\n</configuration>@@"
          },
          {
            "topic": "Client Implementation#",
            "code": "public static void Main()\n{\n   //1. Setup how MES LBOs should retrieve their configuration\n   SetupLBOsConfigurationFactory();\n\n   //2. Retrieve message bus client configuration\n   TransportConfig messageBusConfig = LoadMessageBusConfiguration();\n\n   //3. Establish Message Bus Connection (using a custom wrapper)\n   using (var messagebusTransceiver = new MessageBusTransceiver(messageBusConfig))\n   {\n         //4. Register a listener/handler for messages\n         AddMessageBusListener(messagebusTransceiver);\n\n         //5. Start to emit messages\n         TestSendAndWaitReply(messagebusTransceiver);\n         TestPublishMessage(messagebusTransceiver);\n   }\n}"
          },
          {
            "topic": "1. Setup LBOs Configuration Factory#",
            "code": "App.configClientConfigurationProvider.ConfigurationFactory"
          },
          {
            "topic": "2. Load Message Bus Configuration#",
            "code": "/// <summary>\n/// Loads the message bus configuration from MES and `App.config` file.\n/// </summary>\n/// <returns>The built MES message bus transport configuration.</returns>\npublic static TransportConfig LoadMessageBusConfiguration()\n{\n   //Retrieve MES boot information using LBO\n   var response = new GetApplicationBootInformationInput().GetApplicationBootInformationSync();\n\n   string bootTransportConfig = response.TransportConfig;\n   string bootMessagebusToken = response.MessageBusToken;\n\n   //Retrieve MES messagebus configuration and adapt it for local client\n   TransportConfig messageBusConfig = JsonConvert.DeserializeObject<TransportConfig>(bootTransportConfig);\n   messageBusConfig.SecurityToken = bootMessagebusToken;\n   messageBusConfig.TenantName = ConfigurationManager.AppSettings[\"ClientTenantName\"];\n   messageBusConfig.ApplicationName = ConfigurationManager.AppSettings[\"ApplicationName\"];\n\n   return messageBusConfig;\n}"
          },
          {
            "topic": "3. Initialize Message Bus Transport#",
            "code": "Cmf.MessageBus.Client.Transportclose()/// <summary>\n/// A wrapper to MES message bus transport (<see cref=\"Transport\"/>), to make it disposable and thread-safe.\n/// </summary>\n/// <remarks>This only implements a subset <see cref=\"Transport\"/> features.</remarks>\npublic class MessageBusTransceiver : IDisposable\n{\n   #region Region: Atributes\n\n   /// <summary>\n   /// Concurrency lock object.\n   /// </summary>\n   private readonly object locker = new();\n\n   /// <summary>\n   /// Set of subjects currently subscribed.\n   /// </summary>\n   private readonly HashSet<string> subjects = [];\n\n   /// <summary>\n   /// The actual MES message bus transport being wrapped.\n   /// </summary>\n   private readonly Transport transport;\n\n   #endregion\n\n   /// <summary>\n   /// Class constructor.\n   /// </summary>\n   /// <param name=\"config\">The configuration to use to setup the connection.</param>\n   public MessageBusTransceiver(TransportConfig config)\n   {\n      this.transport = new Transport(config);\n      this.transport.Start();\n   }\n\n\n   #region Region: Message Subscriber Methods\n\n   /// <summary>\n   /// Subscribe to a new topic.\n   /// </summary>\n   /// <param name=\"subject\">The subject of the topic to subscribe.</param>\n   /// <param name=\"callback\">The callback to handle this subject messages.</param>\n   public void Subscribe(string subject, OnMbMessageCallback callback)\n   {\n      lock (this.locker)\n      {\n            this.transport.Subscribe(subject, callback);\n            this.subjects.Add(subject);\n      }\n   }\n\n   /// <summary>\n   /// Removes all the existing subscriptions for the specified topic.\n   /// </summary>\n   /// <param name=\"subject\">The subject of the topic to subscribe.</param>\n   public void Unsubscribe(string subject)\n   {\n      lock (this.locker)\n      {\n            this.transport.Unsubscribe(subject);\n            this.subjects.Remove(subject);\n      }\n   }\n\n   #endregion\n\n   #region Region: Message Emiter Methods\n\n   /// <summary>\n   /// Publishes a message to the message bus (fire and forget).\n   /// </summary>\n   /// <param name=\"subject\">The target subject.</param>\n   /// <param name=\"message\">The message to send.</param>\n   /// <param name=\"datagroup\">The security DataGroup to associate the message with.</param>\n   public void PublishMessage(string subject, string message, string? datagroup = null)\n   {\n      this.transport.Publish(subject, message, datagroup);\n   }\n\n   /// <summary>\n   /// Sends a message and waits for a reply.\n   /// </summary>\n   /// <param name=\"subject\">The target subject.</param>\n   /// <param name=\"message\">The message to send.</param>\n   /// <param name=\"timeout\">Maximum time the service will wait for a reply (in milliseconds).</param>\n   /// <param name=\"datagroup\">The security DataGroup to associate the message with.</param>\n   /// <returns>The reply message or null in case of timeout.</returns>\n   public string? SendMessage(string subject, string message, int timeout = 60 * 1000, string? datagroup = null)\n   {\n      return this.transport.SendRequest(subject, message, timeout, datagroup)?.Data;\n   }\n\n   /// <summary>\n   /// Sends a reply message.\n   /// </summary>\n   /// <param name=\"sourceMessage\">The source messge to reply to.</param>\n   /// <param name=\"replyMessage\">The reply message to send.</param>\n   /// <param name=\"datagroup\">The security DataGroup to associate the message with.</param>\n   public void ReplyMessage(MbMessage sourceMessage, string replyMessage, string? datagroup = null)\n   {\n      this.transport.Reply(sourceMessage, replyMessage, datagroup);\n   }\n\n   #endregion\n\n   #region Region: Dispose pattern implementation\n\n   /// <summary>\n   /// Disposes the current class instance.\n   /// </summary>\n   public void Dispose()\n   {\n      this.Dispose(true);\n      GC.SuppressFinalize(this);\n   }\n\n   /// <summary>\n   /// Implements the disposing pattern.\n   /// </summary>\n   /// <param name=\"disposed\">If true is called by <see cref=\"Dispose\"/> method, otherwise by the class finalizer.</param>\n   protected virtual void Dispose(bool disposing)\n   {\n      if (disposing && this.transport.IsConnected)\n      {\n            //NOTE: all subscribed subjects should be unsubscribed before stopping the service.\n            foreach (var item in this.subjects)\n               this.Unsubscribe(item);\n\n            this.transport.Stop();\n      }\n   }\n\n   #endregion\n}MessageBusTransceiver"
          },
          {
            "topic": "3. Subscribing to Messages#",
            "code": "/// <summary>\n/// Subscribes listener to the message bus message.\n/// </summary>\n/// <param name=\"messagebusTransceiver\">The message bus client to use.</param>\nprivate static void AddMessageBusListener(MessageBusTransceiver messagebusTransceiver)\n{\n   //Subscribe to messages with given subject prefix\n   messagebusTransceiver.Subscribe($\"{SUBJECT_PREFIX}.>\", (subject, message) =>\n   {\n      //Message handler code\n      LogListenerMessages\n      (\n         $\"Message Received for subscription: '{subject}'\",\n         $\"Message ID: '{message?.Id}'\",\n         $\"Message Subject: '{message?.Subject}'\",\n         $\"Message Data: {message?.Data}\"\n      );\n\n      if (string.IsNullOrEmpty(message?.ReplySubject))\n      {\n         LogListenerMessages(\"No reply expected...\");\n      }\n      else\n      {\n         LogListenerMessages($\"Sending reply: '{OK}'.\");\n         messagebusTransceiver.ReplyMessage(message, OK);\n      }\n   });\n}"
          },
          {
            "topic": "4. Emitting messages#",
            "code": "/// <summary>\n/// Send message example (waits and validates the reply).\n/// </summary>\n/// <param name=\"transceiver\">The transport wrapper to use.</param>\nprivate static void TestSendAndWaitReply(MessageBusTransceiver transceiver)\n{\n   string message = \"HELLO LISTENER. GIVE US FEEDBACK.\";\n\n   string subject = SUBJECT_PREFIX + \".\" + nameof(TestSendAndWaitReply);\n   string replyMsg = transceiver.SendMessage(subject, message);\n\n   if (replyMsg == null)\n   {\n         LogEmitterMessages($\"TIMEOUT: did not got a reply...\");\n   }\n   else\n   {\n         LogEmitterMessages($\"Got a reply: '{replyMsg}'.\");\n   }\n}\n\n/// <summary>\n/// Publish a message (fire and forget, no response expected).\n/// </summary>\n/// <param name=\"transceiver\">The transport wrapper to use.</param>\nprivate static void TestPublishMessage(MessageBusTransceiver transceiver)\n{\n   string message = \"HELLO LISTENER. DO NOT REPLY.\";\n   LogEmitterMessages($\"Publishing message: '{message}'.\");\n\n   string subject = SUBJECT_PREFIX + \".\" + nameof(TestPublishMessage);\n   transceiver.PublishMessage(subject, message);\n}// Serialize object\nstring messageJSON = JsonConvert.SerializeObject(new\n{\n    Field1 = \"ABC\",\n    Field2 = 123,\n    Field3 = false,\n    Field4 = new\n    {\n        Field5 = \"XYZ\"\n    }\n});\ntransceiver.SendMessage(subject, messageJSON);"
          },
          {
            "topic": "5. Close Transport#",
            "code": "Cmf.MessageBus.Client.TransportClose()MessageBusTransceiverDispose()"
          }
        ],
        "links": [
          {
            "topic": "How to use CM MES Message Bus#",
            "links": [
              {
                "description": "How to use CM MES Message Bus# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#how-to-use-cm-mes-message-bus"
              }
            ]
          },
          {
            "topic": "Overview#",
            "links": [
              {
                "description": "Overview# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#overview"
              }
            ]
          },
          {
            "topic": "Prerequisites#",
            "links": [
              {
                "description": "Prerequisites# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#prerequisites"
              }
            ]
          },
          {
            "topic": "MES Installation#",
            "links": [
              {
                "description": "MES Installation# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#mes-installation"
              }
            ]
          },
          {
            "topic": "Setup a .NET Project#",
            "links": [
              {
                "description": "Setup a .NET Project# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#setup-a-net-project"
              },
              {
                "description": "Setup a .NET Project# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/message_bus_dependencies.png"
              },
              {
                "description": "Setup a .NET Project# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/message_bus_download_lbos.png"
              }
            ]
          },
          {
            "topic": "Configuration#",
            "links": [
              {
                "description": "Configuration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#configuration"
              }
            ]
          },
          {
            "topic": "Client Implementation#",
            "links": [
              {
                "description": "Client Implementation# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#client-implementation"
              }
            ]
          },
          {
            "topic": "1. Setup LBOs Configuration Factory#",
            "links": [
              {
                "description": "1. Setup LBOs Configuration Factory# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#1-setup-lbos-configuration-factory"
              },
              {
                "description": "1. Setup LBOs Configuration Factory# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#configuration"
              }
            ]
          },
          {
            "topic": "2. Load Message Bus Configuration#",
            "links": [
              {
                "description": "2. Load Message Bus Configuration# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#2-load-message-bus-configuration"
              }
            ]
          },
          {
            "topic": "3. Initialize Message Bus Transport#",
            "links": [
              {
                "description": "3. Initialize Message Bus Transport# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#3-initialize-message-bus-transport"
              }
            ]
          },
          {
            "topic": "3. Subscribing to Messages#",
            "links": [
              {
                "description": "3. Subscribing to Messages# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#3-subscribing-to-messages"
              },
              {
                "description": "3. Subscribing to Messages# (2)",
                "link": "https://help.criticalmanufacturing.com/userguide/administration/message_bus/#subject-names"
              }
            ]
          },
          {
            "topic": "4. Emitting messages#",
            "links": [
              {
                "description": "4. Emitting messages# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#4-emitting-messages"
              }
            ]
          },
          {
            "topic": "5. Close Transport#",
            "links": [
              {
                "description": "5. Close Transport# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#5-close-transport"
              }
            ]
          },
          {
            "topic": "Resources#",
            "links": [
              {
                "description": "Resources# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/messagebus/#resources"
              },
              {
                "description": "Resources# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/includes/messagebusclient/App.config"
              },
              {
                "description": "Resources# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/includes/messagebusclient/Program.cs"
              },
              {
                "description": "Resources# (4)",
                "link": "https://developer.criticalmanufacturing.com/business/includes/messagebusclient/MessageBusTransceiver.cs"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/messagebus/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Overriding the System Context Resolution Smart Tables",
        "definition": [
          {
            "topic": "Overriding the System Context Resolution Smart Tables#",
            "definition": "# Context resolutions are performed using system Smart Tables. However, it is possible to override this behavior and perform context resolutions using custom Smart Tables when necessary. "
          },
          {
            "topic": "Creating a Smart Table#",
            "definition": "# In order to override the system default context resolution, we need to create a custom Smart Table to be used for the resolution. However, in order for the system to be able to successfully use this custom table, its structure must follow some rules: It must contain the same output (i.e. non-key) columns as the system table being overridden (the same names, reference types and so forth) The key columns must be a sub-set of the key columns present on the system table being overridden, meaning that the system will only provide values for those default columns and therefore using additional ones will cause incorrect behaviors and\\or errors on the system It must contain the same output (i.e. non-key) columns as the system table being overridden (the same names, reference types and so forth) The key columns must be a sub-set of the key columns present on the system table being overridden, meaning that the system will only provide values for those default columns and therefore using additional ones will cause incorrect behaviors and\\or errors on the system It is possible, however, establish any Precedence rules without any restrictions. Info After the creation of the custom Smart Table execute the Generate Schema to generate the corresponding database table For more information about how to create a Smart Table please refer to 'Users Guide > General > Tables'. "
          },
          {
            "topic": "Making MES use the new Smart Table#",
            "definition": "# In order for the system to start using the custom Smart Table, follow these steps: Open the 'Administration' page group and click on the 'Tables' tab Find the Generic Table named ContextResolution and open it Add a new entry, setting the ResolutionType with the name of the context to be overridden and the ResolveSmartTableName with the name of the custom Smart Table (ignore the EntityType setting) Open the 'Administration' page group and click on the 'Tables' tab Find the Generic Table named ContextResolution and open it Add a new entry, setting the ResolutionType with the name of the context to be overridden and the ResolveSmartTableName with the name of the custom Smart Table (ignore the EntityType setting) "
          },
          {
            "topic": "Additional Information#",
            "definition": "# Although any context resolution tables, which comply with above restrictions, will be accepted by the system as a the new context resolution table, some of the specific GUI context resolution table editors may throw an error message. This is because those editors require additional columns to exist on the Smart Table which are used to filter which rows are related to the entity instance to be displayed. To avoid these errors, please follow these guidelines when creating override custom tables: (e.g. to override a Step related context resolution) - the custom Smart Table should include a key column named step that references the Step Entity Type (e.g. to override a Resource related context resolution) - the custom Smart Table should include a key column named Resource that references the Resource Entity Type (e.g. to override a Step related context resolution) - the custom Smart Table should include a key column named step that references the Step Entity Type (e.g. to override a Resource related context resolution) - the custom Smart Table should include a key column named Resource that references the Resource Entity Type Info If you really want your tables not to include the above columns, it is still possible to use the Smart Table editor (under 'Administration' page group > 'Tables') to edit your tables, since these editors do not require any specific columns to exist "
          },
          {
            "topic": "Exceptions#",
            "definition": "# There is, however, an exception to the above mentioned Smart Table structure restrictions: The PrintableDocument context resolutions. Although the system is shipped with PrintableDocument context resolutions for the Material and Area Entity Types, it is possible to define PrintableDocument context resolutions for any Entity Type. "
          },
          {
            "topic": "Smart Table Structure#",
            "definition": "# The Smart Tables created for PrintableDocument context resolutions (including tables to override the default system tables) must follow the below structure: It must have a output (i.e. non-key) column named PrintableDocument that references the PrintableDocument Entity Type The key columns may include a column named PrintableDocumentType that references a LookupValue of the LookupTable named 'PrintableDocumentType' You may create key columns to filter on the values of any property of the Entity Type to which the context resolution applies (e.g. Step). To do this the column name must be the same as the desired Entity Type property name and its Type and Reference Type must be the same as that property. The key columns may also include a column with the same name as the Entity Type to which the context resolution applies (e.g. Material) that references that Entity Type It must have a output (i.e. non-key) column named PrintableDocument that references the PrintableDocument Entity Type The key columns may include a column named PrintableDocumentType that references a LookupValue of the LookupTable named 'PrintableDocumentType' You may create key columns to filter on the values of any property of the Entity Type to which the context resolution applies (e.g. Step). To do this the column name must be the same as the desired Entity Type property name and its Type and Reference Type must be the same as that property. The key columns may also include a column with the same name as the Entity Type to which the context resolution applies (e.g. Material) that references that Entity Type "
          },
          {
            "topic": "ContextResolution GenericTable entry#",
            "definition": "# For PrintableDocument context resolutions, the entry on the 'ContextResolution' Generic Table must have the 'ResolutionType' value with the format PrintableDocumentResolution.<EntityTypeName>. "
          },
          {
            "topic": "Example#",
            "definition": "# A PrintableDocument context resolution table for the Step Entity Type, may have the following structure: Step: key column with ReferenceType=EntityType, Reference=Step and Property=Name or Property=Id Type: key column with ReferenceType=LookupValue, Reference=StepType PrintableDocumentType: key column with ReferenceType=LookupValue, Reference=PrintableDocumentType PrintableDocument: non-key column with ReferenceType=EntityType, Reference=PrintableDocument and Property=Name or Property=Id Step: key column with ReferenceType=EntityType, Reference=Step and Property=Name or Property=Id Type: key column with ReferenceType=LookupValue, Reference=StepType PrintableDocumentType: key column with ReferenceType=LookupValue, Reference=PrintableDocumentType PrintableDocument: non-key column with ReferenceType=EntityType, Reference=PrintableDocument and Property=Name or Property=Id And the entry on the 'ContextResolution' Generic Table should have: ResolutionType = PrintableDocumentResolution.Step ResolveSmartTableName = StepPrintableDocumentContexts (assuming that the Smart Table you created is named 'StepPrintableDocumentContexts') ResolutionType = PrintableDocumentResolution.Step ResolveSmartTableName = StepPrintableDocumentContexts (assuming that the Smart Table you created is named 'StepPrintableDocumentContexts') "
          }
        ],
        "code": [
          {
            "topic": "ContextResolution GenericTable entry#",
            "code": "PrintableDocumentResolution.<EntityTypeName>"
          }
        ],
        "links": [
          {
            "topic": "Overriding the System Context Resolution Smart Tables#",
            "links": [
              {
                "description": "Overriding the System Context Resolution Smart Tables# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#overriding-the-system-context-resolution-smart-tables"
              }
            ]
          },
          {
            "topic": "Creating a Smart Table#",
            "links": [
              {
                "description": "Creating a Smart Table# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#creating-a-smart-table"
              }
            ]
          },
          {
            "topic": "Making MES use the new Smart Table#",
            "links": [
              {
                "description": "Making MES use the new Smart Table# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#making-mes-use-the-new-smart-table"
              }
            ]
          },
          {
            "topic": "Additional Information#",
            "links": [
              {
                "description": "Additional Information# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#additional-information"
              }
            ]
          },
          {
            "topic": "Exceptions#",
            "links": [
              {
                "description": "Exceptions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#exceptions"
              }
            ]
          },
          {
            "topic": "Smart Table Structure#",
            "links": [
              {
                "description": "Smart Table Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#smart-table-structure"
              }
            ]
          },
          {
            "topic": "ContextResolution GenericTable entry#",
            "links": [
              {
                "description": "ContextResolution GenericTable entry# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#contextresolution-generictable-entry"
              }
            ]
          },
          {
            "topic": "Example#",
            "links": [
              {
                "description": "Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/#example"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating Custom Remote Export Plugins",
        "definition": [
          {
            "topic": "Creating Custom Remote Export Plugins#",
            "definition": "# A custom remote export plugin can be created in order to apply a custom format and transport for material ship and receive information. This can be useful when exchanging material information with a remote site that is running a different MES environment. A remote export plugin is a .NET Assembly that is developed using Visual Studio ⧉ and that is accepted by the Remote Import Export Gateway. Visual Studio ⧉ "
          },
          {
            "topic": "Creating the Custom Remote Export Plugin#",
            "definition": "# To create a custom remote export plugin, follow these steps: Create a new Visual Studio ⧉ project and add the assembly Cmf.Foundation.RemoteImportExport.Logic as a reference. Create a new Visual Studio ⧉ project and add the assembly Cmf.Foundation.RemoteImportExport.Logic as a reference. Visual Studio ⧉ Info The target assembly can be found in the folder where the Foundation service has been installed   Create a new class that implements the ISenderPluggIn interface. Create a new class that implements the ISenderPluggIn interface.   Build the project and move the generated assembly to the RemoteImportExport service path. Build the project and move the generated assembly to the RemoteImportExport service path. Info To check the service's path, go to Services under windows control panel, locate the 'Critical Manufacturing Remote Import Export Gateway' service and inspect the service properties. "
          },
          {
            "topic": "Using the Custom Remote Export Plugin#",
            "definition": "# To use the custom remote export plugin, follow these steps: Create or Edit a 'Site' business object. Set the RemoteExportPlugin with the assembly qualified name of the created plugin which implements the ISenderPlugin interface. Example: {MyRemoteExportPlugin.Class1, MyRemoteExportPlugin.dll} = {NamespaceName.className, AssemblyName} Create or Edit a 'Site' business object. Create or Edit a 'Site' business object. Set the RemoteExportPlugin with the assembly qualified name of the created plugin which implements the ISenderPlugin interface. Example: {MyRemoteExportPlugin.Class1, MyRemoteExportPlugin.dll} = {NamespaceName.className, AssemblyName} Set the RemoteExportPlugin with the assembly qualified name of the created plugin which implements the ISenderPlugin interface. Example: {MyRemoteExportPlugin.Class1, MyRemoteExportPlugin.dll} = {NamespaceName.className, AssemblyName}   The 'Site' business object has the required configurations to communicate to the remote facility so, in the Local and Remote systems, the shipping remote facility should have a 'Site' with the property RemoteExportAddress set to a valid address (e.g. net.tcp://[LOCAL-SERVER]:[LOCAL-PORT]/RemoteImportExport for the Local system and net.tcp://[REMOTE-SERVER]:[REMOTE-PORT]/RemoteImportExport for the Remote system). Configurations may differ when other systems as remote are used. In case the remote system is a deployed one, we need to make sure all the queues are set and the RemoteImportExport gateway is running. Take the configuration ports from the configuration files in the gateway or ask an Administrator if you don’t have permissions. For more information about 'Site' business object please refer to UserGuide / Business Data / Site ⧉. UserGuide / Business Data / Site ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Creating Custom Remote Export Plugins#",
            "links": [
              {
                "description": "Creating Custom Remote Export Plugins# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/remoteexportplugins/#creating-custom-remote-export-plugins"
              },
              {
                "description": "Creating Custom Remote Export Plugins# (2)",
                "link": "https://www.visualstudio.com/"
              }
            ]
          },
          {
            "topic": "Creating the Custom Remote Export Plugin#",
            "links": [
              {
                "description": "Creating the Custom Remote Export Plugin# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/remoteexportplugins/#creating-the-custom-remote-export-plugin"
              },
              {
                "description": "Creating the Custom Remote Export Plugin# (2)",
                "link": "https://www.visualstudio.com/"
              },
              {
                "description": "Creating the Custom Remote Export Plugin# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/RemoteExportReference.gif"
              },
              {
                "description": "Creating the Custom Remote Export Plugin# (4)",
                "link": "https://developer.criticalmanufacturing.com/business/images/RemoteExportInterface.gif"
              }
            ]
          },
          {
            "topic": "Using the Custom Remote Export Plugin#",
            "links": [
              {
                "description": "Using the Custom Remote Export Plugin# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/remoteexportplugins/#using-the-custom-remote-export-plugin"
              },
              {
                "description": "Using the Custom Remote Export Plugin# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/RemoteExportSite.gif"
              },
              {
                "description": "Using the Custom Remote Export Plugin# (3)",
                "link": "http://help.criticalmanufacturing.com/userguide/business-data/site/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/remoteexportplugins/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "Business Tier#",
        "links": [
          {
            "description": "Business Tier# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#business-tier"
          }
        ]
      },
      {
        "topic": "Development Tools#",
        "links": [
          {
            "description": "Development Tools# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#development-tools"
          },
          {
            "description": "Development Tools# (2)",
            "link": "http://www.microsoft.com/vstudio"
          }
        ]
      },
      {
        "topic": "Development Skills#",
        "links": [
          {
            "description": "Development Skills# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#development-skills"
          }
        ]
      },
      {
        "topic": "Extensibility Options#",
        "links": [
          {
            "description": "Extensibility Options# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#extensibility-options"
          },
          {
            "description": "Extensibility Options# (2)",
            "link": "https://developer.criticalmanufacturing.com/business/remoteexportplugins/"
          },
          {
            "description": "Extensibility Options# (3)",
            "link": "https://developer.criticalmanufacturing.com/business/createdeeactions/"
          },
          {
            "description": "Extensibility Options# (4)",
            "link": "https://developer.criticalmanufacturing.com/business/customsortrules/"
          },
          {
            "description": "Extensibility Options# (5)",
            "link": "https://developer.criticalmanufacturing.com/business/customentitytypes/"
          },
          {
            "description": "Extensibility Options# (6)",
            "link": "https://developer.criticalmanufacturing.com/business/customspcrules/"
          },
          {
            "description": "Extensibility Options# (7)",
            "link": "https://developer.criticalmanufacturing.com/business/createorchestration/"
          },
          {
            "description": "Extensibility Options# (8)",
            "link": "https://developer.criticalmanufacturing.com/business/createservices/"
          },
          {
            "description": "Extensibility Options# (9)",
            "link": "https://developer.criticalmanufacturing.com/business/createstaticactions/"
          },
          {
            "description": "Extensibility Options# (10)",
            "link": "https://developer.criticalmanufacturing.com/business/createtables/"
          }
        ]
      },
      {
        "topic": "BI Cards#",
        "links": [
          {
            "description": "BI Cards# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#bi-cards"
          },
          {
            "description": "BI Cards# (2)",
            "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/"
          },
          {
            "description": "BI Cards# (3)",
            "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/"
          }
        ]
      },
      {
        "topic": "Additional Sections#",
        "links": [
          {
            "description": "Additional Sections# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/#additional-sections"
          },
          {
            "description": "Additional Sections# (2)",
            "link": "https://developer.criticalmanufacturing.com/business/exportrelations/"
          },
          {
            "description": "Additional Sections# (3)",
            "link": "https://developer.criticalmanufacturing.com/business/overridecontextresolutionsmarttables/"
          },
          {
            "description": "Additional Sections# (4)",
            "link": "https://developer.criticalmanufacturing.com/business/lightbusinessobjects/"
          },
          {
            "description": "Additional Sections# (5)",
            "link": "https://developer.criticalmanufacturing.com/business/bapireturnhandler/"
          },
          {
            "description": "Additional Sections# (6)",
            "link": "https://developer.criticalmanufacturing.com/business/invokemeshttpapi/"
          },
          {
            "description": "Additional Sections# (7)",
            "link": "https://developer.criticalmanufacturing.com/business/enableelasticapm/"
          },
          {
            "description": "Additional Sections# (8)",
            "link": "https://developer.criticalmanufacturing.com/business/executeparallelcode/"
          },
          {
            "description": "Additional Sections# (9)",
            "link": "https://developer.criticalmanufacturing.com/business/messagebus/"
          }
        ]
      }
    ]
  },
  {
    "topic": "BI Cards",
    "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/",
    "flag": true,
    "definition": [
      {
        "topic": "BI Cards#",
        "definition": "# Technical Reference - explains the architecture and the input and output data formats that are used during calculation. Tutorial - contains a step-by-step example of how to setup a bi card. Technical Reference - explains the architecture and the input and output data formats that are used during calculation. Technical Reference Tutorial - contains a step-by-step example of how to setup a bi card. Tutorial "
      }
    ],
    "submodulos": [
      {
        "topic": "Tutorial",
        "definition": [
          {
            "topic": "Tutorial#",
            "definition": "# As an example, the following tutorial will show how to create a new KPI to monitor the number of materials in a step for a given period. We will create 3 dimensions during this exercise: Current Shift; Current Day and Last 7 Days which will represent the number of materials that entered a step (and remained in it) since the specific threshold accordingly. "
          },
          {
            "topic": "New KPI named #Materials In Step#",
            "definition": "# The following picture depicts the details to create the desired dynamic KPI, please notice the selection of the entity type Step, the parameter of type “long” (i.e. this KPI will output numeric, non-floating values), the type “Minimum” (i.e. the smaller the value, the better) and default target thresholds.   "
          },
          {
            "topic": "KPI Dimensions#",
            "definition": "# Below its shown how to create the previously described dimensions. "
          },
          {
            "topic": "Current Day#",
            "definition": "# To create a dimension users need to define the name of the dimension, it’s value type (DataValue means a single value shall be returned) the source (in this case OperationalDataStore), the actual command to run (the SQL statement) and the default visualization (although users can change it when defining BI Cards afterwards).   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "Last 7 Days#",
            "definition": "# This dimension has its own SQL statement and is defined as a DataSeries, i.e. it will output multiple values (in this case the count by day). Also, the default visualization is the bar chart instead of a “data value”.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "Current Shift#",
            "definition": "# This dimension is very similar to the “Current Day”, the main difference is that it will only count the materials that arrived and remained in the step since the start of the shift.   Note that the SQL statement should respect the output columns as described in the Dynamic KPIs. "
          },
          {
            "topic": "KPI Timeframes#",
            "definition": "# Timeframes allow the definition of distinct target values depending on the specific step, dimension, and timeframe. In the below example you can see specific targets for the step Mixing and dimension “Current Day”:   Imagine on the next week there will be a peak of production, a power user could set here another timeframe within the next week dates accordingly as shown below:   "
          },
          {
            "topic": "New BI Card#",
            "definition": "# Start by adding a new “BI Card” into a UIPage, then on the settings you can setup the layout and details of the BI Card. "
          },
          {
            "topic": "General Step#",
            "definition": "#   "
          },
          {
            "topic": "Setup Step#",
            "definition": "#   "
          },
          {
            "topic": "Layout Step#",
            "definition": "# Here users can select the KPIs and dimensions they want to see in the BI Card, as well as the chart type and name to show in the header of the chart widget. Note Values shown are actual values returned from the database.   "
          },
          {
            "topic": "BI Card - Duplicate Option#",
            "definition": "# To easy the setup of multiple similar BI Cards for many entities, users can use the “Duplicate” option:   Then users can change the entity name (in this example the step changed from Mixing to Cooling) and in the end you shall have something like the following UI Page which could, for instance, be continuously shown, and automatically refreshed, in a screen monitor in a production line:   "
          },
          {
            "topic": "BI Card on Fullscreen#",
            "definition": "#   "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Tutorial#",
            "links": [
              {
                "description": "Tutorial# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#tutorial"
              }
            ]
          },
          {
            "topic": "New KPI named #Materials In Step#",
            "links": [
              {
                "description": "New KPI named #Materials In Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-kpi-named-materials-in-step"
              },
              {
                "description": "New KPI named #Materials In Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image7.png"
              }
            ]
          },
          {
            "topic": "KPI Dimensions#",
            "links": [
              {
                "description": "KPI Dimensions# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-dimensions"
              }
            ]
          },
          {
            "topic": "Current Day#",
            "links": [
              {
                "description": "Current Day# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-day"
              },
              {
                "description": "Current Day# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image8.png"
              }
            ]
          },
          {
            "topic": "Last 7 Days#",
            "links": [
              {
                "description": "Last 7 Days# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#last-7-days"
              },
              {
                "description": "Last 7 Days# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image9.png"
              }
            ]
          },
          {
            "topic": "Current Shift#",
            "links": [
              {
                "description": "Current Shift# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#current-shift"
              },
              {
                "description": "Current Shift# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image10.png"
              }
            ]
          },
          {
            "topic": "KPI Timeframes#",
            "links": [
              {
                "description": "KPI Timeframes# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#kpi-timeframes"
              },
              {
                "description": "KPI Timeframes# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image11.png"
              },
              {
                "description": "KPI Timeframes# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image12.png"
              }
            ]
          },
          {
            "topic": "New BI Card#",
            "links": [
              {
                "description": "New BI Card# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#new-bi-card"
              }
            ]
          },
          {
            "topic": "General Step#",
            "links": [
              {
                "description": "General Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#general-step"
              },
              {
                "description": "General Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image13.png"
              }
            ]
          },
          {
            "topic": "Setup Step#",
            "links": [
              {
                "description": "Setup Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#setup-step"
              },
              {
                "description": "Setup Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image14.png"
              }
            ]
          },
          {
            "topic": "Layout Step#",
            "links": [
              {
                "description": "Layout Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#layout-step"
              },
              {
                "description": "Layout Step# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image15.png"
              }
            ]
          },
          {
            "topic": "BI Card - Duplicate Option#",
            "links": [
              {
                "description": "BI Card - Duplicate Option# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-duplicate-option"
              },
              {
                "description": "BI Card - Duplicate Option# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image16.png"
              },
              {
                "description": "BI Card - Duplicate Option# (3)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image17.png"
              }
            ]
          },
          {
            "topic": "BI Card on Fullscreen#",
            "links": [
              {
                "description": "BI Card on Fullscreen# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/#bi-card-on-fullscreen"
              },
              {
                "description": "BI Card on Fullscreen# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/image18.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Technical Reference",
        "definition": [
          {
            "topic": "Technical Reference#",
            "definition": "# The KPIs definitions will reside in the MES database as KPI objects. Using the UI Page designer, it will be possible to create widgets that reference the different available KPIs. During runtime, the GUIs will request the application server to retrieve the value of the KPIs. A special service (GetKPIValues) will abstract and implement the logic required to calculate and return the needed KPI values.   Each widget rendering a kpi will issue a request to GetKPIValues, passing it information about the associated Entity Type and about the KPI. The API is then responsible for fetching the data from the configured data source, optionally preparing the required parameters according to the datasource requirements, perform system and user defined calculations on that data and return a result suitable for being rendered in the widget. "
          },
          {
            "topic": "KPI General Output Data Structure#",
            "definition": "# To produce uniform results, the KPI value calculation output result must follow a preestablished column-value data structure convention. This structure applies to both static and dynamic KPIs. Afterwards static and dynamic KPIs extend this data structure by adding additional columns (notice the last line on the following table). Table: KPI General Output Data Structure "
          },
          {
            "topic": "Static KPIs#",
            "definition": "# The output data structure for static KPIs is established from the linked KPI timeframe and is as follows: Table: Static KPIs "
          },
          {
            "topic": "Dynamic KPIs#",
            "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked to a Business Rule and will be written in C#, they can be made of SQL Statements or MDX Statements targeting a given data source. In both cases the output data structure for dynamic KPIs established from the target KPI as well from the execution run-time and/or the resolved KPI timeframe and is as follows: Table: Dynamic KPIs "
          },
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "definition": "# The dynamic KPI value calculation can be achieved by invoking a Rule that is linked with a business rule (internally referred as DEE action). The business rule is written in C# and has as input\\output a list of key-value pair parameters as follows: https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8 ⧉ Table: Dynamic KPIs calculated with Rules "
          },
          {
            "topic": "Code Example#",
            "definition": "# An example of a business rule code is listed below: "
          },
          {
            "topic": "Dynamic KPIs calculated SQL Statements#",
            "definition": "# The SQL statements can target the ODS, the DWH and the AS databases. "
          },
          {
            "topic": "Predefined Parameters#",
            "definition": "# The system provides a set predefined parameters that can be used to compose the ODS, the DWH or the AS SQL statements and hence aid in the KPI value calculation. Table: Predefined parameters The target Entity instance Calendar (and respective time zone) is evaluated by calling the business rule EvaluateCalendarForEntity with the result being as follows: Table: Entity instance example "
          },
          {
            "topic": "Manifests#",
            "definition": "# The dynamic KPIs that target the Analytics datastore ( source type = ‘AS’ ) require the SQL statements to have a special header (manifest) in order to properly handle the required input output parameters data and format. The manifest is framed inside a TSQL block comment (/* */) and has the following format: Where the ‘@{?}’ pattern refers to input parameters and the *@Output{?}_Column* pattern refers to output parameters. The manifest token description is as follows: https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017 ⧉ https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef ⧉ Table: Manifests "
          },
          {
            "topic": "Example#",
            "definition": "# Below, an example of a SQL Statement based calculation. Consider a dynamic KPI, with source type = ‘AS’ (analysis services), to infer the ‘Volume In per Resource for Last 7 Days’ for which the > MDX statement (specific language to query cube databases) "
          },
          {
            "topic": "Input parameters#",
            "definition": "# Table: Input parameters example "
          },
          {
            "topic": "Output parameters#",
            "definition": "# Table: Output parameters example "
          },
          {
            "topic": "The MDX statement#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "code": "{KPI}{KPIDimension}{<entity instance>}{NgpDataSet}"
          },
          {
            "topic": "Code Example#",
            "code": "UseReference(\"Cmf.Foundation.Common.dll\", \"\");\nUseReference(\"Cmf.Navigo.BusinessObjects.dll\", \"Cmf.Navigo.BusinessObjects\");\n\nDictionary<string, object> Output = new Dictionary<string,object>();\n\nif (Input == null)\n{\n    Input = new Dictionary<string, object>();\n}\n\nif (!Input.ContainsKey(\"KPI\") || Input[\"KPI\"] == null || !(Input[\"KPI\"] is IKPI))\n{\n    throw new ArgumentNullCmfException(\"KPI\");\n}\n\nIKPI kpi = Input[\"KPI\"] as IKPI;\n\nif(kpi.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPI\");\n}\n\nkpi.Load();\n\nif (!Input.ContainsKey(\"KPIDimension\") || Input[\"KPIDimension\"] == null || !(Input[\"KPIDimension\"] is IKPIDimension))\n{\n    throw new ArgumentNullCmfException(\"KPIDimension\");\n}\n\nIKPIDimension kpiDimension = Input[\"KPIDimension\"] as IKPIDimension;\n\nif(kpiDimension.Id <= 0)\n{\n    throw new MissingMandatoryPropertyCmfException(\"Id\", \"KPIDimension\");\n}\n\nkpiDimension.Load();\n\n// initialize DataTable\nDataTable dataTable = new DataTable(\"DataTableResult\");\n\n// add mandatory structure (columns)\ndataTable.Columns.Add(\"Category\");\ndataTable.Columns.Add(\"EntityName\");\ndataTable.Columns.Add(\"Name\");\ndataTable.Columns.Add(\"Value\");\n\nCollection<IEntity> objects = null;\n\nif (Input.ContainsKey(\"Objects\") && Input[\"Objects\"] != null && Input[\"Objects\"] is Collection<IEntity>)\n{\n    objects = Input[\"Objects\"] as Collection<IEntity>;\n    foreach (IEntity entity in objects)\n    {\n    /*\n    TODO: implement KPI value logic calculation per Entity instance\n    */\n    }\n}\n\nDataSet dataSet = new DataSet(\"DataSetResult\");\ndataSet.Tables.Add(dataTable);\n\n// create output\nOutput.Add(\"Result\", NgpDataSet.FromDataSet(dataSet));\n\n// return output\nreturn Output;"
          },
          {
            "topic": "Predefined Parameters#",
            "code": "EvaluateCalendarForEntity"
          },
          {
            "topic": "Manifests#",
            "code": "/* *//*\n\n@{parameter-name} | {parameter-sql-data-type} | {parameter-net-string-format}\n@Output_{parameter-name}_Column | {parameter-column-name}\n\n*/*@Output{?}_Column*"
          },
          {
            "topic": "The MDX statement#",
            "code": "/*\n\n        @CurrentDay | Date | \"yyyy-MM-dd\"\n        @EntityName | String |\n\n        @Output_NAME_Column | \"[In Process Date].[CalendarDay].[Calendar Day].[MEMBER_CAPTION]\"\n    @Output_VALUE_Column | \"[Measures].[Value]\"\n\n        */\n\n        WITH\n\n        MEMBER [Measures].[Value] AS\n            IIF(ISEMPTY([Measures].[In Process Primary Quantity]) , 0 , [Measures].[In Process Primary Quantity])\n        + IIF(ISEMPTY([Measures].[In Process Sub Materials Primary Quantity]) , 0 ,[Measures].[In Process Sub Materials Primary Quantity])\n\n    MEMBER [Measures].[DisplayValue] AS\n            'Round([Measures].[Value],1)'\n            SELECT\n                { [Measures].[Value] , [Measures].[DisplayValue] } ON COLUMNS, NON EMPTY ([In Process Date].[Calendar Day].ALLMEMBERS) ON ROWS\n            FROM ( SELECT ( { [Resource].[Resource Name].&[@EntityName] } ) ON COLUMNS\n            FROM ( SELECT ( { [Material Hierarchy].[Hierarchy].&[TopMost Material] } ) ON COLUMNS\n            FROM ( SELECT ( [In Process Date].[Calendar Day].&[@CurrentDay].Lag(6) : [In Process Date].[Calendar Day].&[@CurrentDay] ) ON COLUMNS\n            FROM [Material] )))"
          }
        ],
        "links": [
          {
            "topic": "Technical Reference#",
            "links": [
              {
                "description": "Technical Reference# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#technical-reference"
              },
              {
                "description": "Technical Reference# (2)",
                "link": "https://developer.criticalmanufacturing.com/business/images/bicards_kpi_calculation_architecture.png"
              }
            ]
          },
          {
            "topic": "KPI General Output Data Structure#",
            "links": [
              {
                "description": "KPI General Output Data Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#kpi-general-output-data-structure"
              }
            ]
          },
          {
            "topic": "Static KPIs#",
            "links": [
              {
                "description": "Static KPIs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#static-kpis"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs#",
            "links": [
              {
                "description": "Dynamic KPIs# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs calculated with Rules#",
            "links": [
              {
                "description": "Dynamic KPIs calculated with Rules# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-with-rules"
              },
              {
                "description": "Dynamic KPIs calculated with Rules# (2)",
                "link": "https://docs.microsoft.com/en-us/dotnet/api/system.data.dataset?view=netframework-4.8"
              }
            ]
          },
          {
            "topic": "Code Example#",
            "links": [
              {
                "description": "Code Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#code-example"
              }
            ]
          },
          {
            "topic": "Dynamic KPIs calculated SQL Statements#",
            "links": [
              {
                "description": "Dynamic KPIs calculated SQL Statements# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#dynamic-kpis-calculated-sql-statements"
              }
            ]
          },
          {
            "topic": "Predefined Parameters#",
            "links": [
              {
                "description": "Predefined Parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#predefined-parameters"
              }
            ]
          },
          {
            "topic": "Manifests#",
            "links": [
              {
                "description": "Manifests# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#manifests"
              },
              {
                "description": "Manifests# (2)",
                "link": "https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql?view=sql-server-2017"
              },
              {
                "description": "Manifests# (3)",
                "link": "https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#stringRef"
              }
            ]
          },
          {
            "topic": "Example#",
            "links": [
              {
                "description": "Example# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#example"
              }
            ]
          },
          {
            "topic": "Input parameters#",
            "links": [
              {
                "description": "Input parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#input-parameters"
              }
            ]
          },
          {
            "topic": "Output parameters#",
            "links": [
              {
                "description": "Output parameters# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#output-parameters"
              }
            ]
          },
          {
            "topic": "The MDX statement#",
            "links": [
              {
                "description": "The MDX statement# (1)",
                "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/#the-mdx-statement"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "BI Cards#",
        "links": [
          {
            "description": "BI Cards# (1)",
            "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/#bi-cards"
          },
          {
            "description": "BI Cards# (2)",
            "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/technical_reference/"
          },
          {
            "description": "BI Cards# (3)",
            "link": "https://developer.criticalmanufacturing.com/business/bicardstutorial/bicards_tutorial/"
          }
        ]
      }
    ]
  },
  {
    "topic": "Data Platform",
    "href": "https://developer.criticalmanufacturing.com/dataplatform/",
    "flag": true,
    "definition": [
      {
        "topic": "Data Platform#",
        "definition": "# The Critical Manufacturing MES IoT Data Platform provides a standard, scalable and functionally rich data architecture and infrastructure to store, monitor and analyze equipment and sensor data, applicable for every MES Implementation project. Sending Telemetry to DataPlatform Grafana Sending Telemetry to DataPlatform Sending Telemetry to DataPlatform Grafana Grafana "
      }
    ],
    "submodulos": [
      {
        "topic": "Sending Telemetry to DataPlatform",
        "definition": [
          {
            "topic": "Sending Telemetry to DataPlatform#",
            "definition": "# This how-to guide describes how to send event messages to DataPlatform, exemplified via simulated data messages. "
          },
          {
            "topic": "Prerequisites#",
            "definition": "# DataPlatform Module. Node.js or C# installed. Personal Access Token. DataPlatform Module. Node.js or C# installed. Personal Access Token. For more information on how to create a Personal Access Token see the Users ⧉ section of the user guide. Users ⧉ "
          },
          {
            "topic": "Event, Schema and Message Structure#",
            "definition": "# For DataPlatform to be able to parse the received events (messages) it must know the message structure, for this effect we begin by creating an Event Definition. The message structure (or Schema) indicates the fields to expect and their types. Fields can be composed of many different first level types of data, such as strings, integers and even more complex types such as binary files, or can be composed of other Schemas, allowing for nested properties. By design the first level properties of an Event Definition are represented by an unshared (internal) Schema. As their name indicates such Schemas are Event Definition specific. Shared Schemas to be added are manually created before the EventDefinition they are to be added to.   When sending a data message the DataPlatform endpoint it is expected to contain an AppProperties property which contains three properties: EventDefinition: The EventDefinition which contains the Schema for this message's data. EventTime: The UTC time of when the message was initially composed. ApplicationName: The application, or potentially device, which generated this message. EventDefinition: The EventDefinition which contains the Schema for this message's data. EventTime: The UTC time of when the message was initially composed. ApplicationName: The application, or potentially device, which generated this message. In this specific example the complete Schema of our data is represented by two top level properties of type string (Equipment and Material) and one Schema property (MeasurementData). The MeasurementData Schema is composed of five properties, two of type integer and three of type double: Temp, Pressure, Energy, Humidity and Power. This message can be sent to the DataPlatform endpoint, with authentication information provided. This authentication is done via the username field of the basic access authentication method of HTTP. After the message has been parsed through the endpoint it is routed through the configured Event Handler with added properties such as EnqueueTime which indicates the time at which the DataPlatform received and processed the message, and the user whose PAT was used when authenticating the POST request. "
          },
          {
            "topic": "Example program in Javascript#",
            "definition": "# "
          },
          {
            "topic": "Example program in CSharp#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Event, Schema and Message Structure#",
            "code": "\"AppProperties\": {\n  \"EventDefinition\": \"EquipmentData\",\n  \"EventTime\": \"2020-09-29T16:51:12.374Z\",\n  \"ApplicationName\": \"ConnectIoTSimulator\"\n },\"Equipment\": \"METER-15\",\n \"Material\": \"PT20884.20\",\n \"MeasurementData\": {\n  \"Temp\": 75,\n  \"Pressure\": 69.007,\n  \"Energy\": 18,\n  \"Humidity\": 39.281,\n  \"Power\": 39.281\n }{\n \"SysProperties\": {\n  \"EventId\": \"1601398272203914311\",\n  \"EnqueueTime\": \"2020-09-29T16:51:12.370Z\",\n  \"UserName\": \"DOMAIN\\\\DATAADMIN\",\n  \"HostName\": \"192.168.201.254\",\n  \"IPAddress\": \"192.168.201.254\"\n },\n \"AppProperties\": {\n  \"EventDefinition\": \"EquipmentData\",\n  \"EventTime\": \"2020-09-29T17:51:12.374+01:00\",\n  \"ApplicationName\": \"ConnectIoTSimulator\",\n  \"ApplicationContext\": null\n },\n \"Data\": {\n  \"Equipment\": \"METER-15\",\n  \"Material\": \"PT20884.20\",\n  \"MeasurementData\": {\n   \"Temp\": 75,\n   \"Pressure\": 69.007,\n   \"Energy\": 18,\n   \"Humidity\": 39.281,\n   \"Power\": 39.281\n  }\n }\n}"
          },
          {
            "topic": "Example program in Javascript#",
            "code": "// use require('https') if connecting through https\nconst https = require('http')\n\n// paste your PAT in the username field\nconst username = 'eyJhbGciOi...'\n\nconst options = {\n    hostname: 'dpserver.domain.com',\n    port: 10082,\n    path: '/api/DataPlatform/PostIoTEvent',\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': 'Basic ' + username + ':'\n    },\n    rejectUnauthorized: false,\n    requestCert: true,\n    agent: false\n}\n\nvar Event = {\n    AppProperties: {\n        EventDefinition: \"EquipmentData\",\n        EventTime: new Date(),\n        ApplicationName: \"ConnectIoTSimulator\",\n    },\n    Data: {\n        Equipment : \"METER-15\",\n        Material : \"PT20884.20\",\n        MeasurementData:\n        {\n            Temp: 75,\n            Pressure: 69.007,\n            Energy: 18,\n            Humidity: 39.281,\n            Power: 39.281,\n        }\n    }\n}\n\nconst data = JSON.stringify(Event)\n\nconsole.log(data)\n\nconst req = https.request(options, (res) => {\n    console.log(`statusCode: ${res.statusCode}`)\n    res.on('data', (d) => {process.stdout.write(d)})\n})\n\nreq.on('error', (error) => {\nconsole.error(error)\n})\n\nreq.write(data)\nreq.end()"
          },
          {
            "topic": "Example program in CSharp#",
            "code": "using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PostEventsExample\n{\n class Program\n {\n  static async Task Main()\n  {\n    HttpClient httpClient = new HttpClient();\n\n    // Paste your PAT in the username field\n    string username = \"eyJhbGciOi...\";\n    string password = \"\";\n\n    byte[] authToken = Encoding.ASCII.GetBytes($\"{username}:{password}\");\n\n    AuthenticationHeaderValue authenticationHeaderValue = new AuthenticationHeaderValue(\"Basic\", Convert.ToBase64String(authToken));\n\n    httpClient.DefaultRequestHeaders.Authorization = authenticationHeaderValue;\n\n    string uri = \"http://dpserver.domain.com:10082/api/DataPlatform/PostIoTEvent\";\n\n    string date = DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ss.fffZ\");\n\n    string data =\n                @\"\n             {\n                    \"\"AppProperties\"\":\n                    {\n                        \"\"EventDefinition\"\": \"\"EquipmentData\"\",\n                        \"\"EventTime\"\": \"\"@EventTime\"\",\n                        \"\"ApplicationName\"\": \"\"ConnectIoTSimulatorDotnet\"\"\n                    },\n                    \"\"Data\"\":\n                    {\n                        \"\"Equipment\"\": \"\"METER-15\"\",\n                        \"\"Material\"\": \"\"PT20884.20\"\",\n                        \"\"MeasurementData\"\":\n                        {\n                            \"\"Temp\"\": 75,\n                            \"\"Pressure\"\": 69.007,\n                            \"\"Energy\"\": 18,\n                            \"\"Humidity\"\": 39.281,\n                            \"\"Power\"\": 39.281\n                        }\n                    }\n                }\";\n\n    data = data.Replace(\"@EventTime\", date);\n\n    HttpContent httpContent = new StringContent(data, Encoding.UTF8, \"application/json\");\n\n    HttpResponseMessage httpResponseMessage = await httpClient.PostAsync(uri, httpContent);\n  }\n }\n}"
          }
        ],
        "links": [
          {
            "topic": "Sending Telemetry to DataPlatform#",
            "links": [
              {
                "description": "Sending Telemetry to DataPlatform# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/#sending-telemetry-to-dataplatform"
              }
            ]
          },
          {
            "topic": "Prerequisites#",
            "links": [
              {
                "description": "Prerequisites# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/#prerequisites"
              },
              {
                "description": "Prerequisites# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/security/users#creatingaccesstokensforauser/"
              }
            ]
          },
          {
            "topic": "Event, Schema and Message Structure#",
            "links": [
              {
                "description": "Event, Schema and Message Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/#event-schema-and-message-structure"
              },
              {
                "description": "Event, Schema and Message Structure# (2)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/createEventDef2.png"
              }
            ]
          },
          {
            "topic": "Example program in Javascript#",
            "links": [
              {
                "description": "Example program in Javascript# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/#example-program-in-javascript"
              }
            ]
          },
          {
            "topic": "Example program in CSharp#",
            "links": [
              {
                "description": "Example program in CSharp# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/#example-program-in-csharp"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Grafana\n\n\n\n\n\n\n\n\n\nGrafana\n\n\n\n\n\nData Model\n\n\n\n\n\n\nCreating a Box Plot in Grafana\n\n\n\n\n\n\nCreating a Pareto Chart in Grafana\n\n\n\n\n\n\nCreating a Stacked Bar in Grafana",
        "definition": [
          {
            "topic": "Grafana#",
            "definition": "# This section shows you how to work with Grafana to create different types of charts along with a data model to support them. Creating a Data Model for Grafana Creating a Box Plot in Grafana Creating a Pareto Chart in Grafana Creating a Stacked Bar in Grafana Creating a Data Model for Grafana Creating a Data Model for Grafana Creating a Box Plot in Grafana Creating a Box Plot in Grafana Creating a Pareto Chart in Grafana Creating a Pareto Chart in Grafana Creating a Stacked Bar in Grafana Creating a Stacked Bar in Grafana "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Grafana#",
            "links": [
              {
                "description": "Grafana# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/#grafana"
              },
              {
                "description": "Grafana# (2)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel"
              },
              {
                "description": "Grafana# (3)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot"
              },
              {
                "description": "Grafana# (4)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto"
              },
              {
                "description": "Grafana# (5)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Data Model",
            "definition": [
              {
                "topic": "Creating a Data Model for Grafana#",
                "definition": "# "
              },
              {
                "topic": "Small Example (time, value, metric)#",
                "definition": "# This page includes the scripts to create and populate a generic data table that holds a timeline set of events. This table is then populated this table with random data This created 350k rows that allowed us to test and build our charts. "
              },
              {
                "topic": "ASM Demo Example (time, value, metric)#",
                "definition": "# We required a new, more complete data table to collect information to demonstrate a new set of charts, in order to do that, we created a new table and created a new script to generate random data to create the information. With this table we will store the equipment, its state change, the reason for the state change (only filled in the case of a unscheduled down), the time at the state, a timeline and a recipe (this is just demo) To generate the dummy data, we developed the following script "
              }
            ],
            "code": [
              {
                "topic": "Small Example (time, value, metric)#",
                "code": "CREATE TABLE [dbo].[T_TestingWithNumericValues](\n    [time] [datetime] NULL,\n    [value] [decimal](18, 0) NULL,\n    [metric] [nvarchar](50) NULL\n) ON [PRIMARY]\nGOTRUNCATE TABLE [dbo].[T_TestingWithNumericValues]\nDECLARE @counter INT \n\nSET @counter = 0 \n\nWHILE @counter < 50000\nBEGIN \nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(50-5)\n           ,'burn')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(150-20)\n           ,'scratched')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(10-1)\n           ,'water damage')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(60-10)\n           ,'eletric damage')\n\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(140-10)\n           ,'contamination')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(80-2)\n           ,'stress')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(40-2)\n           ,'short')\n    SET @counter = @counter + 1\nEND"
              },
              {
                "topic": "ASM Demo Example (time, value, metric)#",
                "code": "CREATE TABLE [dbo].[T_EquipmentStateChange](\n    [Equipment] [nvarchar](150) NULL,\n    [State] [nvarchar](150) NULL,\n    [Reason] [nvarchar](150) NULL,\n    [TimeAtState] [decimal](18, 6) NULL,\n    [Time] [datetime] NULL,\n    [Recipe] [nvarchar](150) NULL\n) ON [PRIMARY]TRUNCATE TABLE [dbo].[T_EquipmentStateChange]\n\n/* Equipment Table - Create and insert data */\n\nDECLARE @EquipmentTable TABLE(EquipmentName NVARCHAR(150), RowNumber INT)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('Printer', 1)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SPI', 2)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX1', 3)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX2', 4)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX4', 5)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('Reflow', 6)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('AOI', 7)\n\n\n/* States Table - Create and insert weighted data */\n\nDECLARE @StateTable TABLE (StateName NVARCHAR(150), RowNumber INT)\n\nDECLARE @i INT = 0\nDECLARE @j INT = 0\n\nWHILE @i <= 10\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Waiting', @i)\n    SET @i += 1\nEND\n\nWHILE @j <= 120\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Work', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Blocked', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 3\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Unsch. Down', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\n/* Recipe Table - Create and insert data */\n\nDECLARE @RecipeTable TABLE (RecipeName NVARCHAR(150), RowNumber INT)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe A',1)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Ideal Recipe B',2)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe B',3)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe C',4)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Actual Recipe C',5)\n\n/* Reason Table - Create and insert weighted data */\n\nDECLARE @ReasonTable TABLE (ReasonName NVARCHAR(150), RowNumber INT)\n\nSET @i = 0\nSET @j = 0\n\nWHILE @i <= 50\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Assist', @i)\n    SET @i += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 20\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Emergency stop', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 30\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Assist', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 30\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('No product defined', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Skipped work instructions', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Setup mismatch', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 15\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('User maintenance delay', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Repair', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Supplier maintenance delay', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 10\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Out-of-spec input material', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 20\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Change of consumables', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Facilities-related', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\n/* Insert into the DB */\n\nDECLARE @min INT = 1\nDECLARE @maxState INT\nDECLARE @maxEquipment INT\nDECLARE @maxReason INT\nDECLARE @maxRecipe INT\n\nDECLARE @randomEquipment NVARCHAR(150)\nDECLARE @randomState NVARCHAR(150)\nDECLARE @randomReason NVARCHAR(150)\nDECLARE @randomRecipe NVARCHAR(150)\nDECLARE @randomTime DECIMAL(18,6)\n\nDECLARE @numberOfRandomRowsToAddCounter INT = 0\nDECLARE @numberOfRandomRowsToAdd INT = 250000\n\nSELECT @maxState = COUNT(*) FROM @StateTable\nSELECT @maxEquipment = COUNT(*) FROM @EquipmentTable\nSELECT @maxReason = COUNT(*) FROM @ReasonTable\nSELECT @maxRecipe = COUNT(*) FROM @RecipeTable\n\nWHILE (@numberOfRandomRowsToAddCounter < @numberOfRandomRowsToAdd)\nBEGIN\n\n    select @randomState = StateName FROM @StateTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxState-@min+1))+@min);\n    select @randomEquipment = EquipmentName FROM @EquipmentTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxEquipment-@min+1))+@min);\n    select @randomRecipe = RecipeName FROM @RecipeTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxRecipe-@min+1))+@min);\n\n    IF @randomState = 'Unsch. Down' \n    BEGIN\n        select @randomReason = ReasonName FROM @ReasonTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxReason-@min+1))+@min);\n    END\n    ELSE\n    BEGIN\n        SET @randomReason = NULL\n    END\n\n    SELECT @randomTime = RAND(ABS(CAST(CAST(NEWID() AS VARBINARY) AS INT)))*(10-2+1)+1\n\n    INSERT INTO [dbo].[T_EquipmentStateChange] ([Equipment],[State],[Reason],[TimeAtState], [Time], [Recipe])\n         VALUES (@randomEquipment , @randomState , @randomReason, @randomTime, DATEADD(MINUTE,-1*@numberOfRandomRowsToAddCounter, GETUTCDATE()), @randomRecipe)\n         SET @numberOfRandomRowsToAddCounter += 1\nEND"
              }
            ],
            "links": [
              {
                "topic": "Creating a Data Model for Grafana#",
                "links": [
                  {
                    "description": "Creating a Data Model for Grafana# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#creating-a-data-model-for-grafana"
                  }
                ]
              },
              {
                "topic": "Small Example (time, value, metric)#",
                "links": [
                  {
                    "description": "Small Example (time, value, metric)# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#small-example-time-value-metric"
                  }
                ]
              },
              {
                "topic": "ASM Demo Example (time, value, metric)#",
                "links": [
                  {
                    "description": "ASM Demo Example (time, value, metric)# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#asm-demo-example-time-value-metric"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Creating a Box Plot in Grafana",
            "definition": [
              {
                "topic": "Creating a Box Plot in Grafana#",
                "definition": "# How to build a box plot chart using the Grafana Plotly Panel ⧉ plugin. Grafana Plotly Panel ⧉ Box plot charts visually show the distribution of numerical data and skewness through displaying the data quartiles (or percentiles) and averages. Although this chart is not present in the Grafana list of plugins, Plotly supports it natively. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate). Create dummy data table and populate The Plotly component is smart enough to organize\\group the information by defects and show each defect data in each individual box. If you prefer, you can divide the information by defect and create a datasource for each defect but in our example we will have a single datasource with all the data mixed up (lets give the plugin some work). So, our datasource is as simple as a SQL Server datasource with the following script The \"weird\" $__timeFilter(time) code is something internal to grafana, that will be replaced by grafana at run time for something like BETWEEN '2022-05-03T02:05:35Z' AND '2022-05-05T02:05:35Z' The result of this query will be similar to (this is only a sample, the script will create 250k rows) Since this chart is supported natively by Plotly we only have to define a trace object. We just need to go to the script part of the Plotly panel plugin and insert the following code The end result is shown below (just want to point out that although all the boxes have zero value as its minimum value in this chart, this is not always the case, the lower whisker of the box, doesn't have to be to drawn over the x axis, it will depend on the min value found)   Note You followed these steps and the 1st box is red? That seems to be a small issue in the integration between the Grafana, the plotly panel plugin while drawing this type of chart. To \"fix\" this we had reset the Data section of the plotly panel.   For more information, please check the following links: https://grafana.com/ ⧉ https://grafana.com/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://en.wikipedia.org/wiki/Box_plot ⧉ https://en.wikipedia.org/wiki/Box_plot ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Creating a Box Plot in Grafana#",
                "code": "select value, metric from dbo.T_TestingWithNumericValues WHERE $__timeFilter(time)let traces = [];\n\nfor (let i = 0; i < data.series.length; i++) {\n  traces.push(\n    {\n      y: data.series[i].fields[0].values.buffer,\n      x: data.series[i].fields[1].values.buffer,\n      name: data.series[i].fields[1].values.buffer,\n      marker: {color: '#718FC0'},\n      type: 'box',\n      hoverinfo: 'x+y'\n    }\n  );\n}\n\nreturn {\n  data:traces,\n  layout:\n  {\n    title: 'Defects Distribution',\n    xaxis:\n    {\n      type: 'string'\n    },\n    showlegend:false,\n    margin: { b: 30 }\n  },\n  configuration: {displayModeBar: false}\n};"
              }
            ],
            "links": [
              {
                "topic": "Creating a Box Plot in Grafana#",
                "links": [
                  {
                    "description": "Creating a Box Plot in Grafana# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/#creating-a-box-plot-in-grafana"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (2)",
                    "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (3)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/DataModel.md"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (4)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/images/boxplot.png"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (5)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/images/resetdata.png"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (6)",
                    "link": "https://grafana.com/"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (7)",
                    "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (8)",
                    "link": "https://plotly.com/javascript/"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (9)",
                    "link": "https://plotly.com/javascript/reference/"
                  },
                  {
                    "description": "Creating a Box Plot in Grafana# (10)",
                    "link": "https://en.wikipedia.org/wiki/Box_plot"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Creating a Pareto Chart in Grafana",
            "definition": [
              {
                "topic": "Creating a Pareto Chart in Grafana#",
                "definition": "# How to build a Pareto chart using Grafana Plotly plugin. A Pareto chart is a type of chart that contains both bars and a line graph, where individual values are represented in descending order by bars, and the cumulative total is represented by the line. Unfortunately, this chart is not currently available in the list of supported graphs by Grafana or Plotly, due to this omission, we have to have a data source that provides with the information already ready to be used. Lets assume that we are counting the number of defects found during the production and we want to know what are the defects that cause the greater losses. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate). Create dummy data table and populate As explained, the pareto chart requires data to draw a set of columns ordered by the sum of values from left to right that will represent the sum of the losses grouped by the reason for that loss. It will also require data to draw a line that will represent the percentage of each loss plus the percentage of the previous loss. To achieve this we created a grafana datasource based on the SQL Server datasource with a script This might not represent the best SQL query to get this information, but the most important for this scenario is to get enough information to this the chart. As you can see, this query will return the value (sum of all the losses grouped by the reason for the loss- metric), the percSum (percentage of the loss plus the percentage of the previous loss) and the reason for the loss. The \"weird\" $__timeFilter(time) code is something internal to grafana, that will be replaced by grafana at run time for something like BETWEEN '2022-05-03T02:05:35Z' AND '2022-05-05T02:05:35Z' The result of this query is something like Next we need to draw this information for something like a pareto chart. To achieve this goal we had to use plotly (https://plotly.com/), or, to be more accurate the ploty panel plugin for grafana (https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉). https://plotly.com/ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ Using this plugin, we are able to use the plotly javascript component to draw charts that are not natively supported by grafana. With a very simple script, we are able to use the return of the previous query. As you can see we created 3 objects, the 1st one (trace1) represents the bar chart, the 2nd one (trace2) represents the line and the last one (layout) represents the layout of the chart being drawn. All of this will result in a chart that looks like this:   I hope this will help anyone to start a simple pareto chart using grafana and plotly. For more information please check the following links: https://grafana.com/ ⧉ https://grafana.com/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://en.wikipedia.org/wiki/Pareto_chart ⧉ https://en.wikipedia.org/wiki/Pareto_chart ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Creating a Pareto Chart in Grafana#",
                "code": "DECLARE @total DECIMAL(18,0)\nSELECT @total = sum(value) FROM dbo.T_TestingWithNumericValues\nWHERE $__timeFilter(time)\n\n;WITH perc AS\n(\n    SELECT  (sum(value)/@total)*100 as perc, sum(value) as value, metric as metric\n    FROM dbo.T_TestingWithNumericValues\n    WHERE $__timeFilter(time)\n    GROUP BY metric\n)\n,percRanked AS\n(\n    SELECT value, perc, metric, ROW_NUMBER() OVER(ORDER BY value DESC) rownum\n    FROM perc\n) \n\nSELECT value, (SELECT SUM(perc) FROM percRanked c2 WHERE c2.rownum <= c1.rownum) AS percSum, metric\nFROM percRanked c1var trace1 = {\n  y: data.series[0].fields[0].values.buffer, \n  x: data.series[0].fields[2].values.buffer, \n  marker: {color: '#718FC0'},\n  type: 'bar' };\nvar trace2 = {\n  y: data.series[0].fields[1].values.buffer, \n  x: data.series[0].fields[2].values.buffer, \n  yaxis: 'y2', \n  line: {color: '#FF0033'},\n  type: 'scatter'};\n\nvar layout = {\n  title: 'Defects 80/20',\n   yaxis: {title: 'Losses', showgrid: false},\n   yaxis2: {title: '%', overlaying: 'y', side: 'right', showgrid: false},\n   xaxis: {type: 'string'},\n   xaxis2: {type: 'string'},\n   showlegend: false\n  };\n\nreturn {data:[trace1, trace2], layout};"
              }
            ],
            "links": [
              {
                "topic": "Creating a Pareto Chart in Grafana#",
                "links": [
                  {
                    "description": "Creating a Pareto Chart in Grafana# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/#creating-a-pareto-chart-in-grafana"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (2)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/DataModel.md"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (3)",
                    "link": "https://plotly.com/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (4)",
                    "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (5)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/images/pareto.png"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (6)",
                    "link": "https://grafana.com/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (7)",
                    "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (8)",
                    "link": "https://plotly.com/javascript/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (9)",
                    "link": "https://plotly.com/javascript/reference/"
                  },
                  {
                    "description": "Creating a Pareto Chart in Grafana# (10)",
                    "link": "https://en.wikipedia.org/wiki/Pareto_chart"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Creating a Stacked Bar in Grafana",
            "definition": [
              {
                "topic": "Creating a Stacked Bar in Grafana#",
                "definition": "# How to build a Stack bar chart using Grafana. The base for a stack bar is the simple bar chart that is shipped with grafana with some overrides. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate - ASM Demo Example (time, value, metric)). Create dummy data table and populate To create this chart, we had to pivot the table to have the state of the resource as column Next to mark each state with a color we override the Color Schema   The result is something similar to   "
              }
            ],
            "code": [
              {
                "topic": "Creating a Stacked Bar in Grafana#",
                "code": "select *\nfrom\n(\n  SELECT SUM(TimeAtState)/3600 [TIME], Recipe, State\n  FROM [dbo].[T_EquipmentStateChange]\n  WHERE $__timeFilter(time)\n  GROUP BY State, Recipe\n) a\nPIVOT\n(\nSUM([Time])\nFOR State IN ([Work],[Waiting], [Blocked], [Unsch. Down] )\n) pvt"
              }
            ],
            "links": [
              {
                "topic": "Creating a Stacked Bar in Grafana#",
                "links": [
                  {
                    "description": "Creating a Stacked Bar in Grafana# (1)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/#creating-a-stacked-bar-in-grafana"
                  },
                  {
                    "description": "Creating a Stacked Bar in Grafana# (2)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/DataModel.md"
                  },
                  {
                    "description": "Creating a Stacked Bar in Grafana# (3)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/images/override_stackedbar.png"
                  },
                  {
                    "description": "Creating a Stacked Bar in Grafana# (4)",
                    "link": "https://developer.criticalmanufacturing.com/dataplatform/images/stackedbar.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Data Model",
        "definition": [
          {
            "topic": "Creating a Data Model for Grafana#",
            "definition": "# "
          },
          {
            "topic": "Small Example (time, value, metric)#",
            "definition": "# This page includes the scripts to create and populate a generic data table that holds a timeline set of events. This table is then populated this table with random data This created 350k rows that allowed us to test and build our charts. "
          },
          {
            "topic": "ASM Demo Example (time, value, metric)#",
            "definition": "# We required a new, more complete data table to collect information to demonstrate a new set of charts, in order to do that, we created a new table and created a new script to generate random data to create the information. With this table we will store the equipment, its state change, the reason for the state change (only filled in the case of a unscheduled down), the time at the state, a timeline and a recipe (this is just demo) To generate the dummy data, we developed the following script "
          }
        ],
        "code": [
          {
            "topic": "Small Example (time, value, metric)#",
            "code": "CREATE TABLE [dbo].[T_TestingWithNumericValues](\n    [time] [datetime] NULL,\n    [value] [decimal](18, 0) NULL,\n    [metric] [nvarchar](50) NULL\n) ON [PRIMARY]\nGOTRUNCATE TABLE [dbo].[T_TestingWithNumericValues]\nDECLARE @counter INT \n\nSET @counter = 0 \n\nWHILE @counter < 50000\nBEGIN \nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(50-5)\n           ,'burn')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(150-20)\n           ,'scratched')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(10-1)\n           ,'water damage')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(60-10)\n           ,'eletric damage')\n\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(140-10)\n           ,'contamination')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(80-2)\n           ,'stress')\n\nINSERT INTO [dbo].[T_TestingWithNumericValues]\n           ([time]\n           ,[value]\n           ,[metric])\n     VALUES\n           (DATEADD(MINUTE,-1*@counter, GETUTCDATE())\n           ,RAND()*(40-2)\n           ,'short')\n    SET @counter = @counter + 1\nEND"
          },
          {
            "topic": "ASM Demo Example (time, value, metric)#",
            "code": "CREATE TABLE [dbo].[T_EquipmentStateChange](\n    [Equipment] [nvarchar](150) NULL,\n    [State] [nvarchar](150) NULL,\n    [Reason] [nvarchar](150) NULL,\n    [TimeAtState] [decimal](18, 6) NULL,\n    [Time] [datetime] NULL,\n    [Recipe] [nvarchar](150) NULL\n) ON [PRIMARY]TRUNCATE TABLE [dbo].[T_EquipmentStateChange]\n\n/* Equipment Table - Create and insert data */\n\nDECLARE @EquipmentTable TABLE(EquipmentName NVARCHAR(150), RowNumber INT)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('Printer', 1)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SPI', 2)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX1', 3)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX2', 4)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('SX4', 5)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('Reflow', 6)\n\nINSERT INTO @EquipmentTable (EquipmentName, RowNumber)\nVALUES('AOI', 7)\n\n\n/* States Table - Create and insert weighted data */\n\nDECLARE @StateTable TABLE (StateName NVARCHAR(150), RowNumber INT)\n\nDECLARE @i INT = 0\nDECLARE @j INT = 0\n\nWHILE @i <= 10\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Waiting', @i)\n    SET @i += 1\nEND\n\nWHILE @j <= 120\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Work', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Blocked', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 3\nBEGIN\n    INSERT INTO @StateTable (StateName, RowNumber)\n    VALUES('Unsch. Down', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\n/* Recipe Table - Create and insert data */\n\nDECLARE @RecipeTable TABLE (RecipeName NVARCHAR(150), RowNumber INT)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe A',1)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Ideal Recipe B',2)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe B',3)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Theoretical Recipe C',4)\n\nINSERT INTO @RecipeTable (RecipeName, RowNumber)\nVALUES ('Actual Recipe C',5)\n\n/* Reason Table - Create and insert weighted data */\n\nDECLARE @ReasonTable TABLE (ReasonName NVARCHAR(150), RowNumber INT)\n\nSET @i = 0\nSET @j = 0\n\nWHILE @i <= 50\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Assist', @i)\n    SET @i += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 20\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Emergency stop', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 30\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Assist', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 30\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('No product defined', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Skipped work instructions', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Setup mismatch', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 15\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('User maintenance delay', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Repair', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Supplier maintenance delay', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 10\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Out-of-spec input material', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 20\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Change of consumables', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\nSET @j = 0\n\nWHILE @j <= 5\nBEGIN\n    INSERT INTO @ReasonTable (ReasonName, RowNumber)\n    VALUES('Facilities-related', @i)\n    SET @i += 1\n    SET @j += 1\nEND\n\n/* Insert into the DB */\n\nDECLARE @min INT = 1\nDECLARE @maxState INT\nDECLARE @maxEquipment INT\nDECLARE @maxReason INT\nDECLARE @maxRecipe INT\n\nDECLARE @randomEquipment NVARCHAR(150)\nDECLARE @randomState NVARCHAR(150)\nDECLARE @randomReason NVARCHAR(150)\nDECLARE @randomRecipe NVARCHAR(150)\nDECLARE @randomTime DECIMAL(18,6)\n\nDECLARE @numberOfRandomRowsToAddCounter INT = 0\nDECLARE @numberOfRandomRowsToAdd INT = 250000\n\nSELECT @maxState = COUNT(*) FROM @StateTable\nSELECT @maxEquipment = COUNT(*) FROM @EquipmentTable\nSELECT @maxReason = COUNT(*) FROM @ReasonTable\nSELECT @maxRecipe = COUNT(*) FROM @RecipeTable\n\nWHILE (@numberOfRandomRowsToAddCounter < @numberOfRandomRowsToAdd)\nBEGIN\n\n    select @randomState = StateName FROM @StateTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxState-@min+1))+@min);\n    select @randomEquipment = EquipmentName FROM @EquipmentTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxEquipment-@min+1))+@min);\n    select @randomRecipe = RecipeName FROM @RecipeTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxRecipe-@min+1))+@min);\n\n    IF @randomState = 'Unsch. Down' \n    BEGIN\n        select @randomReason = ReasonName FROM @ReasonTable WHERE RowNumber = (SELECT FLOOR(RAND()*(@maxReason-@min+1))+@min);\n    END\n    ELSE\n    BEGIN\n        SET @randomReason = NULL\n    END\n\n    SELECT @randomTime = RAND(ABS(CAST(CAST(NEWID() AS VARBINARY) AS INT)))*(10-2+1)+1\n\n    INSERT INTO [dbo].[T_EquipmentStateChange] ([Equipment],[State],[Reason],[TimeAtState], [Time], [Recipe])\n         VALUES (@randomEquipment , @randomState , @randomReason, @randomTime, DATEADD(MINUTE,-1*@numberOfRandomRowsToAddCounter, GETUTCDATE()), @randomRecipe)\n         SET @numberOfRandomRowsToAddCounter += 1\nEND"
          }
        ],
        "links": [
          {
            "topic": "Creating a Data Model for Grafana#",
            "links": [
              {
                "description": "Creating a Data Model for Grafana# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#creating-a-data-model-for-grafana"
              }
            ]
          },
          {
            "topic": "Small Example (time, value, metric)#",
            "links": [
              {
                "description": "Small Example (time, value, metric)# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#small-example-time-value-metric"
              }
            ]
          },
          {
            "topic": "ASM Demo Example (time, value, metric)#",
            "links": [
              {
                "description": "ASM Demo Example (time, value, metric)# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/#asm-demo-example-time-value-metric"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_datamodel/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating a Box Plot in Grafana",
        "definition": [
          {
            "topic": "Creating a Box Plot in Grafana#",
            "definition": "# How to build a box plot chart using the Grafana Plotly Panel ⧉ plugin. Grafana Plotly Panel ⧉ Box plot charts visually show the distribution of numerical data and skewness through displaying the data quartiles (or percentiles) and averages. Although this chart is not present in the Grafana list of plugins, Plotly supports it natively. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate). Create dummy data table and populate The Plotly component is smart enough to organize\\group the information by defects and show each defect data in each individual box. If you prefer, you can divide the information by defect and create a datasource for each defect but in our example we will have a single datasource with all the data mixed up (lets give the plugin some work). So, our datasource is as simple as a SQL Server datasource with the following script The \"weird\" $__timeFilter(time) code is something internal to grafana, that will be replaced by grafana at run time for something like BETWEEN '2022-05-03T02:05:35Z' AND '2022-05-05T02:05:35Z' The result of this query will be similar to (this is only a sample, the script will create 250k rows) Since this chart is supported natively by Plotly we only have to define a trace object. We just need to go to the script part of the Plotly panel plugin and insert the following code The end result is shown below (just want to point out that although all the boxes have zero value as its minimum value in this chart, this is not always the case, the lower whisker of the box, doesn't have to be to drawn over the x axis, it will depend on the min value found)   Note You followed these steps and the 1st box is red? That seems to be a small issue in the integration between the Grafana, the plotly panel plugin while drawing this type of chart. To \"fix\" this we had reset the Data section of the plotly panel.   For more information, please check the following links: https://grafana.com/ ⧉ https://grafana.com/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://en.wikipedia.org/wiki/Box_plot ⧉ https://en.wikipedia.org/wiki/Box_plot ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Creating a Box Plot in Grafana#",
            "code": "select value, metric from dbo.T_TestingWithNumericValues WHERE $__timeFilter(time)let traces = [];\n\nfor (let i = 0; i < data.series.length; i++) {\n  traces.push(\n    {\n      y: data.series[i].fields[0].values.buffer,\n      x: data.series[i].fields[1].values.buffer,\n      name: data.series[i].fields[1].values.buffer,\n      marker: {color: '#718FC0'},\n      type: 'box',\n      hoverinfo: 'x+y'\n    }\n  );\n}\n\nreturn {\n  data:traces,\n  layout:\n  {\n    title: 'Defects Distribution',\n    xaxis:\n    {\n      type: 'string'\n    },\n    showlegend:false,\n    margin: { b: 30 }\n  },\n  configuration: {displayModeBar: false}\n};"
          }
        ],
        "links": [
          {
            "topic": "Creating a Box Plot in Grafana#",
            "links": [
              {
                "description": "Creating a Box Plot in Grafana# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/#creating-a-box-plot-in-grafana"
              },
              {
                "description": "Creating a Box Plot in Grafana# (2)",
                "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
              },
              {
                "description": "Creating a Box Plot in Grafana# (3)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/DataModel.md"
              },
              {
                "description": "Creating a Box Plot in Grafana# (4)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/boxplot.png"
              },
              {
                "description": "Creating a Box Plot in Grafana# (5)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/resetdata.png"
              },
              {
                "description": "Creating a Box Plot in Grafana# (6)",
                "link": "https://grafana.com/"
              },
              {
                "description": "Creating a Box Plot in Grafana# (7)",
                "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
              },
              {
                "description": "Creating a Box Plot in Grafana# (8)",
                "link": "https://plotly.com/javascript/"
              },
              {
                "description": "Creating a Box Plot in Grafana# (9)",
                "link": "https://plotly.com/javascript/reference/"
              },
              {
                "description": "Creating a Box Plot in Grafana# (10)",
                "link": "https://en.wikipedia.org/wiki/Box_plot"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_boxplot/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating a Pareto Chart in Grafana",
        "definition": [
          {
            "topic": "Creating a Pareto Chart in Grafana#",
            "definition": "# How to build a Pareto chart using Grafana Plotly plugin. A Pareto chart is a type of chart that contains both bars and a line graph, where individual values are represented in descending order by bars, and the cumulative total is represented by the line. Unfortunately, this chart is not currently available in the list of supported graphs by Grafana or Plotly, due to this omission, we have to have a data source that provides with the information already ready to be used. Lets assume that we are counting the number of defects found during the production and we want to know what are the defects that cause the greater losses. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate). Create dummy data table and populate As explained, the pareto chart requires data to draw a set of columns ordered by the sum of values from left to right that will represent the sum of the losses grouped by the reason for that loss. It will also require data to draw a line that will represent the percentage of each loss plus the percentage of the previous loss. To achieve this we created a grafana datasource based on the SQL Server datasource with a script This might not represent the best SQL query to get this information, but the most important for this scenario is to get enough information to this the chart. As you can see, this query will return the value (sum of all the losses grouped by the reason for the loss- metric), the percSum (percentage of the loss plus the percentage of the previous loss) and the reason for the loss. The \"weird\" $__timeFilter(time) code is something internal to grafana, that will be replaced by grafana at run time for something like BETWEEN '2022-05-03T02:05:35Z' AND '2022-05-05T02:05:35Z' The result of this query is something like Next we need to draw this information for something like a pareto chart. To achieve this goal we had to use plotly (https://plotly.com/), or, to be more accurate the ploty panel plugin for grafana (https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉). https://plotly.com/ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ Using this plugin, we are able to use the plotly javascript component to draw charts that are not natively supported by grafana. With a very simple script, we are able to use the return of the previous query. As you can see we created 3 objects, the 1st one (trace1) represents the bar chart, the 2nd one (trace2) represents the line and the last one (layout) represents the layout of the chart being drawn. All of this will result in a chart that looks like this:   I hope this will help anyone to start a simple pareto chart using grafana and plotly. For more information please check the following links: https://grafana.com/ ⧉ https://grafana.com/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://grafana.com/grafana/plugins/ae3e-plotly-panel/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://plotly.com/javascript/reference/ ⧉ https://en.wikipedia.org/wiki/Pareto_chart ⧉ https://en.wikipedia.org/wiki/Pareto_chart ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Creating a Pareto Chart in Grafana#",
            "code": "DECLARE @total DECIMAL(18,0)\nSELECT @total = sum(value) FROM dbo.T_TestingWithNumericValues\nWHERE $__timeFilter(time)\n\n;WITH perc AS\n(\n    SELECT  (sum(value)/@total)*100 as perc, sum(value) as value, metric as metric\n    FROM dbo.T_TestingWithNumericValues\n    WHERE $__timeFilter(time)\n    GROUP BY metric\n)\n,percRanked AS\n(\n    SELECT value, perc, metric, ROW_NUMBER() OVER(ORDER BY value DESC) rownum\n    FROM perc\n) \n\nSELECT value, (SELECT SUM(perc) FROM percRanked c2 WHERE c2.rownum <= c1.rownum) AS percSum, metric\nFROM percRanked c1var trace1 = {\n  y: data.series[0].fields[0].values.buffer, \n  x: data.series[0].fields[2].values.buffer, \n  marker: {color: '#718FC0'},\n  type: 'bar' };\nvar trace2 = {\n  y: data.series[0].fields[1].values.buffer, \n  x: data.series[0].fields[2].values.buffer, \n  yaxis: 'y2', \n  line: {color: '#FF0033'},\n  type: 'scatter'};\n\nvar layout = {\n  title: 'Defects 80/20',\n   yaxis: {title: 'Losses', showgrid: false},\n   yaxis2: {title: '%', overlaying: 'y', side: 'right', showgrid: false},\n   xaxis: {type: 'string'},\n   xaxis2: {type: 'string'},\n   showlegend: false\n  };\n\nreturn {data:[trace1, trace2], layout};"
          }
        ],
        "links": [
          {
            "topic": "Creating a Pareto Chart in Grafana#",
            "links": [
              {
                "description": "Creating a Pareto Chart in Grafana# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/#creating-a-pareto-chart-in-grafana"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (2)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/DataModel.md"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (3)",
                "link": "https://plotly.com/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (4)",
                "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (5)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/pareto.png"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (6)",
                "link": "https://grafana.com/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (7)",
                "link": "https://grafana.com/grafana/plugins/ae3e-plotly-panel/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (8)",
                "link": "https://plotly.com/javascript/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (9)",
                "link": "https://plotly.com/javascript/reference/"
              },
              {
                "description": "Creating a Pareto Chart in Grafana# (10)",
                "link": "https://en.wikipedia.org/wiki/Pareto_chart"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_pareto/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Creating a Stacked Bar in Grafana",
        "definition": [
          {
            "topic": "Creating a Stacked Bar in Grafana#",
            "definition": "# How to build a Stack bar chart using Grafana. The base for a stack bar is the simple bar chart that is shipped with grafana with some overrides. We have created a set of fictional data that show us the amount of product loss per reading and what was the loss reason (Create dummy data table and populate - ASM Demo Example (time, value, metric)). Create dummy data table and populate To create this chart, we had to pivot the table to have the state of the resource as column Next to mark each state with a color we override the Color Schema   The result is something similar to   "
          }
        ],
        "code": [
          {
            "topic": "Creating a Stacked Bar in Grafana#",
            "code": "select *\nfrom\n(\n  SELECT SUM(TimeAtState)/3600 [TIME], Recipe, State\n  FROM [dbo].[T_EquipmentStateChange]\n  WHERE $__timeFilter(time)\n  GROUP BY State, Recipe\n) a\nPIVOT\n(\nSUM([Time])\nFOR State IN ([Work],[Waiting], [Blocked], [Unsch. Down] )\n) pvt"
          }
        ],
        "links": [
          {
            "topic": "Creating a Stacked Bar in Grafana#",
            "links": [
              {
                "description": "Creating a Stacked Bar in Grafana# (1)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/#creating-a-stacked-bar-in-grafana"
              },
              {
                "description": "Creating a Stacked Bar in Grafana# (2)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/DataModel.md"
              },
              {
                "description": "Creating a Stacked Bar in Grafana# (3)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/override_stackedbar.png"
              },
              {
                "description": "Creating a Stacked Bar in Grafana# (4)",
                "link": "https://developer.criticalmanufacturing.com/dataplatform/images/stackedbar.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/dataplatform/grafana/grafana_stackedbar/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "Data Platform#",
        "links": [
          {
            "description": "Data Platform# (1)",
            "link": "https://developer.criticalmanufacturing.com/dataplatform/#data-platform"
          },
          {
            "description": "Data Platform# (2)",
            "link": "https://developer.criticalmanufacturing.com/dataplatform/dataplatform_telemetry/"
          },
          {
            "description": "Data Platform# (3)",
            "link": "https://developer.criticalmanufacturing.com/dataplatform/grafana/"
          }
        ]
      }
    ]
  },
  {
    "topic": "Integration",
    "href": "https://developer.criticalmanufacturing.com/integration/",
    "flag": true,
    "definition": [
      {
        "topic": "System Integrations#",
        "definition": "# Interoperability is paramount to ensuring data integrity, enhancing security and achieving a new complex engineering system paradigm. The Critical Manufacturing MES System integrates these concepts and adds a versatile layer of extensibility by using a engine called Integration Entries. Some of the underlying concepts can be reviewed in further detail in the Integration section of the User Guide ⧉. User Guide ⧉ "
      },
      {
        "topic": "Integration Entries#",
        "definition": "# In the Critical Manufacturing MES, Integration Entries are a set of records that work as a queue system and are processed periodically by an engine. That same engine is also used to calculate, in real time, which integration package should be responsible for the handling of each integration entry. The rules are supplied by an integration resolution table which is also configured in the system. The Integration Entries engine is running inside the Critical Manufacturing MES Host and periodically checks for new entries to treat. The processing of these new entries is made by integration packages that are loaded and invoked by Integration Entries Engine. A high-level diagram can be seen below to understand how the system components interact among themselves:   "
      },
      {
        "topic": "Configurations#",
        "definition": "# Some configurations are able to change in order to modify the integration scheduler behavior. Table: Integration engine configuration entries "
      },
      {
        "topic": "Integration Packages#",
        "definition": "# Critical Manufacturing MES supplies two integration packages: ERP (SAP) Generic Integrations ERP (SAP) Generic Integrations Generic Integrations Warning Available integration packages depend on the currently installed license. "
      },
      {
        "topic": "SAP Connector#",
        "definition": "# Critical Manufacturing MES is able to integrate with external systems through its integration interface, an extensible mechanism where a plugin is loaded to handle the communication details between the MES and the external system. A plugin is made available upon MES installation in order to provide a way to record the received messages and to process them either synchronously or asynchronously. Critical Manufacturing MES also provides an out-of-box connector for SAP. More information available, as well as configuration instructions, on the SAP Integration section of this developer guide. SAP Integration "
      }
    ],
    "submodulos": [
      {
        "topic": "Generic Integrations",
        "definition": [
          {
            "topic": "Generic Integrations#",
            "definition": "# The Generic Integrations package allows authorized users to extend the Critical Manufacturing MES with background tasks that are executed on demand by Integration Scheduler. These tasks are able to communicate with Critical Manufacturing MES or any other systems. "
          },
          {
            "topic": "How it works#",
            "definition": "# An integration Entry can be handled in the system through the use of DEE Actions. Those actions can be mapped according to the Message Type received and configured in a specific SmartTable named IntegrationHandlerResolution. More information can be seen on the Smart Tables ⧉ section of the user guide. Smart Tables ⧉   Info The EventName property that belongs to an Integration Entry record can be used to create a subset filter so that the same DEE Action can be reused to cover multiple scenarios. "
          },
          {
            "topic": "Develop DEE Action#",
            "definition": "# The code that makes up a DEE Action can be developed by anyone with basic C# knowledge and sufficient knowledge of the Critical Manufacturing MES, so that the inputs are properly handled and the system behaves as expected. The Generic Integrations package will send a specific type of input to the DEE Action (in this case the type is Integration Entry) which should be handled appropriately to ensure proper processing of the Integration Entry.   There are several validations that should be done to ensure the fulfillment of an Integration Entry. "
          },
          {
            "topic": "Critical Manufacturing MES Useful Methods#",
            "definition": "# The Critical Manufacturing MES Host provides several useful methods to: Make an Integration Entry exportable to another MES Host; Create an Integration Entry remotely. Make an Integration Entry exportable to another MES Host; Create an Integration Entry remotely. These methods require using some references to interact with export object type and HttpRequest and HttpResponse objects. An example can be seen below:   "
          },
          {
            "topic": "Invoke example#",
            "definition": "#   The result of Export Integration Entry is available for further analysis as an HttpResponse object. "
          },
          {
            "topic": "Configurations#",
            "definition": "# Setting the Generic Integrations Package active or inactive can be done via configuration entry: Table: Generic Integrations Package configuration entries "
          }
        ],
        "code": [
          {
            "topic": "Critical Manufacturing MES Useful Methods#",
            "code": "HttpRequestHttpResponse/// <summary>\n/// Build exportable integration entry\n/// </summary>\n/// <param name=\"integrationEntry\">Integration Entry to be copied</param>\n/// <param name=\"eventName\">Event Name of Integration Entry</param>\n/// <param name=\"messageInformation\">Contains Content Information to be assigned to Integration Entry Message if it was provided</param>\n/// <returns></returns>\nIntegrationEntry BuildExportableIntegrationEntry(IntegrationEntry integrationEntry, string eventName = null, ImportExportMessageInformation? messageInformation = null);\n\n/// <summary>\n/// Create and send http request for Integration Entry Remote Creation. It uses the MES serialization settings by default\n/// </summary>\n/// <param name=\"integrationEntry\">Integration Entry to be sent</param>\n/// <param name=\"contextValues\">Dictionary of context values (IsRemoteSSL:boolean, RemoteAddress:string, RemoteAccessTenant:string, RemoteAccessToken:string, TargetSystem:string)</param>\n/// <param name=\"acceptHeaders\">Accept Headers collection, if provided it'll override all the default MES settings</param>\n/// <param name=\"requestHeaders\">Request Headers collection, if provided it'll override all the default MES settings</param>\n/// <returns></returns>\nHttpResponseMessage ExportIntegrationEntry(object integrationEntry, Dictionary<string, string> contextValues, HttpHeaderValueCollection<MediaTypeWithQualityHeaderValue> acceptHeaders = null, HttpRequestHeaders requestHeaders = null)"
          },
          {
            "topic": "Invoke example#",
            "code": "HttpResponse"
          },
          {
            "topic": "Configurations#",
            "code": "/Cmf/System/Configuration/Integration/GenericIntegration/IsActive/"
          }
        ],
        "links": [
          {
            "topic": "Generic Integrations#",
            "links": [
              {
                "description": "Generic Integrations# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#generic-integrations"
              }
            ]
          },
          {
            "topic": "How it works#",
            "links": [
              {
                "description": "How it works# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#how-it-works"
              },
              {
                "description": "How it works# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/tables/smart-tables/"
              },
              {
                "description": "How it works# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/integration_handler_resolution_example.png"
              }
            ]
          },
          {
            "topic": "Develop DEE Action#",
            "links": [
              {
                "description": "Develop DEE Action# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#develop-dee-action"
              },
              {
                "description": "Develop DEE Action# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/dee_action_integration_entry.png"
              }
            ]
          },
          {
            "topic": "Critical Manufacturing MES Useful Methods#",
            "links": [
              {
                "description": "Critical Manufacturing MES Useful Methods# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#critical-manufacturing-mes-useful-methods"
              },
              {
                "description": "Critical Manufacturing MES Useful Methods# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/dee_action_references.png"
              }
            ]
          },
          {
            "topic": "Invoke example#",
            "links": [
              {
                "description": "Invoke example# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#invoke-example"
              },
              {
                "description": "Invoke example# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/dee_action_two_methods.png"
              }
            ]
          },
          {
            "topic": "Configurations#",
            "links": [
              {
                "description": "Configurations# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/#configurations"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/generic_integrations/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "SAP\n\n\n\n\n\n\n\n\n\nSAP\n\n\n\n\n\nConfigure MES to accept a IDoc message\n\n\n\n\n\n\nConfigure MES to call a BAPI\n\n\n\n\n\n\nConfigure MES connection to SAP\n\n\n\n\n\n\nConfigure SAP to accept MES connections\n\n\n\n\n\n\nSAP ALE concepts\n\n\n\n\n\n\nSending test IDoc from SAP\n\n\n\n\n\n\nTroubleshoot authorization problems\n\n\n\n\n\n\nTroubleshoot RFC communication",
        "definition": [
          {
            "topic": "SAP Integration#",
            "definition": "# Integration with SAP systems is done using the SAP ALE interface. It was chosen because it is a very stable technology that is present in all R3 systems. The drawback is that it is based on old protocols namely ANSI X12 and EDIFACT that are not so well-known today and are harder to parse. Critical Manufacturing MES uses a third-party interface to communicate with SAP and to easily interact with IDOCs and BAPIs. This guide walks through the steps needed to configure MES to connect to SAP and also briefly how to configure SAP to accept MES connections. When it comes to the SAP side configuration this guide aims to provide a simple configuration for development purposes. Real world SAP configurations should be handle by SAP certified professionals. SAP ALE Concepts Configure MES connection to SAP Configure SAP to accept MES connections Troubleshoot RFC communication Configure MES to accept a IDOC message Configure MES to call a BAPI Troubleshoot authorization problems Sending test IDOC from SAP SAP ALE Concepts SAP ALE Concepts Configure MES connection to SAP Configure MES connection to SAP Configure SAP to accept MES connections Configure SAP to accept MES connections Troubleshoot RFC communication Troubleshoot RFC communication Configure MES to accept a IDOC message Configure MES to accept a IDOC message Configure MES to call a BAPI Configure MES to call a BAPI Troubleshoot authorization problems Troubleshoot authorization problems Sending test IDOC from SAP Sending test IDOC from SAP "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "SAP Integration#",
            "links": [
              {
                "description": "SAP Integration# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/#sap-integration"
              },
              {
                "description": "SAP Integration# (2)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/"
              },
              {
                "description": "SAP Integration# (3)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/"
              },
              {
                "description": "SAP Integration# (4)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/"
              },
              {
                "description": "SAP Integration# (5)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_rfc_communication/"
              },
              {
                "description": "SAP Integration# (6)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_accept_idoc/"
              },
              {
                "description": "SAP Integration# (7)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_call_bapi/"
              },
              {
                "description": "SAP Integration# (8)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/"
              },
              {
                "description": "SAP Integration# (9)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Configure MES to accept a IDoc message",
            "definition": [
              {
                "topic": "Configure MES to accept a IDoc message#",
                "definition": "# MES needs a configuration to accept an IDoc. The configuration can be done in Administration > ERP. It is necessary to configure the following attributes: Name: A designation to identity the map Description: A text value to identity the purpose of the map IDoc: The IDoc version to accept. Please note that this has to be the version and not the Message Type. DEE Action: The DEE Action that will be used to process the IDoc Name: A designation to identity the map Description: A text value to identity the purpose of the map IDoc: The IDoc version to accept. Please note that this has to be the version and not the Message Type. DEE Action: The DEE Action that will be used to process the IDoc   "
              }
            ],
            "code": [],
            "links": [
              {
                "topic": "Configure MES to accept a IDoc message#",
                "links": [
                  {
                    "description": "Configure MES to accept a IDoc message# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_accept_idoc/#configure-mes-to-accept-a-idoc-message"
                  },
                  {
                    "description": "Configure MES to accept a IDoc message# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/accept_idoc.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_accept_idoc/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Configure MES to call a BAPI",
            "definition": [
              {
                "topic": "Configure MES to call a BAPI#",
                "definition": "# To configure MES to call a BAPI it is necessary to register the BAPI in Critical Manufacturing.   The system will generate an assembly to allow calling the BAPI in a DEE Rule. The assembly will be called Cmf.Custom.BusinessObjects.ErpCustomManagement.dll and will be placed in the host directory. If the host is already loading a copy of the assembly the replacement process will fail and it is necessary to search the temporary folders for the assembly and manually replacing it. "
              }
            ],
            "code": [
              {
                "topic": "Configure MES to call a BAPI#",
                "code": "Cmf.Custom.BusinessObjects.ErpCustomManagement.dll"
              }
            ],
            "links": [
              {
                "topic": "Configure MES to call a BAPI#",
                "links": [
                  {
                    "description": "Configure MES to call a BAPI# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_call_bapi/#configure-mes-to-call-a-bapi"
                  },
                  {
                    "description": "Configure MES to call a BAPI# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/register_bapi.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_call_bapi/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Configure MES connection to SAP",
            "definition": [
              {
                "topic": "Configure MES connection to SAP#",
                "definition": "# The connection to SAP is configured in Administration > Configuration in the path /Cmf/System/Configuration/ERP/SAP: Client: Enter the SAP Client to logon to ConnectorLicense: Enter your Theobald Connector License Host: Enter the SAP system host name or IP Address Language: Enter the language that is set for the SAP User User: Enter the SAP User Password: Enter the SAP User password Service: Enter the gateway name SystemNumber: Enter the SAP Instance Number ProgramId: Enter the name of the Registerer Server Program configured on SAP in the RFC Destination Client: Enter the SAP Client to logon to ConnectorLicense: Enter your Theobald Connector License Host: Enter the SAP system host name or IP Address Language: Enter the language that is set for the SAP User User: Enter the SAP User Password: Enter the SAP User password Service: Enter the gateway name SystemNumber: Enter the SAP Instance Number ProgramId: Enter the name of the Registerer Server Program configured on SAP in the RFC Destination For the connector to work the integration feature must be enabled. The setting to do so is /Cmf/System/Configuration/ERP/IsActive. "
              },
              {
                "topic": "Connection validation#",
                "definition": "# In SAP on the SM59 transaction there is a button that tests the connection to the external system. If that connection test passes then there is network connectivity between SAP and MES. On the MES side one common test is to go to Administration, select System Integrations, and then select SAP. After this, select the RFC view, and select Manage to be able to search for BAPIs (a dialog box should open to allow the search). If you can search, then the connection should be OK. "
              }
            ],
            "code": [
              {
                "topic": "Configure MES connection to SAP#",
                "code": "/Cmf/System/Configuration/ERP/SAP/Cmf/System/Configuration/ERP/IsActive"
              }
            ],
            "links": [
              {
                "topic": "Configure MES connection to SAP#",
                "links": [
                  {
                    "description": "Configure MES connection to SAP# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/#configure-mes-connection-to-sap"
                  }
                ]
              },
              {
                "topic": "Connection validation#",
                "links": [
                  {
                    "description": "Connection validation# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/#connection-validation"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Configure SAP to accept MES connections",
            "definition": [
              {
                "topic": "Configure SAP to accept MES connections#",
                "definition": "# To distribute data to external systems at least the following steps are required: "
              },
              {
                "topic": "Create a Logical System for the MES#",
                "definition": "# SAP needs a logical system for every participant in a distributed system. To create a Logical System for MES use the transaction code BD54.   "
              },
              {
                "topic": "Create a RFC Destination for MES#",
                "definition": "# The RFC destination is where you configure how SAP will connect to MES. Use the transaction code SM59. Use the following configuration as an example:   Follow the instructions to configure the MES side and use the Connection Test button to verify that the systems are connected. Also verify that the Unicode settings for both systems are aligned.   "
              },
              {
                "topic": "Create a Distribution Model#",
                "definition": "# The Distribution Model defines the message type of data to be exchanged. To Create a Distribution Model between SAP and MES use transaction BD64. Each message type that has to be exchanged between the two systems needs to be declared in the Distribution Model.   "
              },
              {
                "topic": "Define an IDoc Port#",
                "definition": "# Use transaction WE21 to configure an IDoc port. The port type must be transactional. The name of the port must be unique and refer to the RFC destination for MES.   "
              },
              {
                "topic": "Generate Partner Profiles (WE20)#",
                "definition": "# From the Distribution Model it is possible to generate Partner Profiles automatically by selecting Generate partner profiles from the Environment menu. This can also be done manually using transaction WE20. The recommended approach to prevent configuration users is using the automatic generation.   "
              }
            ],
            "code": [],
            "links": [
              {
                "topic": "Configure SAP to accept MES connections#",
                "links": [
                  {
                    "description": "Configure SAP to accept MES connections# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#configure-sap-to-accept-mes-connections"
                  }
                ]
              },
              {
                "topic": "Create a Logical System for the MES#",
                "links": [
                  {
                    "description": "Create a Logical System for the MES# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-logical-system-for-the-mes"
                  },
                  {
                    "description": "Create a Logical System for the MES# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/new_logical_system.PNG"
                  }
                ]
              },
              {
                "topic": "Create a RFC Destination for MES#",
                "links": [
                  {
                    "description": "Create a RFC Destination for MES# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-rfc-destination-for-mes"
                  },
                  {
                    "description": "Create a RFC Destination for MES# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/rfc_destination.PNG"
                  },
                  {
                    "description": "Create a RFC Destination for MES# (3)",
                    "link": "https://developer.criticalmanufacturing.com/images/rfc.PNG"
                  }
                ]
              },
              {
                "topic": "Create a Distribution Model#",
                "links": [
                  {
                    "description": "Create a Distribution Model# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-distribution-model"
                  },
                  {
                    "description": "Create a Distribution Model# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/sap_distribution_model.PNG"
                  }
                ]
              },
              {
                "topic": "Define an IDoc Port#",
                "links": [
                  {
                    "description": "Define an IDoc Port# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#define-an-idoc-port"
                  },
                  {
                    "description": "Define an IDoc Port# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/sap_idoc_port.PNG"
                  }
                ]
              },
              {
                "topic": "Generate Partner Profiles (WE20)#",
                "links": [
                  {
                    "description": "Generate Partner Profiles (WE20)# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#generate-partner-profiles-we20"
                  },
                  {
                    "description": "Generate Partner Profiles (WE20)# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/sap_generate_profiles.PNG"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "SAP ALE concepts",
            "definition": [
              {
                "topic": "SAP ALE concepts#",
                "definition": "# As an integration developer you will need to understand some SAP Basis concepts in order to be able to configure SAP to communicate with MES, to troubleshoot communication problems and to be able to develop advanced integrations. In this chapter you will present a quick walk through some of the most important concepts and transactions that are used in ALE scenarios. "
              },
              {
                "topic": "IDoc#",
                "definition": "# IDoc stands for Intermediate Document and is used by SAP to transfer information across business processes and SAP systems. "
              },
              {
                "topic": "Message Control#",
                "definition": "# Message Control is a component used in the outbound process to generate and manage outputs from applications and control their timing and medium of exchange. From our viewpoint it is a way to trigger IDoc generation without having to explicitly code it in the ABAP program although not all SAP business components support Message Control. "
              },
              {
                "topic": "Port Definition#",
                "definition": "# A port is used in the outbound process to determine the name of the EDI subsystem program and the RFC destination. "
              },
              {
                "topic": "RFC Destination#",
                "definition": "# The RFC (Remote Function Call) destination defines the characteristics of communication links to a remote system on which a function needs to be executed. "
              },
              {
                "topic": "Partner Profile#",
                "definition": "# The partner profile configures the partner number, IDoc type, message type, port, process code, the mode in which it communicates with the subsystem, and the person to be notified in case of errors to use in an outbound process. "
              },
              {
                "topic": "Distribution Model#",
                "definition": "# The distribution model configures the messages exchanged between sending and receiving systems. From our viewpoint it will define how SAP will deliver messages to MES. "
              }
            ],
            "code": [],
            "links": [
              {
                "topic": "SAP ALE concepts#",
                "links": [
                  {
                    "description": "SAP ALE concepts# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#sap-ale-concepts"
                  }
                ]
              },
              {
                "topic": "IDoc#",
                "links": [
                  {
                    "description": "IDoc# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#idoc"
                  }
                ]
              },
              {
                "topic": "Message Control#",
                "links": [
                  {
                    "description": "Message Control# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#message-control"
                  }
                ]
              },
              {
                "topic": "Port Definition#",
                "links": [
                  {
                    "description": "Port Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#port-definition"
                  }
                ]
              },
              {
                "topic": "RFC Destination#",
                "links": [
                  {
                    "description": "RFC Destination# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#rfc-destination"
                  }
                ]
              },
              {
                "topic": "Partner Profile#",
                "links": [
                  {
                    "description": "Partner Profile# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#partner-profile"
                  }
                ]
              },
              {
                "topic": "Distribution Model#",
                "links": [
                  {
                    "description": "Distribution Model# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#distribution-model"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Sending test IDoc from SAP",
            "definition": [
              {
                "topic": "Sending test IDoc from SAP#",
                "definition": "# There are two possible ways to trigger a test IDoc from SAP into MES. Performing the action that triggers the IDoc in SAP Retriggering an existing IDoc Performing the action that triggers the IDoc in SAP Retriggering an existing IDoc "
              },
              {
                "topic": "Triggering the IDoc in SAP#",
                "definition": "# The action to trigger the IDoc from SAP depends on the actual IDoc that is required. A helpful guide can be found in the Theobald documentation regarding on how to setup an environment to trigger a test IDoc (MATMAS). The guide can be found here: https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs ⧉. https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs ⧉ "
              },
              {
                "topic": "Retriggering an existing IDoc#",
                "definition": "# It is possible to replicate an IDoc and force it to be triggered and sent to another system. This will easily allow you to test your SAP connection without the need to understand what is required for the retriggering of a specific IDoc type. This approach has two disadvantages: You cannot edit the content of the IDoc It requires an IDoc having been previously sent to any other system (triggered by the conventional way) You cannot edit the content of the IDoc It requires an IDoc having been previously sent to any other system (triggered by the conventional way) To identify a previous IDoc, of the Message Type that you want, you can use the TCode WE02 (Display IDoc), that allows you to filter for all IDocs triggered in the system by Date and MessageType:   After identifying the IDoc that you want to replicate, take note of the IDoc Number.   The TCode WE19 (Test Tool) allows you to retrigger any IDoc that was already triggered. On the Test Tool page, set the Existing IDoc field with the IDoc Number identified above and selecting the Execute button, as shown in the image below:   After that, the detail of the IDoc will be displayed, and you can trigger it by selecting the Standard Inbound button, as shown in the image below:   Info Please note that a new IDoc is generated. "
              }
            ],
            "code": [
              {
                "topic": "Triggering the IDoc in SAP#",
                "code": "MATMAS"
              },
              {
                "topic": "Retriggering an existing IDoc#",
                "code": "WE02WE19"
              }
            ],
            "links": [
              {
                "topic": "Sending test IDoc from SAP#",
                "links": [
                  {
                    "description": "Sending test IDoc from SAP# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#sending-test-idoc-from-sap"
                  }
                ]
              },
              {
                "topic": "Triggering the IDoc in SAP#",
                "links": [
                  {
                    "description": "Triggering the IDoc in SAP# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#triggering-the-idoc-in-sap"
                  },
                  {
                    "description": "Triggering the IDoc in SAP# (2)",
                    "link": "https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs"
                  }
                ]
              },
              {
                "topic": "Retriggering an existing IDoc#",
                "links": [
                  {
                    "description": "Retriggering an existing IDoc# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#retriggering-an-existing-idoc"
                  },
                  {
                    "description": "Retriggering an existing IDoc# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/we_02_page_01.png"
                  },
                  {
                    "description": "Retriggering an existing IDoc# (3)",
                    "link": "https://developer.criticalmanufacturing.com/images/we_02_page_02.png"
                  },
                  {
                    "description": "Retriggering an existing IDoc# (4)",
                    "link": "https://developer.criticalmanufacturing.com/images/we_19_base_page_01.png"
                  },
                  {
                    "description": "Retriggering an existing IDoc# (5)",
                    "link": "https://developer.criticalmanufacturing.com/images/we_19_base_page_02.png"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Troubleshoot authorization problems",
            "definition": [
              {
                "topic": "Troubleshoot authorization problems#",
                "definition": "# Authorization issues can cause the MES to stop receiving IDocs from the SAP system. When an IDoc is received, the MES tries to get the IDoc Schema from SAP so that it is able to read the IDoc information correctly. Here are some of the possible errors that you can find in the MES log and that may make the MES unable to receive an IDoc successfully: The data for the IDoc with Type=LOIPRO01 was not found in the system. Get IDoc failed: ERPConnect.ERPException: Error while receiving function return values: OBJECT_UNKNOWN The data for the IDoc with Type=LOIPRO01 was not found in the system. Get IDoc failed: ERPConnect.ERPException: Error while receiving function return values: OBJECT_UNKNOWN It is important to identify the adequate function on the SAP system that is being accessed and that the user does not have access to. For that, you can enable tracing in the SAP system and retry the IDoc transaction. "
              },
              {
                "topic": "Steps to enable tracing#",
                "definition": "# Go to the System Trace page (TCode ST01) Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged. Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem: Go to the System Trace page (TCode ST01) Go to the System Trace page (TCode ST01) Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged. Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged.   Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem: In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem:   For more information, see https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/ ⧉. https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/ ⧉ "
              }
            ],
            "code": [
              {
                "topic": "Troubleshoot authorization problems#",
                "code": "LOIPRO01OBJECT_UNKNOWN"
              },
              {
                "topic": "Steps to enable tracing#",
                "code": "ST01"
              }
            ],
            "links": [
              {
                "topic": "Troubleshoot authorization problems#",
                "links": [
                  {
                    "description": "Troubleshoot authorization problems# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/#troubleshoot-authorization-problems"
                  }
                ]
              },
              {
                "topic": "Steps to enable tracing#",
                "links": [
                  {
                    "description": "Steps to enable tracing# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/#steps-to-enable-tracing"
                  },
                  {
                    "description": "Steps to enable tracing# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/st01_img_01.png"
                  },
                  {
                    "description": "Steps to enable tracing# (3)",
                    "link": "https://developer.criticalmanufacturing.com/images/st01_img_02.png"
                  },
                  {
                    "description": "Steps to enable tracing# (4)",
                    "link": "https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Troubleshoot RFC communication",
            "definition": [
              {
                "topic": "Troubleshoot RFC communication#",
                "definition": "# Starting from Kernel 720 the SAP Gateway enables gateway security by default and will deny connection to hosts other the the SAP system ones. For production systems please refer to SAP Note 1408081 for further details on how to configure SAP to allow the server hosting Critical Manufacturing MES to connect. For a development system if the customer company policy allows one can configure SAP to accept a less restritive connection configuration: First enter the SMGW transaction and go to Expert Functions > External Security > Display (Sec Info) and check if the secinfo file was already created or it the system is using the default settings. If the file has not been created go to Expert Functions > External Security > Create (Sec Info). This will create a new file under /usr/sap/<SID>/<INSTANCE>/data/. First enter the SMGW transaction and go to Expert Functions > External Security > Display (Sec Info) and check if the secinfo file was already created or it the system is using the default settings. If the file has not been created go to Expert Functions > External Security > Create (Sec Info). This will create a new file under /usr/sap/<SID>/<INSTANCE>/data/.   Repeat the same steps but for the reginfo file. Logon to your SAP system using ssh. Go to the /usr/sap/<SID>/<INSTANCE>/data/ directory. Using a text editor (sudo vi secinfo for instance) edit the secinfo file and add the following line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES USER=* USER-HOST=* HOST=* And in the reginfo file add the line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES Repeat the same steps but for the reginfo file. Logon to your SAP system using ssh. Go to the /usr/sap/<SID>/<INSTANCE>/data/ directory. Using a text editor (sudo vi secinfo for instance) edit the secinfo file and add the following line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES USER=* USER-HOST=* HOST=* And in the reginfo file add the line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES   "
              }
            ],
            "code": [
              {
                "topic": "Troubleshoot RFC communication#",
                "code": "/usr/sap/<SID>/<INSTANCE>/data//usr/sap/<SID>/<INSTANCE>/data/sudo vi secinfoP TP=CMFMES USER=* USER-HOST=* HOST=*P TP=CMFMES"
              }
            ],
            "links": [
              {
                "topic": "Troubleshoot RFC communication#",
                "links": [
                  {
                    "description": "Troubleshoot RFC communication# (1)",
                    "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_rfc_communication/#troubleshoot-rfc-communication"
                  },
                  {
                    "description": "Troubleshoot RFC communication# (2)",
                    "link": "https://developer.criticalmanufacturing.com/images/create_secinfo.PNG"
                  },
                  {
                    "description": "Troubleshoot RFC communication# (3)",
                    "link": "https://developer.criticalmanufacturing.com/images/secinfo_file.PNG"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_rfc_communication/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Configure MES to accept a IDoc message",
        "definition": [
          {
            "topic": "Configure MES to accept a IDoc message#",
            "definition": "# MES needs a configuration to accept an IDoc. The configuration can be done in Administration > ERP. It is necessary to configure the following attributes: Name: A designation to identity the map Description: A text value to identity the purpose of the map IDoc: The IDoc version to accept. Please note that this has to be the version and not the Message Type. DEE Action: The DEE Action that will be used to process the IDoc Name: A designation to identity the map Description: A text value to identity the purpose of the map IDoc: The IDoc version to accept. Please note that this has to be the version and not the Message Type. DEE Action: The DEE Action that will be used to process the IDoc   "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Configure MES to accept a IDoc message#",
            "links": [
              {
                "description": "Configure MES to accept a IDoc message# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_accept_idoc/#configure-mes-to-accept-a-idoc-message"
              },
              {
                "description": "Configure MES to accept a IDoc message# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/accept_idoc.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_accept_idoc/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Configure MES to call a BAPI",
        "definition": [
          {
            "topic": "Configure MES to call a BAPI#",
            "definition": "# To configure MES to call a BAPI it is necessary to register the BAPI in Critical Manufacturing.   The system will generate an assembly to allow calling the BAPI in a DEE Rule. The assembly will be called Cmf.Custom.BusinessObjects.ErpCustomManagement.dll and will be placed in the host directory. If the host is already loading a copy of the assembly the replacement process will fail and it is necessary to search the temporary folders for the assembly and manually replacing it. "
          }
        ],
        "code": [
          {
            "topic": "Configure MES to call a BAPI#",
            "code": "Cmf.Custom.BusinessObjects.ErpCustomManagement.dll"
          }
        ],
        "links": [
          {
            "topic": "Configure MES to call a BAPI#",
            "links": [
              {
                "description": "Configure MES to call a BAPI# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_call_bapi/#configure-mes-to-call-a-bapi"
              },
              {
                "description": "Configure MES to call a BAPI# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/register_bapi.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_call_bapi/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Configure MES connection to SAP",
        "definition": [
          {
            "topic": "Configure MES connection to SAP#",
            "definition": "# The connection to SAP is configured in Administration > Configuration in the path /Cmf/System/Configuration/ERP/SAP: Client: Enter the SAP Client to logon to ConnectorLicense: Enter your Theobald Connector License Host: Enter the SAP system host name or IP Address Language: Enter the language that is set for the SAP User User: Enter the SAP User Password: Enter the SAP User password Service: Enter the gateway name SystemNumber: Enter the SAP Instance Number ProgramId: Enter the name of the Registerer Server Program configured on SAP in the RFC Destination Client: Enter the SAP Client to logon to ConnectorLicense: Enter your Theobald Connector License Host: Enter the SAP system host name or IP Address Language: Enter the language that is set for the SAP User User: Enter the SAP User Password: Enter the SAP User password Service: Enter the gateway name SystemNumber: Enter the SAP Instance Number ProgramId: Enter the name of the Registerer Server Program configured on SAP in the RFC Destination For the connector to work the integration feature must be enabled. The setting to do so is /Cmf/System/Configuration/ERP/IsActive. "
          },
          {
            "topic": "Connection validation#",
            "definition": "# In SAP on the SM59 transaction there is a button that tests the connection to the external system. If that connection test passes then there is network connectivity between SAP and MES. On the MES side one common test is to go to Administration, select System Integrations, and then select SAP. After this, select the RFC view, and select Manage to be able to search for BAPIs (a dialog box should open to allow the search). If you can search, then the connection should be OK. "
          }
        ],
        "code": [
          {
            "topic": "Configure MES connection to SAP#",
            "code": "/Cmf/System/Configuration/ERP/SAP/Cmf/System/Configuration/ERP/IsActive"
          }
        ],
        "links": [
          {
            "topic": "Configure MES connection to SAP#",
            "links": [
              {
                "description": "Configure MES connection to SAP# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/#configure-mes-connection-to-sap"
              }
            ]
          },
          {
            "topic": "Connection validation#",
            "links": [
              {
                "description": "Connection validation# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/#connection-validation"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_mes_to_sap/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Configure SAP to accept MES connections",
        "definition": [
          {
            "topic": "Configure SAP to accept MES connections#",
            "definition": "# To distribute data to external systems at least the following steps are required: "
          },
          {
            "topic": "Create a Logical System for the MES#",
            "definition": "# SAP needs a logical system for every participant in a distributed system. To create a Logical System for MES use the transaction code BD54.   "
          },
          {
            "topic": "Create a RFC Destination for MES#",
            "definition": "# The RFC destination is where you configure how SAP will connect to MES. Use the transaction code SM59. Use the following configuration as an example:   Follow the instructions to configure the MES side and use the Connection Test button to verify that the systems are connected. Also verify that the Unicode settings for both systems are aligned.   "
          },
          {
            "topic": "Create a Distribution Model#",
            "definition": "# The Distribution Model defines the message type of data to be exchanged. To Create a Distribution Model between SAP and MES use transaction BD64. Each message type that has to be exchanged between the two systems needs to be declared in the Distribution Model.   "
          },
          {
            "topic": "Define an IDoc Port#",
            "definition": "# Use transaction WE21 to configure an IDoc port. The port type must be transactional. The name of the port must be unique and refer to the RFC destination for MES.   "
          },
          {
            "topic": "Generate Partner Profiles (WE20)#",
            "definition": "# From the Distribution Model it is possible to generate Partner Profiles automatically by selecting Generate partner profiles from the Environment menu. This can also be done manually using transaction WE20. The recommended approach to prevent configuration users is using the automatic generation.   "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Configure SAP to accept MES connections#",
            "links": [
              {
                "description": "Configure SAP to accept MES connections# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#configure-sap-to-accept-mes-connections"
              }
            ]
          },
          {
            "topic": "Create a Logical System for the MES#",
            "links": [
              {
                "description": "Create a Logical System for the MES# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-logical-system-for-the-mes"
              },
              {
                "description": "Create a Logical System for the MES# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/new_logical_system.PNG"
              }
            ]
          },
          {
            "topic": "Create a RFC Destination for MES#",
            "links": [
              {
                "description": "Create a RFC Destination for MES# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-rfc-destination-for-mes"
              },
              {
                "description": "Create a RFC Destination for MES# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/rfc_destination.PNG"
              },
              {
                "description": "Create a RFC Destination for MES# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/rfc.PNG"
              }
            ]
          },
          {
            "topic": "Create a Distribution Model#",
            "links": [
              {
                "description": "Create a Distribution Model# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#create-a-distribution-model"
              },
              {
                "description": "Create a Distribution Model# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/sap_distribution_model.PNG"
              }
            ]
          },
          {
            "topic": "Define an IDoc Port#",
            "links": [
              {
                "description": "Define an IDoc Port# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#define-an-idoc-port"
              },
              {
                "description": "Define an IDoc Port# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/sap_idoc_port.PNG"
              }
            ]
          },
          {
            "topic": "Generate Partner Profiles (WE20)#",
            "links": [
              {
                "description": "Generate Partner Profiles (WE20)# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/#generate-partner-profiles-we20"
              },
              {
                "description": "Generate Partner Profiles (WE20)# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/sap_generate_profiles.PNG"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/configure_sap_to_mes/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "SAP ALE concepts",
        "definition": [
          {
            "topic": "SAP ALE concepts#",
            "definition": "# As an integration developer you will need to understand some SAP Basis concepts in order to be able to configure SAP to communicate with MES, to troubleshoot communication problems and to be able to develop advanced integrations. In this chapter you will present a quick walk through some of the most important concepts and transactions that are used in ALE scenarios. "
          },
          {
            "topic": "IDoc#",
            "definition": "# IDoc stands for Intermediate Document and is used by SAP to transfer information across business processes and SAP systems. "
          },
          {
            "topic": "Message Control#",
            "definition": "# Message Control is a component used in the outbound process to generate and manage outputs from applications and control their timing and medium of exchange. From our viewpoint it is a way to trigger IDoc generation without having to explicitly code it in the ABAP program although not all SAP business components support Message Control. "
          },
          {
            "topic": "Port Definition#",
            "definition": "# A port is used in the outbound process to determine the name of the EDI subsystem program and the RFC destination. "
          },
          {
            "topic": "RFC Destination#",
            "definition": "# The RFC (Remote Function Call) destination defines the characteristics of communication links to a remote system on which a function needs to be executed. "
          },
          {
            "topic": "Partner Profile#",
            "definition": "# The partner profile configures the partner number, IDoc type, message type, port, process code, the mode in which it communicates with the subsystem, and the person to be notified in case of errors to use in an outbound process. "
          },
          {
            "topic": "Distribution Model#",
            "definition": "# The distribution model configures the messages exchanged between sending and receiving systems. From our viewpoint it will define how SAP will deliver messages to MES. "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "SAP ALE concepts#",
            "links": [
              {
                "description": "SAP ALE concepts# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#sap-ale-concepts"
              }
            ]
          },
          {
            "topic": "IDoc#",
            "links": [
              {
                "description": "IDoc# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#idoc"
              }
            ]
          },
          {
            "topic": "Message Control#",
            "links": [
              {
                "description": "Message Control# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#message-control"
              }
            ]
          },
          {
            "topic": "Port Definition#",
            "links": [
              {
                "description": "Port Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#port-definition"
              }
            ]
          },
          {
            "topic": "RFC Destination#",
            "links": [
              {
                "description": "RFC Destination# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#rfc-destination"
              }
            ]
          },
          {
            "topic": "Partner Profile#",
            "links": [
              {
                "description": "Partner Profile# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#partner-profile"
              }
            ]
          },
          {
            "topic": "Distribution Model#",
            "links": [
              {
                "description": "Distribution Model# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/#distribution-model"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/sap_ale_concepts/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Sending test IDoc from SAP",
        "definition": [
          {
            "topic": "Sending test IDoc from SAP#",
            "definition": "# There are two possible ways to trigger a test IDoc from SAP into MES. Performing the action that triggers the IDoc in SAP Retriggering an existing IDoc Performing the action that triggers the IDoc in SAP Retriggering an existing IDoc "
          },
          {
            "topic": "Triggering the IDoc in SAP#",
            "definition": "# The action to trigger the IDoc from SAP depends on the actual IDoc that is required. A helpful guide can be found in the Theobald documentation regarding on how to setup an environment to trigger a test IDoc (MATMAS). The guide can be found here: https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs ⧉. https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs ⧉ "
          },
          {
            "topic": "Retriggering an existing IDoc#",
            "definition": "# It is possible to replicate an IDoc and force it to be triggered and sent to another system. This will easily allow you to test your SAP connection without the need to understand what is required for the retriggering of a specific IDoc type. This approach has two disadvantages: You cannot edit the content of the IDoc It requires an IDoc having been previously sent to any other system (triggered by the conventional way) You cannot edit the content of the IDoc It requires an IDoc having been previously sent to any other system (triggered by the conventional way) To identify a previous IDoc, of the Message Type that you want, you can use the TCode WE02 (Display IDoc), that allows you to filter for all IDocs triggered in the system by Date and MessageType:   After identifying the IDoc that you want to replicate, take note of the IDoc Number.   The TCode WE19 (Test Tool) allows you to retrigger any IDoc that was already triggered. On the Test Tool page, set the Existing IDoc field with the IDoc Number identified above and selecting the Execute button, as shown in the image below:   After that, the detail of the IDoc will be displayed, and you can trigger it by selecting the Standard Inbound button, as shown in the image below:   Info Please note that a new IDoc is generated. "
          }
        ],
        "code": [
          {
            "topic": "Triggering the IDoc in SAP#",
            "code": "MATMAS"
          },
          {
            "topic": "Retriggering an existing IDoc#",
            "code": "WE02WE19"
          }
        ],
        "links": [
          {
            "topic": "Sending test IDoc from SAP#",
            "links": [
              {
                "description": "Sending test IDoc from SAP# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#sending-test-idoc-from-sap"
              }
            ]
          },
          {
            "topic": "Triggering the IDoc in SAP#",
            "links": [
              {
                "description": "Triggering the IDoc in SAP# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#triggering-the-idoc-in-sap"
              },
              {
                "description": "Triggering the IDoc in SAP# (2)",
                "link": "https://help.theobald-software.com/en/erpconnect/administration/setting-up-an-environment-for-sending-test-idocs"
              }
            ]
          },
          {
            "topic": "Retriggering an existing IDoc#",
            "links": [
              {
                "description": "Retriggering an existing IDoc# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/#retriggering-an-existing-idoc"
              },
              {
                "description": "Retriggering an existing IDoc# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/we_02_page_01.png"
              },
              {
                "description": "Retriggering an existing IDoc# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/we_02_page_02.png"
              },
              {
                "description": "Retriggering an existing IDoc# (4)",
                "link": "https://developer.criticalmanufacturing.com/images/we_19_base_page_01.png"
              },
              {
                "description": "Retriggering an existing IDoc# (5)",
                "link": "https://developer.criticalmanufacturing.com/images/we_19_base_page_02.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/send_test_idoc_from_sap/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Troubleshoot authorization problems",
        "definition": [
          {
            "topic": "Troubleshoot authorization problems#",
            "definition": "# Authorization issues can cause the MES to stop receiving IDocs from the SAP system. When an IDoc is received, the MES tries to get the IDoc Schema from SAP so that it is able to read the IDoc information correctly. Here are some of the possible errors that you can find in the MES log and that may make the MES unable to receive an IDoc successfully: The data for the IDoc with Type=LOIPRO01 was not found in the system. Get IDoc failed: ERPConnect.ERPException: Error while receiving function return values: OBJECT_UNKNOWN The data for the IDoc with Type=LOIPRO01 was not found in the system. Get IDoc failed: ERPConnect.ERPException: Error while receiving function return values: OBJECT_UNKNOWN It is important to identify the adequate function on the SAP system that is being accessed and that the user does not have access to. For that, you can enable tracing in the SAP system and retry the IDoc transaction. "
          },
          {
            "topic": "Steps to enable tracing#",
            "definition": "# Go to the System Trace page (TCode ST01) Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged. Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem: Go to the System Trace page (TCode ST01) Go to the System Trace page (TCode ST01) Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged. Enable the \"Authorization Check\" and use the \"General Filters\" to define the User used by MES and SAP communications, this way we restrict the amount of data being logged.   Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. Enable the trace by selecting Trace On, and redo the IDoc transaction to get the error again in the MES. In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem: In the System Trace page, turn off the trace by selecting Trace Off and select the Analysis button. The failed authorization will appear in red, and will identify the function creating the problem:   For more information, see https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/ ⧉. https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/ ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Troubleshoot authorization problems#",
            "code": "LOIPRO01OBJECT_UNKNOWN"
          },
          {
            "topic": "Steps to enable tracing#",
            "code": "ST01"
          }
        ],
        "links": [
          {
            "topic": "Troubleshoot authorization problems#",
            "links": [
              {
                "description": "Troubleshoot authorization problems# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/#troubleshoot-authorization-problems"
              }
            ]
          },
          {
            "topic": "Steps to enable tracing#",
            "links": [
              {
                "description": "Steps to enable tracing# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/#steps-to-enable-tracing"
              },
              {
                "description": "Steps to enable tracing# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/st01_img_01.png"
              },
              {
                "description": "Steps to enable tracing# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/st01_img_02.png"
              },
              {
                "description": "Steps to enable tracing# (4)",
                "link": "https://blogs.sap.com/2013/12/21/how-to-do-st01-trace/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_authorization/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Troubleshoot RFC communication",
        "definition": [
          {
            "topic": "Troubleshoot RFC communication#",
            "definition": "# Starting from Kernel 720 the SAP Gateway enables gateway security by default and will deny connection to hosts other the the SAP system ones. For production systems please refer to SAP Note 1408081 for further details on how to configure SAP to allow the server hosting Critical Manufacturing MES to connect. For a development system if the customer company policy allows one can configure SAP to accept a less restritive connection configuration: First enter the SMGW transaction and go to Expert Functions > External Security > Display (Sec Info) and check if the secinfo file was already created or it the system is using the default settings. If the file has not been created go to Expert Functions > External Security > Create (Sec Info). This will create a new file under /usr/sap/<SID>/<INSTANCE>/data/. First enter the SMGW transaction and go to Expert Functions > External Security > Display (Sec Info) and check if the secinfo file was already created or it the system is using the default settings. If the file has not been created go to Expert Functions > External Security > Create (Sec Info). This will create a new file under /usr/sap/<SID>/<INSTANCE>/data/.   Repeat the same steps but for the reginfo file. Logon to your SAP system using ssh. Go to the /usr/sap/<SID>/<INSTANCE>/data/ directory. Using a text editor (sudo vi secinfo for instance) edit the secinfo file and add the following line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES USER=* USER-HOST=* HOST=* And in the reginfo file add the line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES Repeat the same steps but for the reginfo file. Logon to your SAP system using ssh. Go to the /usr/sap/<SID>/<INSTANCE>/data/ directory. Using a text editor (sudo vi secinfo for instance) edit the secinfo file and add the following line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES USER=* USER-HOST=* HOST=* And in the reginfo file add the line replacing the TP parameter with the choosen Registered Server Program name: P TP=CMFMES   "
          }
        ],
        "code": [
          {
            "topic": "Troubleshoot RFC communication#",
            "code": "/usr/sap/<SID>/<INSTANCE>/data//usr/sap/<SID>/<INSTANCE>/data/sudo vi secinfoP TP=CMFMES USER=* USER-HOST=* HOST=*P TP=CMFMES"
          }
        ],
        "links": [
          {
            "topic": "Troubleshoot RFC communication#",
            "links": [
              {
                "description": "Troubleshoot RFC communication# (1)",
                "link": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_rfc_communication/#troubleshoot-rfc-communication"
              },
              {
                "description": "Troubleshoot RFC communication# (2)",
                "link": "https://developer.criticalmanufacturing.com/images/create_secinfo.PNG"
              },
              {
                "description": "Troubleshoot RFC communication# (3)",
                "link": "https://developer.criticalmanufacturing.com/images/secinfo_file.PNG"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/integration/sap/troubleshoot_rfc_communication/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [
      {
        "topic": "Configurations#",
        "code": "/Cmf/System/Configuration/Integration/IntegrationSchedulerIsActive//Cmf/System/Configuration/Integration/MaxNumberOfRetries//Cmf/System/Configuration/Integration/PollingInterval/"
      }
    ],
    "links": [
      {
        "topic": "System Integrations#",
        "links": [
          {
            "description": "System Integrations# (1)",
            "link": "https://developer.criticalmanufacturing.com/integration/#system-integrations"
          },
          {
            "description": "System Integrations# (2)",
            "link": "http://help.criticalmanufacturing.com/userguide/administration/integration/"
          }
        ]
      },
      {
        "topic": "Integration Entries#",
        "links": [
          {
            "description": "Integration Entries# (1)",
            "link": "https://developer.criticalmanufacturing.com/integration/#integration-entries"
          },
          {
            "description": "Integration Entries# (2)",
            "link": "https://developer.criticalmanufacturing.com/images/integration_entry_context_diagram.png"
          }
        ]
      },
      {
        "topic": "Configurations#",
        "links": [
          {
            "description": "Configurations# (1)",
            "link": "https://developer.criticalmanufacturing.com/integration/#configurations"
          }
        ]
      },
      {
        "topic": "Integration Packages#",
        "links": [
          {
            "description": "Integration Packages# (1)",
            "link": "https://developer.criticalmanufacturing.com/integration/#integration-packages"
          },
          {
            "description": "Integration Packages# (2)",
            "link": "https://developer.criticalmanufacturing.com/integration/generic_integrations/"
          }
        ]
      },
      {
        "topic": "SAP Connector#",
        "links": [
          {
            "description": "SAP Connector# (1)",
            "link": "https://developer.criticalmanufacturing.com/integration/#sap-connector"
          },
          {
            "description": "SAP Connector# (2)",
            "link": "https://developer.criticalmanufacturing.com/integration/sap/"
          }
        ]
      }
    ]
  },
  {
    "topic": "Presentation",
    "href": "https://developer.criticalmanufacturing.com/presentation/",
    "flag": true,
    "definition": [
      {
        "topic": "Presentation Tier#",
        "definition": "# The presentation tier encompasses all the functionality responsible for the display of information and human interaction in a friendly and ergonomic manner. Environment Setup Application Library Metadata Localization Routing Services Component Menu Widget UI Page Converter Data Source Action Bar Wizard Execution View Basic Information Entity Page Views Compare Entity View Button Injection Layout Page Sections Environment Setup Environment Setup Application Application Library Library Metadata Metadata Localization Localization Routing Routing Services Services Component Component Menu Menu Widget Widget UI Page UI Page Converter Converter Data Source Data Source Action Bar Action Bar Wizard Wizard Execution View Execution View Basic Information Basic Information Entity Page Views Entity Page Views Compare Entity View Compare Entity View Button Injection Button Injection Layout Layout Page Sections Page Sections "
      }
    ],
    "submodulos": [
      {
        "topic": "Environment Setup",
        "definition": [
          {
            "topic": "Environment Setup#",
            "definition": "# In this section, we'll be putting together the structure to build a presentation implementation project. This project will allow us to develop our own presentation customization packages locally, which we can deploy into the Critical Manufacturing MES. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Have installed Node.js (LTS version) and Node Package Manager (npm) ⧉;\n\nTo check the version or if it's already installed, run the following commands on the command line of your machine: node -v and npm -v.\n\nNote\n\nIf you install Node.js, the package manager npm is included. To check the version or if it's already installed, run the following commands on the command line of your machine: node -v and npm -v. Have access to the Critical Manufacturing Presentation template ⧉; Have configured or have access to an npm registry containing Critical Manufacturing presentation packages. Have installed Node.js (LTS version) and Node Package Manager (npm) ⧉;\n\nTo check the version or if it's already installed, run the following commands on the command line of your machine: node -v and npm -v.\n\nNote\n\nIf you install Node.js, the package manager npm is included. Have installed Node.js (LTS version) and Node Package Manager (npm) ⧉; Node.js Node Package Manager (npm) ⧉ To check the version or if it's already installed, run the following commands on the command line of your machine: node -v and npm -v. To check the version or if it's already installed, run the following commands on the command line of your machine: node -v and npm -v. Note If you install Node.js, the package manager npm is included. Have access to the Critical Manufacturing Presentation template ⧉; Have access to the Critical Manufacturing Presentation template ⧉; Critical Manufacturing Presentation template ⧉ Have configured or have access to an npm registry containing Critical Manufacturing presentation packages. npm registry "
          },
          {
            "topic": "Extra: Load Critical Manufacturing Customization Packages to the Local Repository#",
            "definition": "# If it is desired to support a local package repository, Critical Manufacturing provides a tool that allows you to load Critical Manufacturing customization packages into a local npm repository. "
          },
          {
            "topic": "Requirements#",
            "definition": "# It is assumed that a local npm repository is already configured and that a Critical Manufacturing ISO is available (this repository can be an open source tool such as verdaccio). This repository should be configured to have max_body_size: 150mb in the config file ⧉ (default path: /verdaccio/config.yaml). Be logged in the local repository\nnpm adduser --registry http://<repository-address>:4873\nnpm login --registry http://<repository-address>:4873 npm adduser --registry http://<repository-address>:4873 npm login --registry http://<repository-address>:4873 It is assumed that a local npm repository is already configured and that a Critical Manufacturing ISO is available (this repository can be an open source tool such as verdaccio). This repository should be configured to have max_body_size: 150mb in the config file ⧉ (default path: /verdaccio/config.yaml). verdaccio config file ⧉ Be logged in the local repository\nnpm adduser --registry http://<repository-address>:4873\nnpm login --registry http://<repository-address>:4873 npm adduser --registry http://<repository-address>:4873 npm login --registry http://<repository-address>:4873 npm adduser --registry http://<repository-address>:4873 npm login --registry http://<repository-address>:4873 "
          },
          {
            "topic": "First Steps#",
            "definition": "# Get the LoadPackagesToLocalRepository tool. Copy the tool to a folder of your choice. Get the LoadPackagesToLocalRepository tool. LoadPackagesToLocalRepository Copy the tool to a folder of your choice. Run the tool, giving the two required parameters (powershell): A complete path to the Critical Manufacturing ISO. The complete address of the local npm repository. A complete path to the Critical Manufacturing ISO. The complete address of the local npm repository. After waiting for the tool to finish running, the Critical Manufacturing customization packages should now be available in your local repository. "
          },
          {
            "topic": "Creating a project#",
            "definition": "# In this section we'll be describe how to setup the environment for a new customization project. "
          },
          {
            "topic": "1. Check the version of Angular that you should install#",
            "definition": "# Find the version of Angular that you should install: Replace <version> with the version of the cmf-core-ui package that you want to use, such as latest, release-100, etc. Replace <version> with the version of the cmf-core-ui package that you want to use, such as latest, release-100, etc. "
          },
          {
            "topic": "2. Create a new Angular Project#",
            "definition": "# Generate a new Angular Project:   "
          },
          {
            "topic": "3. Configure the .npmrc file#",
            "definition": "# Create a new .npmrc file in the root directory of the project and add the following line: Replace <repository-address> with the address of the local npm repository. Replace <repository-address> with the address of the local npm repository. "
          },
          {
            "topic": "4. Add the Critical Manufacturing Schematics package to the project#",
            "definition": "# Add the Critical Manufacturing Schematics ⧉ to the project: Critical Manufacturing Schematics ⧉ Replace <version> with the version of the ngx-schematics package that you want to use, such as latest, release-100, etc. For more information about the ng add command of @criticalmanufacturing/ngx-schematics, see the ng-add documentation ⧉. For more information about the ng add command, see the Angular CLI documentation ⧉. Replace <version> with the version of the ngx-schematics package that you want to use, such as latest, release-100, etc. For more information about the ng add command of @criticalmanufacturing/ngx-schematics, see the ng-add documentation ⧉. ng-add documentation ⧉ For more information about the ng add command, see the Angular CLI documentation ⧉. Angular CLI documentation ⧉   "
          },
          {
            "topic": "5. Setup the configuration file#",
            "definition": "# Edit the config.json file in [root folder]/src/assets and change the appropriate fields in order to adjust the development environment to your environment settings. "
          },
          {
            "topic": "6. Setup the ESLint#",
            "definition": "# Warning This step is only necessary if you added ESLint to your project. TSLint has been deprecated, and as a result, the UI now uses ESLint. ESLint is a popular and widely adopted linter for JavaScript that provides a more powerful and flexible way to enforce code quality and consistency. In the .eslintrc.json, define the rules that you want to use. ESLint For more information, see the ESLint documentation ⧉. For more information, see the ESLint documentation ⧉. ESLint documentation ⧉ "
          },
          {
            "topic": "7. Run the application#",
            "definition": "# Run the application with ng serve. The interface should be displayed at a localhost address, and you should use the Google Chrome ⧉ browser to access it. This way, you will have access to the GUI that contains the base MES functionalities. Google Chrome ⧉ "
          },
          {
            "topic": "Conclusion#",
            "definition": "# We now have the basic structure ready to start the development process, as we have the presentation layer running on a custom project on our machine. This is the first setup necessary to customize the interface.   "
          }
        ],
        "code": [
          {
            "topic": "Before you begin#",
            "code": "node -vnpm -v"
          },
          {
            "topic": "Requirements#",
            "code": "max_body_size: 150mbnpm adduser --registry http://<repository-address>:4873npm login --registry http://<repository-address>:4873"
          },
          {
            "topic": "First Steps#",
            "code": ".\\LoadPackagesToLocalRepository.ps1 -PathToISO \"C:\\ISO\\Critical Manufacturing 10.0.0.iso\" -RepositoryAddress \"http://localhost:4873\" -ExtractionFolder \"C:\\CMF\\packages\""
          },
          {
            "topic": "1. Check the version of Angular that you should install#",
            "code": "npm view cmf-core-ui@<version> peerDependencies.@angular/common --registry=http://<repository-address>:4873<version>cmf-core-uilatestrelease-100cmf-core-uirelease-100npm view cmf-core-ui@release-100 peerDependencies.@angular/common --registry=http://localhost:4873"
          },
          {
            "topic": "2. Create a new Angular Project#",
            "code": "npx @angular/cli@<version> new <project-name> --routing=false --style=less<version><project-name>--routing=false--style=lesscssscsssassless15.2.1npx @angular/cli@15.2.1 new icf-tutorial --routing=false --style=less"
          },
          {
            "topic": "3. Configure the .npmrc file#",
            "code": ".npmrc.npmrcregistry=http://<repository-address>:4873<repository-address>.npmrcregistry=http://localhost:4873"
          },
          {
            "topic": "4. Add the Critical Manufacturing Schematics package to the project#",
            "code": "ng add @criticalmanufacturing/ngx-schematics@<version><version>ngx-schematicsng add@criticalmanufacturing/ngx-schematicsng addngx-schematicsrelease-100Coreng add @criticalmanufacturing/ngx-schematics@release-100\n\n? What is the base app you want to use? Core\n? Add eslint to your project? Yes\n? What is the distribution to utilize? release-100"
          },
          {
            "topic": "5. Setup the configuration file#",
            "code": "config.json[root folder]/src/assets"
          },
          {
            "topic": "6. Setup the ESLint#",
            "code": ".eslintrc.json"
          },
          {
            "topic": "7. Run the application#",
            "code": "ng serve"
          }
        ],
        "links": [
          {
            "topic": "Environment Setup#",
            "links": [
              {
                "description": "Environment Setup# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#environment-setup"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#before-you-begin"
              },
              {
                "description": "Before you begin# (2)",
                "link": "https://nodejs.org/"
              },
              {
                "description": "Before you begin# (3)",
                "link": "https://www.npmjs.com/"
              },
              {
                "description": "Before you begin# (4)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics"
              },
              {
                "description": "Before you begin# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/presentation/localrepository/"
              }
            ]
          },
          {
            "topic": "Extra: Load Critical Manufacturing Customization Packages to the Local Repository#",
            "links": [
              {
                "description": "Extra: Load Critical Manufacturing Customization Packages to the Local Repository# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#extra-load-critical-manufacturing-customization-packages-to-the-local-repository"
              }
            ]
          },
          {
            "topic": "Requirements#",
            "links": [
              {
                "description": "Requirements# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#requirements"
              },
              {
                "description": "Requirements# (2)",
                "link": "https://www.verdaccio.org/"
              },
              {
                "description": "Requirements# (3)",
                "link": "https://verdaccio.org/docs/en/configuration#max-body-size"
              }
            ]
          },
          {
            "topic": "First Steps#",
            "links": [
              {
                "description": "First Steps# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#first-steps"
              },
              {
                "description": "First Steps# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/assets/LoadPackagesToLocalRepository.ps1"
              }
            ]
          },
          {
            "topic": "Creating a project#",
            "links": [
              {
                "description": "Creating a project# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#creating-a-project"
              }
            ]
          },
          {
            "topic": "1. Check the version of Angular that you should install#",
            "links": [
              {
                "description": "1. Check the version of Angular that you should install# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#1-check-the-version-of-angular-that-you-should-install"
              }
            ]
          },
          {
            "topic": "2. Create a new Angular Project#",
            "links": [
              {
                "description": "2. Create a new Angular Project# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#2-create-a-new-angular-project"
              }
            ]
          },
          {
            "topic": "3. Configure the .npmrc file#",
            "links": [
              {
                "description": "3. Configure the .npmrc file# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#3-configure-the-npmrc-file"
              }
            ]
          },
          {
            "topic": "4. Add the Critical Manufacturing Schematics package to the project#",
            "links": [
              {
                "description": "4. Add the Critical Manufacturing Schematics package to the project# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#4-add-the-critical-manufacturing-schematics-package-to-the-project"
              },
              {
                "description": "4. Add the Critical Manufacturing Schematics package to the project# (2)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics"
              },
              {
                "description": "4. Add the Critical Manufacturing Schematics package to the project# (3)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics#ng-add"
              },
              {
                "description": "4. Add the Critical Manufacturing Schematics package to the project# (4)",
                "link": "https://angular.io/cli/add"
              },
              {
                "description": "4. Add the Critical Manufacturing Schematics package to the project# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/ngx-schematics-add.png"
              }
            ]
          },
          {
            "topic": "5. Setup the configuration file#",
            "links": [
              {
                "description": "5. Setup the configuration file# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#5-setup-the-configuration-file"
              }
            ]
          },
          {
            "topic": "6. Setup the ESLint#",
            "links": [
              {
                "description": "6. Setup the ESLint# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#6-setup-the-eslint"
              },
              {
                "description": "6. Setup the ESLint# (2)",
                "link": "https://eslint.org/docs/user-guide/configuring"
              }
            ]
          },
          {
            "topic": "7. Run the application#",
            "links": [
              {
                "description": "7. Run the application# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#7-run-the-application"
              },
              {
                "description": "7. Run the application# (2)",
                "link": "https://www.google.com/chrome/"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/#conclusion"
              },
              {
                "description": "Conclusion# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/mes.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Action Bar",
        "definition": [
          {
            "topic": "Action Bar#",
            "definition": "# The Action Bar component creates a ribbon on the top section of a page. In it, you will find Action Buttons and Action Button Groups. An Action Button Group is a visual way to gather Action Buttons (Group Button), in a menu style:   "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: have generated the environment setup, the necessary package icf-cookies-custom, and the component CookiesCatalogue. have generated the environment setup, the necessary package icf-cookies-custom, and the component CookiesCatalogue. "
          },
          {
            "topic": "Creating an Action Bar#",
            "definition": "# The Action Bar should contain, at least, Action Buttons. These can be added in the template (*.html), and manipulated by the metadata file of the package. Edit the cookie-catalogue.component.html file: Edit the cookie-catalogue.component.ts file: Edit the icf-cookies-custom-metadata.service.ts file: For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. For more information about the definition of Action Button in the Metadata, please refer to Action Button Metadata Documentation. For more information about the definition of Action Button Group in the Metadata, please refer to Action Button Group Metadata Documentation. For more information about the definition of Action Button Group in the Metadata, please refer to Action Group Metadata Documentation. For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. Action Bar Metadata Documentation For more information about the definition of Action Button in the Metadata, please refer to Action Button Metadata Documentation. Action Button Metadata Documentation For more information about the definition of Action Button Group in the Metadata, please refer to Action Button Group Metadata Documentation. Action Button Group Metadata Documentation For more information about the definition of Action Button Group in the Metadata, please refer to Action Group Metadata Documentation. Action Group Metadata Documentation If you go to the Cookies Catalogue page, you should see the new Action Bar. Note We removed and added some buttons by metadata.   "
          },
          {
            "topic": "Adding a button to an existing Entity Page#",
            "definition": "# If you want to add a new Action Button to the Action Bar of an entity page that already exists in the system (example: the main Area entity page), you must: Use the appropriate entity id as a reference in the actionBars entry of the icf-cookies-custom-metadata.service.ts file. Use the cmf.core.business.controls.entityPage.Entity format. Use the appropriate entity id as a reference in the actionBars entry of the icf-cookies-custom-metadata.service.ts file. Use the cmf.core.business.controls.entityPage.Entity format. By replacing Entity with the appropriate name of the entity, you will be able to customize the referenced entity page: For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. Action Bar Metadata Documentation This entity name can be easily looked up in the developer console of the browser:   If you want to add a new Action Button to an Action Button Group that already exists in the system, you have to use a different configuration. You will still need to: Use the Action Bar reference of the target entity page. And then also: Specify the type with ActionBarElementType.ACTION_BUTTON_GROUP_BUTTON. Specify the actionButtonGroupId. Use the Action Bar reference of the target entity page. And then also: Specify the type with ActionBarElementType.ACTION_BUTTON_GROUP_BUTTON. Specify the actionButtonGroupId. In this example, you can see the injection of a button in the Change Group of the Material entity for an operation called Split and Change Product: For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. For more information about the definition of Action Bar in the Metadata, please refer to Action Bar Metadata Documentation. Action Bar Metadata Documentation The Action Button Group id can be easily looked up in the developer console of the browser:   "
          },
          {
            "topic": "Conclusion#",
            "definition": "# You have now created a custom Action Bar, with Action Buttons and Action Button Groups. "
          }
        ],
        "code": [
          {
            "topic": "Creating an Action Bar#",
            "code": "<cmf-core-controls-actionBar\n    actionBar-id=\"icf.cookies.cookiesCatalogue\">\n\n    <cmf-core-controls-actionButton\n        button-id=\"Dummy.Show\">\n    </cmf-core-controls-actionButton>\n\n    <cmf-core-controls-actionButtonGroup\n        button-id=\"Cookies.ButtonGroup\"\n        mainTitle=\"Menu\"\n        icon-class=\"icon-mes-et-sm-bom\">\n\n        <cmf-core-controls-actionButtonGroupButton\n            button-id=\"Cookies.NewCookie\">\n        </cmf-core-controls-actionButtonGroupButton>\n\n        <cmf-core-controls-actionButtonGroupButton\n            button-id=\"Cookies.EditCookie\">\n        </cmf-core-controls-actionButtonGroupButton>\n\n    </cmf-core-controls-actionButtonGroup>\n\n</cmf-core-controls-actionBar>\n\n<header>\n    <h3>Catalogue</h3>\n</header>\n(...)(...)\nimport {\n    ActionBarModule,\n    ActionButtonModule,\n    ActionButtonGroupModule,\n    ActionButtonGroupButtonModule\n} from \"cmf-core-controls\";\n\n(...)\n@NgModule({\n    imports: [\n        ActionBarModule,\n        ActionButtonModule,\n        ActionButtonGroupModule,\n        ActionButtonGroupButtonModule\n    ],\n(...)(...)\n\n/**\n * Action Button Groups\n */\npublic override get actionButtonGroups(): ActionButtonGroup[] {\n    return [\n        {\n            id: 'Cookies.ButtonGroup'\n        }\n    ];\n}\n\n/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Dummy.Show',\n            title: $localize`:@@icf-cookies-custom/main#DUMMY:Dummy`,\n            iconClass: '',\n            actionId: ''\n        },\n        {\n            id: 'LandingPage.Show',\n            title: $localize`:@@icf-cookies-custom/main#COOKIES_PAGE:Cookies Page`,\n            iconClass: 'icon-core-st-sm-new',\n            actionId: 'Cookies.LandingPage.Show'\n        },\n        {\n            id: 'Cookies.NewCookie',\n            title: $localize`:@@icf-cookies-custom/main#NEW_COOKIE:New Cookie`,\n            iconClass: '',\n            actionId: ''\n        },\n        {\n            id: 'Cookies.EditCookie',\n            title: $localize`:@@icf-cookies-custom/main#EDIT_COOKIE:Edit Cookie`,\n            iconClass: '',\n            actionId: ''\n        }\n    ];\n}\n\n/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'icf.cookies.cookiesCatalogue',\n            elementsToAdd: [\n                {\n                    id: 'LandingPage.Show',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ],\n            elementsToRemove: [\n                {\n                    id: 'Dummy.Show',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}\n\n/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'Cookies.Catalogue.Show',\n            route: 'CookiesCatalogue'\n        },\n        {\n            id: 'Cookies.LandingPage.Show',\n            route: 'LandingPage/Cookies'\n        }\n    ];\n}\n(...)"
          },
          {
            "topic": "Adding a button to an existing Entity Page#",
            "code": "actionBarscmf.core.business.controls.entityPage.(...)\n    public override get actionBars(): ActionBar[] {\n        return [\n            {\n                id: 'cmf.core.business.controls.entityPage.Area',\n                elementsToAdd: [\n                    {\n                        id: 'LandingPage.Show',\n                        type: ActionBarElementType.ACTION_BUTTON\n                    }\n                ],\n                elementsToRemove: [\n                    {\n                        id: 'Dummy.Show',\n                        type: ActionBarElementType.ACTION_BUTTON\n                    }\n                ]\n            }\n        ];\n    }\n(...)typeActionBarElementType.ACTION_BUTTON_GROUP_BUTTONactionButtonGroupId(...)\n    public override get actionBars(): ActionBar[] {\n        return [\n            {\n                id: 'cmf.core.business.controls.entityPage.Material',\n                elementsToAdd: [\n                    {\n                        id: 'Dummy.SplitAndChangeProduct',\n                        type: ActionBarElementType.ACTION_BUTTON_GROUP_BUTTON,\n                        actionButtonGroupId: 'Material.Change.Group'\n                    }\n                ]\n            }\n        ];\n    }\n(...)"
          }
        ],
        "links": [
          {
            "topic": "Action Bar#",
            "links": [
              {
                "description": "Action Bar# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/#action-bar"
              },
              {
                "description": "Action Bar# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/action-bar-buttons-group.png"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating an Action Bar#",
            "links": [
              {
                "description": "Creating an Action Bar# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/#creating-an-action-bar"
              },
              {
                "description": "Creating an Action Bar# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/"
              },
              {
                "description": "Creating an Action Bar# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/"
              },
              {
                "description": "Creating an Action Bar# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/"
              },
              {
                "description": "Creating an Action Bar# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/"
              },
              {
                "description": "Creating an Action Bar# (6)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/action-bar-done.png"
              }
            ]
          },
          {
            "topic": "Adding a button to an existing Entity Page#",
            "links": [
              {
                "description": "Adding a button to an existing Entity Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/#adding-a-button-to-an-existing-entity-page"
              },
              {
                "description": "Adding a button to an existing Entity Page# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/"
              },
              {
                "description": "Adding a button to an existing Entity Page# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/action-bar-custom.png"
              },
              {
                "description": "Adding a button to an existing Entity Page# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/"
              },
              {
                "description": "Adding a button to an existing Entity Page# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/action-bar-custom-02.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/#conclusion"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/actionbar/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Application",
        "definition": [
          {
            "topic": "Application#",
            "definition": "# This section describes the concept of an application in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Created the environment setup. Created the environment setup. "
          },
          {
            "topic": "Structure#",
            "definition": "# The UI application starts structured according to the Angular standard. After adding the the Critical Manufacturing Schematics ⧉ using theng add command, you should end up with the following structure: Critical Manufacturing Schematics ⧉ "
          },
          {
            "topic": "Modifications to Angular Project Files#",
            "definition": "# In order to follow the Critical Manufacturing UI standards, some changes are automatically made by the Critical Manufacturing Schematics ⧉ to the Angular files: Critical Manufacturing Schematics ⧉ The .eslintrc.json file is created to configure the linting of the application if ESLint is accepted in the installation. The angular.json file is updated to include the necessary assets, styles, and scripts based on the selected base application. The ngsw-config.json file is created to configure the service worker. The package.json file is updated by adding various packages necessary for the functionality of the application. These include the @angular/localize package for internationalization, @angular/service-worker for service workers, and eslint packages for linting the application. Additionally, the package of the selected base application is added, which provides access to components, routes, metadata, and other features required by the application. The tsconfig.app.json and tsconfig.spec.json files are updated to include the @angular/localize type. The favicon.ico file is removed from the src folder. The src/index.html file is updated to include the web manifest, the initial themes, and the loading spinner. The src/main.ts file is changed to reference the @angular/localize type, to load the application configuration (config.json), and dynamically load the application module. The src/manifest.webmanifest file is created to configure the web manifest. The src/app/app.component.html file content is replaced by the router-outlet. The src/app/app.module.ts file is updated to register the service worker, import the chosen base application module, and use the metadata-based routing strategy. The src/assets/config.json file is created to store the application configuration. The .eslintrc.json file is created to configure the linting of the application if ESLint is accepted in the installation. The angular.json file is updated to include the necessary assets, styles, and scripts based on the selected base application. The ngsw-config.json file is created to configure the service worker. The package.json file is updated by adding various packages necessary for the functionality of the application. These include the @angular/localize package for internationalization, @angular/service-worker for service workers, and eslint packages for linting the application. Additionally, the package of the selected base application is added, which provides access to components, routes, metadata, and other features required by the application. The tsconfig.app.json and tsconfig.spec.json files are updated to include the @angular/localize type. The favicon.ico file is removed from the src folder. The src/index.html file is updated to include the web manifest, the initial themes, and the loading spinner. The src/main.ts file is changed to reference the @angular/localize type, to load the application configuration (config.json), and dynamically load the application module. The src/manifest.webmanifest file is created to configure the web manifest. The src/app/app.component.html file content is replaced by the router-outlet. The src/app/app.module.ts file is updated to register the service worker, import the chosen base application module, and use the metadata-based routing strategy. The src/assets/config.json file is created to store the application configuration. "
          },
          {
            "topic": "Application Module#",
            "definition": "# The application module plays a key role in the Angular application as it is responsible for importing and configuring the libraries metadata, which can be used by the application. Additionally, the application module is where the service worker is registered. The application module is located in the src/app/app.module.ts file, and the NgModule imports must follow the following order: Angular modules, such as BrowserModule. Selected base application module. Application metadata modules. MetadataRoutingModule. Angular modules, such as BrowserModule. Selected base application module. Application metadata modules. MetadataRoutingModule. The MetadataRoutingModule introduces a new routing strategy that relies on metadata to define the routes. This strategy works by collecting all routes from the imported metadata in the application module and updating the router configuration accordingly. For more information about Angular File Structure, see Angular File Structure Documentation ⧉. For more information about ESLint configuration, see ESLint Documentation ⧉. For more information about the service worker, see Angular Service Worker Documentation ⧉. For more information about the web manifest, see Web Manifest Documentation ⧉. For more information about Angular File Structure, see Angular File Structure Documentation ⧉. Angular File Structure Documentation ⧉ For more information about ESLint configuration, see ESLint Documentation ⧉. ESLint Documentation ⧉ For more information about the service worker, see Angular Service Worker Documentation ⧉. Angular Service Worker Documentation ⧉ For more information about the web manifest, see Web Manifest Documentation ⧉. Web Manifest Documentation ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Structure#",
            "code": "ng addapplication\n├── .vscode\n|   ├── extensions.json\n|   ├── launch.json\n|   └── tasks.json\n├── src\n|   ├── app\n|   │   ├── *.ts\n|   │   ├── *.html\n|   │   └── *.less\n|   ├── assets\n|   │   ├── .gitkeep\n|   │   └── config.json\n|   ├── index.html\n|   ├── main.ts\n|   ├── manifest.webmanifest\n|   └── styles.less\n├── .editorconfig\n├── .eslintrc.json\n├── .gitignore\n├── .npmrc\n├── angular.json\n├── ngsw-config.json\n├── package.json\n├── README.md\n├── tsconfig.app.json\n├── tsconfig.json\n└── tsconfig.spec.json"
          },
          {
            "topic": "Modifications to Angular Project Files#",
            "code": ".eslintrc.jsonangular.jsonngsw-config.jsonpackage.json@angular/localize@angular/service-workereslinttsconfig.app.jsontsconfig.spec.json@angular/localizefavicon.icosrcsrc/index.htmlsrc/main.ts@angular/localizeconfig.jsonsrc/manifest.webmanifestsrc/app/app.component.htmlrouter-outletsrc/app/app.module.tssrc/assets/config.json"
          },
          {
            "topic": "Application Module#",
            "code": "src/app/app.module.tsBrowserModuleMetadataRoutingModuleimport { NgModule, isDevMode } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { ServiceWorkerModule } from '@angular/service-worker';\n\nimport { MetadataRoutingModule } from 'cmf-core';\nimport { CoreUIModule } from 'cmf-core-ui';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n    declarations: [\n        AppComponent\n    ],\n    imports: [\n        BrowserModule,\n        ServiceWorkerModule.register('ngsw-worker.js', {\n            enabled: !isDevMode(),\n            // Register the ServiceWorker as soon as the application is stable\n            // or after 30 seconds (whichever comes first).\n            registrationStrategy: 'registerWhenStable:30000'\n        }),\n        CoreUIModule.forRoot(),\n        ..., // Import the application metadata modules\n        MetadataRoutingModule\n    ],\n    providers: [],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }MetadataRoutingModule"
          }
        ],
        "links": [
          {
            "topic": "Application#",
            "links": [
              {
                "description": "Application# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/application/#application"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/application/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Structure#",
            "links": [
              {
                "description": "Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/application/#structure"
              },
              {
                "description": "Structure# (2)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics"
              }
            ]
          },
          {
            "topic": "Modifications to Angular Project Files#",
            "links": [
              {
                "description": "Modifications to Angular Project Files# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/application/#modifications-to-angular-project-files"
              },
              {
                "description": "Modifications to Angular Project Files# (2)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics"
              }
            ]
          },
          {
            "topic": "Application Module#",
            "links": [
              {
                "description": "Application Module# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/application/#application-module"
              },
              {
                "description": "Application Module# (2)",
                "link": "https://angular.io/guide/file-structure"
              },
              {
                "description": "Application Module# (3)",
                "link": "https://eslint.org/docs/latest/use/configure/"
              },
              {
                "description": "Application Module# (4)",
                "link": "https://angular.io/guide/service-worker-intro"
              },
              {
                "description": "Application Module# (5)",
                "link": "https://developer.mozilla.org/en-US/docs/Web/Manifest"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/application/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Basic Information",
        "definition": [
          {
            "topic": "Basic Information#",
            "definition": "# "
          },
          {
            "topic": "Wizard Details#",
            "definition": "# Critical Manufacturing MES provides a powerful tool for Wizards Entity details customization throughout the application. Simply by specifying on any package metadata the desired properties for each entity type the application will accommodate from them on any available wizard. By default, for all available Entity Types with the notable exception of Material the following properties will be displayed: Name: The name of the entity for which the operation is taken place, if available the System State will also appear in front of it. This property will appear on the header details; Current Main State: If available the name of the state model and the correspondent state name will be showed, also if existing the Reason name will be displayed. These properties will appear on the header details Type: The type of the entity, which will appear on the body. Description: The description of the entity, which will appear on the body Name: The name of the entity for which the operation is taken place, if available the System State will also appear in front of it. This property will appear on the header details; Name: The name of the entity for which the operation is taken place, if available the System State will also appear in front of it. This property will appear on the header details; Current Main State: If available the name of the state model and the correspondent state name will be showed, also if existing the Reason name will be displayed. These properties will appear on the header details Current Main State: If available the name of the state model and the correspondent state name will be showed, also if existing the Reason name will be displayed. These properties will appear on the header details Type: The type of the entity, which will appear on the body. Type: The type of the entity, which will appear on the body. Description: The description of the entity, which will appear on the body Description: The description of the entity, which will appear on the body   Specifically, for the Material the following properties will be displayed: Name: The name of the Material and the System State. This property will appear on the header details; Product: Product of the Material, will appear on the header; Step: Step of the Material, will appear on the header; Primary Quantity: Primary quantity followed by the Material Primary Units, will appear on the header; Secondary Quantity: If available the secondary quantity followed by the Material secondary units, will appear on the header; Type: Type of the Material, will appear on the body; Facility: Facility of the Material, will appear on the body; Flow: Flow of the Material, will appear on the body; Container: Container of the Material, will appear on the body. Name: The name of the Material and the System State. This property will appear on the header details; Name: The name of the Material and the System State. This property will appear on the header details; Product: Product of the Material, will appear on the header; Product: Product of the Material, will appear on the header; Step: Step of the Material, will appear on the header; Step: Step of the Material, will appear on the header; Primary Quantity: Primary quantity followed by the Material Primary Units, will appear on the header; Primary Quantity: Primary quantity followed by the Material Primary Units, will appear on the header; Secondary Quantity: If available the secondary quantity followed by the Material secondary units, will appear on the header; Secondary Quantity: If available the secondary quantity followed by the Material secondary units, will appear on the header; Type: Type of the Material, will appear on the body; Type: Type of the Material, will appear on the body; Facility: Facility of the Material, will appear on the body; Facility: Facility of the Material, will appear on the body; Flow: Flow of the Material, will appear on the body; Flow: Flow of the Material, will appear on the body; Container: Container of the Material, will appear on the body. Container: Container of the Material, will appear on the body.   As mentioned earlier it’s possible to customize the details of any entity using metadata, the only fixed properties are the Entity name and system state (if available). Let’s suppose that we want to show for the Area Entity, only the Facility on the header and the Calendar on the body. We optionally start with within the package metadata to import the following classes to aid with the typings: Then we add the following entry to the entityTypes array: For more information about the definition of Entity Types in the Metadata, please refer to Entity Type Metadata Documentation. For more information about the definition of Entity Types in the Metadata, please refer to Entity Type Metadata Documentation. Entity Type Metadata Documentation   There are several important concepts within this code. First the EntityBasicInfoProperties is an interface that specifies two arrays one for the header called headerProperties and another for the body the bodyProperties. These two arrays are of type EntityTypeBasicInfoProperty, which contain the following properties: property: A string that represents a path for a property of the entity type to be showed, this is the only mandatory property; label: A specific label to be showed before the property. If none is given by default the specific property will appear as label; symbol: A string to be displayed in front of the property value; symbolProperty: A string that represents a path for a property to be displayed in front of the property value; symbolParentheses: A Boolean value to show/hide parentheses in case a symbolProperty is specified. By default, no parentheses are showed. property: A string that represents a path for a property of the entity type to be showed, this is the only mandatory property; property: A string that represents a path for a property of the entity type to be showed, this is the only mandatory property; label: A specific label to be showed before the property. If none is given by default the specific property will appear as label; label: A specific label to be showed before the property. If none is given by default the specific property will appear as label; symbol: A string to be displayed in front of the property value; symbol: A string to be displayed in front of the property value; symbolProperty: A string that represents a path for a property to be displayed in front of the property value; symbolProperty: A string that represents a path for a property to be displayed in front of the property value; symbolParentheses: A Boolean value to show/hide parentheses in case a symbolProperty is specified. By default, no parentheses are showed. symbolParentheses: A Boolean value to show/hide parentheses in case a symbolProperty is specified. By default, no parentheses are showed. It’s also possible to instead of completely override all default properties to only add new ones, let’s use the Material as an example. For more information about the definition of Entity Types in the Metadata, please refer to Entity Type Metadata Documentation. For more information about the definition of Entity Types in the Metadata, please refer to Entity Type Metadata Documentation. Entity Type Metadata Documentation The big difference here, is that we also instantiate a second parameter of the entityBasicInfoCreator entry, which is a function. We the call it so that the default properties are instantiated and then we simply add a new one.   "
          }
        ],
        "code": [
          {
            "topic": "Wizard Details#",
            "code": "import {\n    EntityTypeBasicInfoProperties,\n    EntityTypeBasicInfoProperty\n} from 'cmf-core';/**\n     * Entity Types\n     */\n    public override get entityTypes(): EntityTypeMetadata[] {\n        return [\n            {\n                name: 'Area',\n                entityBasicInfoCreator: async (area: Cmf.Navigo.BusinessObjects.Area): Promise<EntityTypeBasicInfoProperties> => {\n                    const entityTypeBasicInfoProperties: EntityTypeBasicInfoProperties = {\n                        bodyProperties: new Array<EntityTypeBasicInfoProperty>(),\n                        headerProperties: new Array<EntityTypeBasicInfoProperty>()\n                    };\n\n                    const facilityProperty: EntityTypeBasicInfoProperty = {\n                        property: 'Facility',\n                        label: $localize`:@@icf-cookies-custom/main#FACILITY:Facility`\n                    };\n\n                    const calendarProperty: EntityTypeBasicInfoProperty = {\n                        property: 'Calendar',\n                        label: $localize`:@@icf-cookies-custom/main#CALENDAR:Calendar`\n                    };\n\n                    entityTypeBasicInfoProperties.headerProperties.push(facilityProperty);\n                    entityTypeBasicInfoProperties.bodyProperties.push(calendarProperty);\n\n                    return entityTypeBasicInfoProperties;\n                }\n            }\n        ];\n    }/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'Material',\n            entityBasicInfoCreator: async (\n                material: Cmf.Navigo.BusinessObjects.Material, \n                superMethod: (entityInstance: Cmf.Foundation.BusinessObjects.Entity) => Promise<EntityTypeBasicInfoProperties>\n            ): Promise<EntityTypeBasicInfoProperties> => {\n                const entityTypeBasicInfoProperties: EntityTypeBasicInfoProperties = await superMethod(material);\n\n                const formProperty: EntityTypeBasicInfoProperty = {\n                    property: 'Form',\n                    label: $localize`:@@icf-cookies-custom/main#FORM:Form`,\n                    symbol: '(Customized)'\n                };\n\n                entityTypeBasicInfoProperties.headerProperties.push(formProperty);\n\n                return entityTypeBasicInfoProperties;\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Basic Information#",
            "links": [
              {
                "description": "Basic Information# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/basicinformation/#basic-information"
              }
            ]
          },
          {
            "topic": "Wizard Details#",
            "links": [
              {
                "description": "Wizard Details# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/basicinformation/#wizard-details"
              },
              {
                "description": "Wizard Details# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/basic-info-01.png"
              },
              {
                "description": "Wizard Details# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/basic-info-02.png"
              },
              {
                "description": "Wizard Details# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/"
              },
              {
                "description": "Wizard Details# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/basic-info-05.png"
              },
              {
                "description": "Wizard Details# (6)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/"
              },
              {
                "description": "Wizard Details# (7)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/basic-info-07.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/basicinformation/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Compare Entity View",
        "definition": [
          {
            "topic": "Compare Entity View#",
            "definition": "# The main idea of this view is to have a generic comparison that allows us to compare the MES objects in an easy way. For enabling that view is mandatory to have a system functionality {Entity}.Compare. This view is will be present as shown in the image below.   In the next sections will be presented some examples that can be used to customize the native comparison. "
          },
          {
            "topic": "DEE Structure#",
            "definition": "# The customization can be easily put in the Action Groups BusinessObjects.{Entity}.CompareTo.Post or BusinessObjects.{Entity}.CompareTo.Pre. In the images below we show the References, Global Objects and Available Parameters that we need to start to build the DEE.   "
          },
          {
            "topic": "Add Custom Property in General Data#",
            "definition": "# As an example, in the figures below, it'll be shown an alternative to add two Steps named Step Test as properties at the end of the list of the general data section.   "
          },
          {
            "topic": "Add a group with a single item#",
            "definition": "# The figures below show an alternative to add a custom group named Group Test ( Single Items ) with two properties (Prop 1, Prop 2).   "
          },
          {
            "topic": "Add a group with multiple items#",
            "definition": "# The figures below show an example to add a custom group named Group Test ( Multiple Items ) with multiple sub-items (Item 01,Item 02) and one property (Prop A).   "
          }
        ],
        "code": [
          {
            "topic": "Compare Entity View#",
            "code": "{Entity}.Compare"
          },
          {
            "topic": "DEE Structure#",
            "code": "BusinessObjects.{Entity}.CompareTo.PostBusinessObjects.{Entity}.CompareTo.PreReferencesGlobal ObjectsAvailable Parameters// References\nUseReference(\"\", \"Cmf.Foundation.BusinessOrchestration.Abstractions\");\nUseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects.Abstractions\");\nUseReference(\"Cmf.Foundation.BusinessObjects.dll\", \"Cmf.Foundation.BusinessObjects\");\nUseReference(\"Cmf.Foundation.BusinessOrchestration.dll\", \"\");\nUseReference(\"\", \"Cmf.Foundation.BusinessOrchestration.GenericServiceManagement\");\nUseReference(\"\", \"Cmf.Foundation.BusinessOrchestration.GenericServiceManagement.InputObjects\");\nUseReference(\"\", \"Cmf.Foundation.BusinessOrchestration.GenericServiceManagement.OutputObjects\");\nUseReference(\"Cmf.Foundation.DiffComputationTool.dll\", \"Cmf.Foundation.DiffComputationTool\");//Global Objects\nvar serviceProvider = (IServiceProvider) Input[\"ServiceProvider\"];\nvar genericServiceOrchestration = serviceProvider.GetService <IGenericServiceOrchestration> ();\nvar entityFactory = serviceProvider.GetService<IEntityFactory>();//Available Parameters\nIEntityBase compareTo = Input[\"CompareTo\"] as IEntityBase ;\nIEntityBase compareFrom2 = Input[\"CompareFrom\"] as IEntityBase ;\nIEntityBase parentEntity = Input[\"ParentEntity\"] as IEntityBase ;\nHashSet<string> propertiesToIgnore = Input[\"PropertiesToIgnore\"] as  HashSet<string> ;\nint? levelsToLoad = Input[\"LevelsToLoad\"] as int? ;\nint? depth = Input[\"Depth\"] as int? ;\nint? order = Input[\"Order\"] as int? ;\nbool? isToCompareSideBySideDifferences = Input[\"IsToCompareSideBySideDifferences\"] as bool? ;\nbool? isToIgnoreWhitespace = Input[\"IsToIgnoreWhitespace\"] as  bool? ;\nbool? isToIgnoreCase = Input[\"IsToIgnoreCase\"] as  bool? ;\nbool? isToAddFirstLevelPropsToParent = Input[\"IsToAddFirstLevelPropsToParent\"] as  bool? ;\nbool? isToNotLoadRelations = Input[\"IsToNotLoadRelations\"] as  bool? ;\nList <IEntityBase> results = Input[\"Results\"] as List <IEntityBase> ;"
          },
          {
            "topic": "Add Custom Property in General Data#",
            "code": "Step Testif (Input.ContainsKey(\"Results\")) {\n\n    List <IEntityComparisonResult> results = Input[\"Results\"] as List <IEntityComparisonResult> ;\n    var item = results.FirstOrDefault(q => q.EntityName == \"BOM\" && q.Depth == 0);\n\n    if (item != null) {\n        // Load Two steps\n        IStep targetMat = null;\n        IStep sourceMat = null;\n\n        GetObjectByIdInput getObjInput = new GetObjectByIdInput();\n        getObjInput.Id = Convert.ToInt64(2207220143060000041);\n        getObjInput.Type = serviceProvider.GetService <IStep> ();\n        getObjInput.LevelsToLoad = 1;\n        GetObjectByIdOutput getObjOutput = genericServiceOrchestration.GetObjectById(getObjInput);\n        sourceMat = getObjOutput.Instance as IStep;\n\n        getObjInput = new GetObjectByIdInput();\n        getObjInput.Id = Convert.ToInt64(2207220143060000003);\n        getObjInput.Type = serviceProvider.GetService <IStep> ();\n        getObjInput.LevelsToLoad = 1;\n        getObjOutput = genericServiceOrchestration.GetObjectById(getObjInput);\n        targetMat = getObjOutput.Instance as IStep;\n\n        if (targetMat.Id > 0 && sourceMat.Id > 0) {\n            // Source Diff Property\n            DiffComputationLine sourceDiff = EntityComparisonUtils.GetCustomPropertyEntity(\n                sourceMat,\n                \"Step Test\",\n                ReferenceType.EntityType,\n                \"Step\",\n                false,\n                true);\n            // Target Diff Property\n            DiffComputationLine targetDiff = EntityComparisonUtils.GetCustomPropertyEntity(\n                targetMat,\n                \"Step Test\",\n                ReferenceType.EntityType,\n                \"Step\",\n                false,\n                true);\n\n            // Checks if they are different\n            var changeType =\n                string.Equals(sourceDiff?.Text, targetDiff?.Text) == true ?\n                DiffComputationChangeType.Unchanged : DiffComputationChangeType.Modified;\n\n            sourceDiff.ChangeType = changeType;\n            targetDiff.ChangeType = changeType;\n\n            item.ComparisonResult.SourceSideBySideDiffLines.Lines.Add(sourceDiff);\n            item.ComparisonResult.TargetSideBySideDiffLines.Lines.Add(targetDiff);\n        }\n    }\n}"
          },
          {
            "topic": "Add a group with a single item#",
            "code": "Group Test ( Single Items )Prop 1Prop 2if (Input.ContainsKey(\"Results\") &&\n    Input.ContainsKey(\"CompareTo\") && \n    Input.ContainsKey(\"CompareFrom\")) {\n\n    List <IEntityComparisonResult> results = Input[\"Results\"] as List <IEntityComparisonResult>;\n    IEntityBase compareTo = Input[\"CompareTo\"] as IEntityBase;\n    IEntityBase compareFrom = Input[\"CompareFrom\"] as IEntityBase;\n\n    // Creates diff objects\n    results.Add(new EntityComparisonResult {\n        Depth = 0,\n        CompareFrom = compareFrom,\n        CompareTo = compareTo,\n        EntityName = \"Group Test ( Single Items )\",\n        ComparisonResult = new DiffComputationResult(){\n            // Source Diff Properties\n            SourceSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"2\", \"Prop 1\"),\n                                    ChangeType = DiffComputationChangeType.Modified\n                            },\n                            new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"asdasdasd\", \"Prop 2\")\n                            }\n                    }\n                },\n            // Target Diff Properties\n            TargetSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"4\", \"Prop 1\"),\n                                    ChangeType = DiffComputationChangeType.Modified\n                            },\n                            new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"asdasdasd\", \"Prop 2\")\n                            }\n                    }\n            }\n        }\n    });\n}"
          },
          {
            "topic": "Add a group with multiple items#",
            "code": "Group Test ( Multiple Items )Item 01Item 02Prop Aif (Input.ContainsKey(\"Results\")) {\n\n    List <IEntityComparisonResult> results = Input[\"Results\"] as List <IEntityComparisonResult>;\n\n    //Item 01\n    var item01CompareFrom = entityFactory.Create<IBOM>();\n    var item01CompareTo = entityFactory.Create<IBOM>();\n    item01CompareFrom.Name = \"Item 01\";\n    item01CompareTo.Name = \"Item 01\";\n    var data = new EntityComparisonResult {\n        Depth = 1,\n        CompareFrom = item01CompareFrom,\n        CompareTo = item01CompareTo,\n        EntityName = \"Group Test ( Multiple Items )\",\n        ComparisonResult = new DiffComputationResult(){\n\n            // Source Diff Properties\n            SourceSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"2\", \"Prop A\"),\n                                ChangeType = DiffComputationChangeType.Modified\n                            },\n                    }\n                },\n\n            // Target Diff Properties\n            TargetSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"23\", \"Prop A\"),\n                                ChangeType = DiffComputationChangeType.Modified\n                            }\n                    }\n                }\n        }\n    };\n    results.Add(data);\n\n    //Item 02\n    var item02CompareFrom = entityFactory.Create<IBOM>();\n    var item02CompareTo = entityFactory.Create<IBOM>();\n    item02CompareFrom.Name = \"Item 02\";\n    item02CompareTo.Name = \"Item 02\";\n    data = new EntityComparisonResult {\n        Depth = 1,\n        CompareFrom = item02CompareFrom,\n        CompareTo = item02CompareTo,\n        EntityName = \"Group Test ( Multiple Items )\",\n        ComparisonResult = new DiffComputationResult(){\n\n            // Source Diff Properties\n            SourceSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"A\", \"Prop A\"),\n                            },\n                    }\n                },\n\n            // Target Diff Properties\n            TargetSideBySideDiffLines =\n                new DiffComputationLines() {\n                    Lines = new List < DiffComputationLine > () {\n                        new DiffComputationLine() {\n                                Text = EntityComparisonUtils.GenerateCustomProperty(\"A\", \"Prop A\"),\n                            }\n                    }\n                }\n        }\n    };\n    results.Add(data);\n}"
          }
        ],
        "links": [
          {
            "topic": "Compare Entity View#",
            "links": [
              {
                "description": "Compare Entity View# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/#compare-entity-view"
              },
              {
                "description": "Compare Entity View# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/compareEntityView_4.png"
              }
            ]
          },
          {
            "topic": "DEE Structure#",
            "links": [
              {
                "description": "DEE Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/#dee-structure"
              }
            ]
          },
          {
            "topic": "Add Custom Property in General Data#",
            "links": [
              {
                "description": "Add Custom Property in General Data# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/#add-custom-property-in-general-data"
              },
              {
                "description": "Add Custom Property in General Data# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/compareEntityView_1.png"
              }
            ]
          },
          {
            "topic": "Add a group with a single item#",
            "links": [
              {
                "description": "Add a group with a single item# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/#add-a-group-with-a-single-item"
              },
              {
                "description": "Add a group with a single item# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/compareEntityView_2.png"
              }
            ]
          },
          {
            "topic": "Add a group with multiple items#",
            "links": [
              {
                "description": "Add a group with multiple items# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/#add-a-group-with-multiple-items"
              },
              {
                "description": "Add a group with multiple items# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/compareEntityView_3.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/compareEntityView/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Component",
        "definition": [
          {
            "topic": "Component#",
            "definition": "# Now that we have the basic structure and the package created, we'll create a component. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup and the necessary package: icf-cookies-custom. Generated the environment setup and the necessary package: icf-cookies-custom. "
          },
          {
            "topic": "Creating a Component#",
            "definition": "# At the root of the workspace, run (command line): At the root of the workspace, run (command line): Set the style to less. Set the style to less. "
          },
          {
            "topic": "Edit Component#",
            "definition": "# When you use the generator, a set of tasks are automated and among these tasks, 3 files are created that are responsible for the component visual and functionality. cookies-catalogue.component.html: visual template, responsible for the content; cookies-catalogue.component.less: style, responsible for the look and feel of the content; cookies-catalogue.component.ts: code-behind, responsible for the manipulation of the content. cookies-catalogue.component.html: visual template, responsible for the content; cookies-catalogue.component.less: style, responsible for the look and feel of the content; cookies-catalogue.component.ts: code-behind, responsible for the manipulation of the content. Edit the cookies-catalogue.component.html file: Edit the cookies-catalogue.component.less file: Edit the cookies-catalogue.component.ts file: The entry in icf-cookies-custom-metadata.service.ts must also be updated with the new route. For more information regarding the routing strategy, see Routing. For more information regarding the routing strategy, see Routing. Routing Then, to export the component in the library, it is necessary to add it to the public-api.ts file. "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now we have a created a new component that you can access by URL. If you run the commands ng build at the root of the package and ng serve at the root folder of the project, you should see it in the web browser, just add the name of the component at the end of the URL: localhost:4200/CookiesCatalogue.   "
          },
          {
            "topic": "More information#",
            "definition": "# In this example, we're using static data (cookieCatalogue[]). In practical terms it's not very effective, but for the sake of simplicity and to show how to put together all the necessary pieces and understand how they work together, will suffice at this point. This custom component uses two built-in components provided by the framework: Property Container; Property Viewer. Property Container; Property Viewer. We reference them in the template file (.html) through their respective tags and import the modules in the code-behind (_.ts_). In the style portion of the component (*.less), you don't have to worry about the CSS classes conflicting with classes from other components because they're encapsulated. To see how these and other components work, you can check the Design System section of the Developer Guide. "
          }
        ],
        "code": [
          {
            "topic": "Creating a Component#",
            "code": "ng generate component CookiesCatalogue --project icf-cookies-custom --style=less --standalone"
          },
          {
            "topic": "Edit Component#",
            "code": "<header>\n    <h3>Catalogue</h3>\n</header>\n\n<div class=\"catalogue\">\n    <cmf-core-business-controls-propertyContainer *ngFor=\"let cookie of cookieCatalogue\" class=\"card\">\n        <cmf-core-business-controls-propertyViewer\n            label=\"Ref\"\n            [value]=\"cookie.ref\">\n        </cmf-core-business-controls-propertyViewer>  \n        <cmf-core-business-controls-propertyViewer\n            label=\"Name\"\n            [value]=\"cookie.name\">\n        </cmf-core-business-controls-propertyViewer>\n        <cmf-core-business-controls-propertyViewer\n            label=\"Description\"\n            [value]=\"cookie.description\">\n        </cmf-core-business-controls-propertyViewer>\n    </cmf-core-business-controls-propertyContainer>\n</div>:host {\n    display: block;\n    padding: 5px;\n}\n\nheader {\n    text-align: center;\n    margin: 20px 0;\n}\n\n.catalogue {\n    display: flex;\n    flex-wrap: wrap;\n\n    .card {\n        border: solid 1px #dfdfdf;\n        margin: 5px;\n        padding: 5px;\n        min-width: 300px;\n\n        &:hover {\n            background-color: #dfdfdf;\n        }\n    }\n}import { Component, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HOST_VIEW_COMPONENT } from 'cmf-core';\n\nimport { PropertyContainerModule, PropertyViewerModule } from 'cmf-core-business-controls';\n\nexport interface CookieData {\n    ref: string;\n    name: string;\n    description: string;\n}\n\n@Component({\n    selector: 'icf-cookies-custom-cookies-catalogue',\n    standalone: true,\n    imports: [CommonModule, PropertyContainerModule, PropertyViewerModule],\n    templateUrl: './cookies-catalogue.component.html',\n    styleUrls: ['./cookies-catalogue.component.less'],\n    viewProviders: [{ provide: HOST_VIEW_COMPONENT, useExisting: forwardRef(() => CookiesCatalogueComponent) }]\n})\nexport class CookiesCatalogueComponent {\n    public cookieCatalogue: Array<CookieData>;\n\n    constructor() {\n        this.cookieCatalogue = [\n            { ref: 'CC0001', name: 'Chocolate Cookie', description: 'Cookie covered with chocolate' },\n            { ref: 'CC0002', name: 'Chocolate Chip Cookie', description: 'Plain cookie with a mix of chocolate chips' },\n            { ref: 'PC0001', name: 'Plain Cookie', description: 'Cookie with no special ingredient' }\n        ];\n    }\n}/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            id: KnownRoutes.Page,\n            routes: [\n                {\n                    path: 'CookiesCatalogue',\n                    loadComponent: () => import(\n                        /* webpackExports: \"CookiesCatalogueComponent\" */\n                        'icf-cookies-custom').then(m => m.CookiesCatalogueComponent),\n                    data: {\n                        title: 'CookiesCatalogue'\n                    }\n                }\n            ]\n        }\n    ];\n}/*\n * Public API Surface of icf-cookies-custom\n */\n\nexport * from './lib/cookies-catalogue/cookies-catalogue.component';"
          },
          {
            "topic": "Conclusion#",
            "code": "ng buildng servelocalhost:4200/CookiesCatalogue"
          },
          {
            "topic": "More information#",
            "code": "cookieCatalogue[]"
          }
        ],
        "links": [
          {
            "topic": "Component#",
            "links": [
              {
                "description": "Component# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#component"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a Component#",
            "links": [
              {
                "description": "Creating a Component# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#creating-a-component"
              }
            ]
          },
          {
            "topic": "Edit Component#",
            "links": [
              {
                "description": "Edit Component# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#edit-component"
              },
              {
                "description": "Edit Component# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#conclusion"
              },
              {
                "description": "Conclusion# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/component.png"
              }
            ]
          },
          {
            "topic": "More information#",
            "links": [
              {
                "description": "More information# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/component/#more-information"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/component/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Converter",
        "definition": [
          {
            "topic": "Converter#",
            "definition": "# Converters provide a simple and effective way of transforming/adapting existing UIPages/widgets fields throughout links. With converters, we have the possibility to take a value and make it suitable to our needs. Weather that means loading more data for that specific value or even transforming it to something completely different. To allow extra flexibility a converter may additionally receive a parameter, that in conjunction with the input value will allow the conversion to occur. This means that when a link gets assigned with a converter, the final value that will be used is return by the converter. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup. Generated the environment setup. "
          },
          {
            "topic": "Creating a converter#",
            "definition": "# At the root of the package, run (command line): At the root of the package, run (command line): The generator will create the converter inside the /src/lib folder. In there you can find the source file for the generated converter (/projects/icf-cookies-custom/src/lib/number-multiply10-number-converter). "
          },
          {
            "topic": "Editing the converter#",
            "definition": "# Edit the number-multiply10-number-converter.pipe.ts: "
          },
          {
            "topic": "Using the converter#",
            "definition": "# To use a converter you need to go to an UI Page and create a link between two widgets. Open an UI Page and drag a Form and a Data Value widgets, into the UI Page grid: Open an UI Page and drag a Form and a Data Value widgets, into the UI Page grid:   Go to the Settings of the Form widget, select Fields, add a new field by clicking on the + (plus) sign and set the Name to RPM and Type to Integer: Go to the Settings of the Form widget, select Fields, add a new field by clicking on the + (plus) sign and set the Name to RPM and Type to Integer:   Go to the Settings of the Data Value widget, select Layout and then Radial gauge: Go to the Settings of the Data Value widget, select Layout and then Radial gauge:   On the left menu of the UI Page (build mode) select Links, then drag the Form and Data Value, into the left area: On the left menu of the UI Page (build mode) select Links, then drag the Form and Data Value, into the left area:   Now you're seeing the inputs and outputs of the widgets. Click on the small arrow to the right of the field fields$RPMChange and drag to the value, on the Data Value widget: Now you're seeing the inputs and outputs of the widgets. Click on the small arrow to the right of the field fields$RPMChange and drag to the value, on the Data Value widget:   The Converter dialog should open automaticly. Select the previous created converter: The Converter dialog should open automaticly. Select the previous created converter:   Now go to the UI Page and test the converter. When you click on the Form field and change the value, the output goes into the input of the Data Value widget, trough the converter that multiplies the value by 10: Now go to the UI Page and test the converter. When you click on the Form field and change the value, the output goes into the input of the Data Value widget, trough the converter that multiplies the value by 10:   "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have connected two widgets and transformed the value passed. A link to be valid doesn't need a converter, only when the input/ouput aren't compatible or a change is needed.   "
          },
          {
            "topic": "More Information#",
            "definition": "# A converter can also return an object of type ConverterExecute, that defines an execute function. This is handy when we want the converter to have access to the target and therefore execute any given operation on this object or even completely transform\\replace it, mostly based on the input value of the converter.   "
          }
        ],
        "code": [
          {
            "topic": "Creating a converter#",
            "code": "ng generate converter NumberMultiply10Number"
          },
          {
            "topic": "Editing the converter#",
            "code": "(...)\n@Converter({\n    name: $localize`:@@icf-cookies-custom/number-multiply10-number#NAME:Number Multiply10 Number Converter`,\n    input: [SimpleType.Integer],\n    output: SimpleType.Decimal\n})\n@Pipe({\n    standalone: true,\n    name: 'numberMultiply10Number'\n})\nexport class NumberMultiply10NumberConverter implements PipeTransform {\n    transform(value: number, ...args: string[]): any {\n        return value * 10;\n    }\n}\n(...)"
          },
          {
            "topic": "More Information#",
            "code": "ConverterExecutetransform(value: any, args: any[]): any {\n    const key = args[0];\n    const converterExecute = new ConverterExecute();\n    converterExecute.execute = (target: Map<any, any>, context: any) => {\n        if (key) {\n            target.set(key, value);\n        }\n        return target;\n    };\n    return converterExecute;\n}"
          }
        ],
        "links": [
          {
            "topic": "Converter#",
            "links": [
              {
                "description": "Converter# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#converter"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a converter#",
            "links": [
              {
                "description": "Creating a converter# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#creating-a-converter"
              }
            ]
          },
          {
            "topic": "Editing the converter#",
            "links": [
              {
                "description": "Editing the converter# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#editing-the-converter"
              }
            ]
          },
          {
            "topic": "Using the converter#",
            "links": [
              {
                "description": "Using the converter# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#using-the-converter"
              },
              {
                "description": "Using the converter# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-drag.png"
              },
              {
                "description": "Using the converter# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-form.png"
              },
              {
                "description": "Using the converter# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-data-value-settings.png"
              },
              {
                "description": "Using the converter# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-link.png"
              },
              {
                "description": "Using the converter# (6)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-link2.png"
              },
              {
                "description": "Using the converter# (7)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-link3.png"
              },
              {
                "description": "Using the converter# (8)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-converter-final.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#conclusion"
              },
              {
                "description": "Conclusion# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/converter-simple.jpg"
              }
            ]
          },
          {
            "topic": "More Information#",
            "links": [
              {
                "description": "More Information# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/converter/#more-information"
              },
              {
                "description": "More Information# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/converter-converterExecute.jpg"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/converter/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Data Source",
        "definition": [
          {
            "topic": "Data Source#",
            "definition": "# Data sources provide a convenient way of loading data within a UIPage. This data can be used within a link, as a way of providing information needed to the available widgets. There are some out of the box functionalities, that the data source mechanism provides to a developer that wishes to creates a new one, such as: Fetch on load: fetch data when loaded for the first time; Auto refresh: automatically fetch data between a time interval; Fetch on changes: fetch data when any relevant input changes. Fetch on load: fetch data when loaded for the first time; Auto refresh: automatically fetch data between a time interval; Fetch on changes: fetch data when any relevant input changes. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup. Generated the environment setup. "
          },
          {
            "topic": "Creating a Data Source#",
            "definition": "# At the root of the package, run (command line): At the root of the package, run (command line): The generator will create the data source inside the /src/lib folder. In there you can find the source file for the generated data source (/projects/icf-cookies-custom/src/lib/cookies-ds-data-source). Inside it, you will find the following structure: cookies-ds-data-source ├── cookies-ds-data-source-settings | ├── cookies-ds-data-source-settings.component.html | ├── cookies-ds-data-source-settings.component.less | └── cookies-ds-data-source-settings.component.ts └── cookies-ds-data-source.service.ts The cookies-ds-data-source.service.ts is the file that contains the logic of the data source. The cookies-ds-data-source-settings is the file that contains the settings of the data source. "
          },
          {
            "topic": "Edit Data Source#",
            "definition": "# Edit the cookies-ds-data-source.service.ts_: "
          },
          {
            "topic": "Using the Data Source#",
            "definition": "# To use a data source you need to go to an UI Page and add it to the UI Page. Open the UI Page previouly created (Converter), go to the settings of the form widget and add a new field: Open the UI Page previouly created (Converter), go to the settings of the form widget and add a new field:   Go to the Links section, of the UI Page (build mode), the data source should be automatically listed in the availables links. Drag and drop it, and connect the fields: Go to the Links section, of the UI Page (build mode), the data source should be automatically listed in the availables links. Drag and drop it, and connect the fields:   When you return to the UI Page, you should see the string of the data source displaying in the new field of the form widget: When you return to the UI Page, you should see the string of the data source displaying in the new field of the form widget:   "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you've created and connected a custom data source. "
          }
        ],
        "code": [
          {
            "topic": "Creating a Data Source#",
            "code": "ng generate data-source CookiesDS"
          },
          {
            "topic": "Edit Data Source#",
            "code": "(...)\nconst inputs = new Map<string, DataSourceInput>();\nconst outputs = new Map<string, DataSourceOutput>();\n\ninputs.set('displayStatus', SimpleType.Boolean);\noutputs.set('machine', SimpleType.String);\n\n@Injectable()\n@DataSource({\n    name: $localize`:@@icf-cookies-custom/cookies-ds-data-source#NAME:Cookies DS`,\n    settingsComponent: {\n        component: CookiesDSDataSourceSettingsComponent\n    },\n    inputs: inputs,\n    outputs: outputs\n})\nexport class CookiesDSDataSource extends DataSourceGeneric implements DataSourceSettingsDef {\n\n    public displayStatus: Boolean;\n    public machine = new EventEmitter<string>();\n\n    (...)\n\n    /**\n     * Constructor\n     */\n    constructor(util: UtilService) {\n        super(util);\n    }\n\n    /**\n     * This method gathers all the logic to fetch data for this data source\n     */\n    public async execute(): Promise<void> {\n        let stringToReturn: string = \"Mixing\";\n        if (this.displayStatus) {\n            stringToReturn += \" up and running\";\n        }\n        this.machine.emit(stringToReturn);\n        return null;\n    }\n\n    (...)\n}"
          }
        ],
        "links": [
          {
            "topic": "Data Source#",
            "links": [
              {
                "description": "Data Source# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#data-source"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a Data Source#",
            "links": [
              {
                "description": "Creating a Data Source# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#creating-a-data-source"
              }
            ]
          },
          {
            "topic": "Edit Data Source#",
            "links": [
              {
                "description": "Edit Data Source# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#edit-data-source"
              }
            ]
          },
          {
            "topic": "Using the Data Source#",
            "links": [
              {
                "description": "Using the Data Source# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#using-the-data-source"
              },
              {
                "description": "Using the Data Source# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/datasource-form-settings.png"
              },
              {
                "description": "Using the Data Source# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/datasource-link.png"
              },
              {
                "description": "Using the Data Source# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/datasource-uipage.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/datasource/#conclusion"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/datasource/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Entity Page Views",
        "definition": [
          {
            "topic": "Entity Page Views#",
            "definition": "# The Entity Page Views is a mechanism that allows different visual overviews of the same Entity Instance to be available in its Entity Page so that it is possible to provide functionalities in a separate and more modular way but still being available in the same context. Given the importance of having the flexibility to add additional views or event modify the existing base ones, this mechanism is highly used by metadata configuration. From this point forward, an Entity Page View is referred as a View. In practice, these Views are used in the context of an entity page by selecting the Views right-aligned Action Button Group in the ActionBar and selecting any of the entries:   It is noticeable that when navigating between different Views the browser's URL changes and that is because they are routed, meaning that each View that is configured in the metadata will map to a route that belongs to a certain page of an EntityType. Apart from the mechanism functionality, a View is simply a Component that is rendered in the page, so the standard Component development applies here. "
          },
          {
            "topic": "View Configuration#",
            "definition": "# A View can be Simple or Advanced. A Simple View, is one where we stay in the entity page and only its content is changed. This type applies to the majority of the existing Views. However if there is the need to add a View that is, in fact, a completely different page, we can do so by specifying as being Advanced and use it as if it was a simple shortcut. "
          },
          {
            "topic": "Configurable metadata properties#",
            "definition": "# A View can be configured through the following properties: id: Unique identifier. There cannot be duplicate Views for the same entity type. If there are multiple views with the same id, their configuration will be merged by order from the less specific to the more specific. name: Name that appears on the Entity Page's View Action Button Group Button. Generally, this label should be localized. type: View type, either Simple or Advanced. Works as specified above. order: The order that they appear on the Entity Page's View Action Button Group. path: This is the path that appears on the browser's URL bar. In order to maintain coherence between all Entity Page's views accross the whole MES, these will always follow the convention: Entity/entity_type_here/entity_instance_id_here/View/view_path_here. However, if we are defining an Advanced View, this path must match a path that exists in metadata route's entry. Here, we can define a path directly using a hardcoded string or it can be a callback function that receives as arguments the entity type name and the entity instance. queryParams: URL query parameters that can be appended to the path. Can also be a params object directly or a callback function that receives as parameter the entity instance. loadChildren: Similarly as the definition of a route, we need to load the routing module or component that will be rendered in the entity page's content. This property is only used and mandatory in the case of a Simple View. actionBarElementsToAdd: Elements that are added to the Entity Page's action bar when switching to the View. actionBarElementsToRemove: Elements to remove from the Entity Page's action bar when switching to the View. canExecute: Callback executed when navigating to a View and by the Entity Page when deciding which Views are added to the View's Action Button Group Button. It receives as arguments the entity type name, the entity instance and a messages array. Note that the entity instance will not always have a value because when it executes by navigation, the entity instance is not yet loaded. The messages array is used to provide toasts as any canExecute callback used thoughout the rest of the application. requiredFunctionalities: If there is the need to associate Functionalities to the View, we can do so by specifing a string here or also a callback that receives as arguments the routeSnapshot reference to the View's route (useful to retrieve, for example, query parameters), the entity type name, and the entity instance, and returns a string. Follows the same convention as any requiredFunctionalities defined in other metadata entries. mode: Can be defined in order to offer different display modes, such as modals. id: Unique identifier. There cannot be duplicate Views for the same entity type. If there are multiple views with the same id, their configuration will be merged by order from the less specific to the more specific. id: Unique identifier. There cannot be duplicate Views for the same entity type. If there are multiple views with the same id, their configuration will be merged by order from the less specific to the more specific. name: Name that appears on the Entity Page's View Action Button Group Button. Generally, this label should be localized. name: Name that appears on the Entity Page's View Action Button Group Button. Generally, this label should be localized. type: View type, either Simple or Advanced. Works as specified above. type: View type, either Simple or Advanced. Works as specified above. order: The order that they appear on the Entity Page's View Action Button Group. order: The order that they appear on the Entity Page's View Action Button Group. path: This is the path that appears on the browser's URL bar. In order to maintain coherence between all Entity Page's views accross the whole MES, these will always follow the convention: Entity/entity_type_here/entity_instance_id_here/View/view_path_here. However, if we are defining an Advanced View, this path must match a path that exists in metadata route's entry. Here, we can define a path directly using a hardcoded string or it can be a callback function that receives as arguments the entity type name and the entity instance. path: This is the path that appears on the browser's URL bar. In order to maintain coherence between all Entity Page's views accross the whole MES, these will always follow the convention: Entity/entity_type_here/entity_instance_id_here/View/view_path_here. However, if we are defining an Advanced View, this path must match a path that exists in metadata route's entry. Here, we can define a path directly using a hardcoded string or it can be a callback function that receives as arguments the entity type name and the entity instance. queryParams: URL query parameters that can be appended to the path. Can also be a params object directly or a callback function that receives as parameter the entity instance. queryParams: URL query parameters that can be appended to the path. Can also be a params object directly or a callback function that receives as parameter the entity instance. loadChildren: Similarly as the definition of a route, we need to load the routing module or component that will be rendered in the entity page's content. This property is only used and mandatory in the case of a Simple View. loadChildren: Similarly as the definition of a route, we need to load the routing module or component that will be rendered in the entity page's content. This property is only used and mandatory in the case of a Simple View. actionBarElementsToAdd: Elements that are added to the Entity Page's action bar when switching to the View. actionBarElementsToAdd: Elements that are added to the Entity Page's action bar when switching to the View. actionBarElementsToRemove: Elements to remove from the Entity Page's action bar when switching to the View. actionBarElementsToRemove: Elements to remove from the Entity Page's action bar when switching to the View. canExecute: Callback executed when navigating to a View and by the Entity Page when deciding which Views are added to the View's Action Button Group Button. It receives as arguments the entity type name, the entity instance and a messages array. Note that the entity instance will not always have a value because when it executes by navigation, the entity instance is not yet loaded. The messages array is used to provide toasts as any canExecute callback used thoughout the rest of the application. canExecute: Callback executed when navigating to a View and by the Entity Page when deciding which Views are added to the View's Action Button Group Button. It receives as arguments the entity type name, the entity instance and a messages array. Note that the entity instance will not always have a value because when it executes by navigation, the entity instance is not yet loaded. The messages array is used to provide toasts as any canExecute callback used thoughout the rest of the application. requiredFunctionalities: If there is the need to associate Functionalities to the View, we can do so by specifing a string here or also a callback that receives as arguments the routeSnapshot reference to the View's route (useful to retrieve, for example, query parameters), the entity type name, and the entity instance, and returns a string. Follows the same convention as any requiredFunctionalities defined in other metadata entries. requiredFunctionalities: If there is the need to associate Functionalities to the View, we can do so by specifing a string here or also a callback that receives as arguments the routeSnapshot reference to the View's route (useful to retrieve, for example, query parameters), the entity type name, and the entity instance, and returns a string. Follows the same convention as any requiredFunctionalities defined in other metadata entries. mode: Can be defined in order to offer different display modes, such as modals. mode: Can be defined in order to offer different display modes, such as modals. "
          },
          {
            "topic": "Adding a View#",
            "definition": "# In order for them to be available, there is the need to create a routing module:   The next step is to configure the metadata for a View. Here we'll use an existing example for a View that exists in the Resource's Entity Page:   Here we are defining three Views for the Resource's Entity Page. Let's take the third one as our practical example. Here we are defining a Simple View, with equal name and path, pointing to a specific routing module that is the one that will be used to render the component in the Entity Page's content and that will only be accessible if the Resource is of ProcessingType Storage. Note that if the Resource is not of ProcessingType Storage, the View won't be available in the Entity Page. However, it can still be accessible if the URL is directly typed in the browser's URL bar and in this case, the canExecute execution won't have the instance object available. It is strongly advised to add protection to the component. The component development is standard and there are only a few specific points to address here. For more information regarding the routing strategy, see Routing. For more information regarding the routing strategy, see Routing. Routing "
          },
          {
            "topic": "Resolving Views for Entity Pages#",
            "definition": "# The Entity Page also has a routing module like the base page. The routes are built based on the entity type metadata; that is, besides the base route to the entity page, they also include the generic and specified views in the metadata.   For more information regarding the routing strategy, see Routing. For more information regarding the routing strategy, see Routing. Routing "
          },
          {
            "topic": "Communication#",
            "definition": "# Having this is already enough to have this View available and working. However, most of the times, we want to communicate between the Entity Page and the View in order to get access to the entity instance or trading data. For this matter, the View needs to receive the Entity PageService through dependency injection and therefore getting access to all the data present in that service:   Furthermore, there are times where we need to have custom data communication between the Entity Page and the View. In this cases, we need to build an Injectable Angular Service and provide it in our specific Entity Page in order to get access to it in our View:   For more information about dependency injection, see Introduction to services and dependency injection ⧉ For more information about providing services, see Providing Angular Services ⧉ For more information about dependency injection, see Introduction to services and dependency injection ⧉ Introduction to services and dependency injection ⧉ For more information about providing services, see Providing Angular Services ⧉ Providing Angular Services ⧉ "
          },
          {
            "topic": "Action Bar Customization#",
            "definition": "# As specified in the View Configuration, we can add or remove elements from the Entity Page's Action Bar by metadata configuration. However, there are many times where we want to add elements that can be dynamically changed, such as being force disabled or that needs a runtime buildContext callback. In this cases, we can define our elements in the View's template and pass them programmatically to the Entity Page's Action Bar:   Then, in our View component we need to get access to this template and send it to the injected Entity Page Service:     This last step only needs to be called once, and it is advised to do so in the Angular's ngOnInit lifecycle hook. Last but not least, we can also evaluate the existing Action Bar's Action Buttons in order for them to rerun their canExecutes and other functionalities and update their status:   "
          },
          {
            "topic": "Global Views#",
            "definition": "# The last point that we need to address when adding a View is that we may want to develop and configure a View that is valid for all Entity Types. In the metadata configuration, we can specify an entityType with name \"*\" and define a collection of Views which will end up being used for all Entity Types' Entity Pages:   Note that there are already an additional number of generic Views that will appear for all EntityPages, namely the Details View (displays the default EntityType properties), Contexts View (displays all the configured table contexts for the specific EntityType), References View (displays the Relations and WhereUsed sections) and lastly the History View (displays the History section). "
          },
          {
            "topic": "Modifying an existing View#",
            "definition": "# As stated in View Configuration section, if we redefine a View by using the same id we will end up on merging the View definition and configuration from the most specific to the less specific. With this functionality, we can modify base Views in order to use our new configuration:   In this example, we are redefining the generic Details View in the Resource's Entity Page to use our new details component. This a common example, however, the other properties are also able to be modified. "
          },
          {
            "topic": "Removing Views#",
            "definition": "# Removing a View is simple and also follows the same base as the modification process. In this case, if we want to remove an existing View, we only need to redefine it and use the canExecute property to return the value false:   "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Entity Page Views#",
            "links": [
              {
                "description": "Entity Page Views# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#entity-page-views"
              },
              {
                "description": "Entity Page Views# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Action_Button_Group.png"
              }
            ]
          },
          {
            "topic": "View Configuration#",
            "links": [
              {
                "description": "View Configuration# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#view-configuration"
              }
            ]
          },
          {
            "topic": "Configurable metadata properties#",
            "links": [
              {
                "description": "Configurable metadata properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#configurable-metadata-properties"
              }
            ]
          },
          {
            "topic": "Adding a View#",
            "links": [
              {
                "description": "Adding a View# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#adding-a-view"
              },
              {
                "description": "Adding a View# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_AddingView_RoutingModule.png"
              },
              {
                "description": "Adding a View# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Metadata_Example.png"
              },
              {
                "description": "Adding a View# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/"
              }
            ]
          },
          {
            "topic": "Resolving Views for Entity Pages#",
            "links": [
              {
                "description": "Resolving Views for Entity Pages# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#resolving-views-for-entity-pages"
              },
              {
                "description": "Resolving Views for Entity Pages# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Module_Decorator.png"
              },
              {
                "description": "Resolving Views for Entity Pages# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/"
              }
            ]
          },
          {
            "topic": "Communication#",
            "links": [
              {
                "description": "Communication# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#communication"
              },
              {
                "description": "Communication# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Communication.png"
              },
              {
                "description": "Communication# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Injection.png"
              },
              {
                "description": "Communication# (4)",
                "link": "https://angular.io/guide/architecture-services"
              },
              {
                "description": "Communication# (5)",
                "link": "https://angular.io/guide/architecture-services#providing-services"
              }
            ]
          },
          {
            "topic": "Action Bar Customization#",
            "links": [
              {
                "description": "Action Bar Customization# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#action-bar-customization"
              },
              {
                "description": "Action Bar Customization# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Dynamic_Action_Buttons.png"
              },
              {
                "description": "Action Bar Customization# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Dynamic_Action_Buttons_2.png"
              },
              {
                "description": "Action Bar Customization# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Dynamic_Action_Buttons_3.png"
              },
              {
                "description": "Action Bar Customization# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Action_Bar_Evaluation.png"
              }
            ]
          },
          {
            "topic": "Global Views#",
            "links": [
              {
                "description": "Global Views# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#global-views"
              },
              {
                "description": "Global Views# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Generic_Example.png"
              }
            ]
          },
          {
            "topic": "Modifying an existing View#",
            "links": [
              {
                "description": "Modifying an existing View# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#modifying-an-existing-view"
              },
              {
                "description": "Modifying an existing View# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Metadata_Modification.png"
              }
            ]
          },
          {
            "topic": "Removing Views#",
            "links": [
              {
                "description": "Removing Views# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/#removing-views"
              },
              {
                "description": "Removing Views# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/Views_Removal.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Execution View",
        "definition": [
          {
            "topic": "Execution View#",
            "definition": "# The Execution View component serves as the container for a number of tabs. Each tabs is represented by an instance of the ExecutionViewTab component. It permits you to save your work at any time and to cancel any alteration since your last save. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. "
          },
          {
            "topic": "Creating a Execution View#",
            "definition": "# To generate an execution view template, run the following command, at the root of the package (command line): To generate an execution view template, run the following command, at the root of the package (command line): ? What is the name of the entity type to be performed? Cookie ? What is the business objects namespace of the entity type? Other (specify) ? Namespace Custom ? What is the name of the entity type to be performed? Cookie ? What is the business objects namespace of the entity type? Other (specify) ? Namespace Custom The generator will create the converter inside the /src/lib folder. In there you can find the source file for the generated converter (/projects/icf-cookies-custom/src/lib/wizard-edit-cookie). Edit the wizard-edit-cookie.component.html file: Edit the wizard-edit-cookie.component.html file: Edit the wizard-edit-cookie.component.ts file: Edit the wizard-edit-cookie.component.ts file: Edit the icf-cookies-custom-metadata.service.ts file: If you go to the action bar and click on the Edit Cookie button, it should open an execution view has a modal dialog.   "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have created a custom Execution View and linked it to an action in an action bar, using the route in the metadata to show the dialog. "
          }
        ],
        "code": [
          {
            "topic": "Creating a Execution View#",
            "code": "ng generate execution-view EditCookie<cmf-core-controls-execution-view cmf-core-business-controls-transaction-execution-view\n    i18n-mainTitle=\"@@icf-cookies-custom/wizard-edit-cookie#TITLE\" mainTitle=\"Edit Cookie\"\n    i18n-action-name=\"@@icf-cookies-custom/wizard-edit-cookie#ACTION\" action-name=\"Finish\">\n\n    <!-- Execution View steps -->\n    <cmf-core-controls-execution-view-tab i18n-mainTitle=\"@@icf-cookies-custom/wizard-edit-cookie#DETAILS\" mainTitle=\"Details\">\n        <cmf-core-business-controls-propertyEditor\n            i18n-label=\"@@icf-cookies-custom/wizard-edit-cookie#COOKIE_NAME\"\n            label=\"Cookie name\"\n            valueType=\"String\"\n            [(value)]=\"cookieName\">\n        </cmf-core-business-controls-propertyEditor>\n        <cmf-core-business-controls-propertyEditor\n            i18n-label=\"@@icf-cookies-custom/wizard-edit-cookie#COOKIE_DESCRIPTION\"\n            label=\"Cookie description\"\n            i18n-placeholder=\"@@icf-cookies-custom/wizard-edit-cookie#COOKIE_PLACEHOLDER\"\n            placeholder=\"chocolate covered cookie...\"\n            valueType=\"String\"\n            [(value)]=\"cookieDescription\">\n        </cmf-core-business-controls-propertyEditor>\n    </cmf-core-controls-execution-view-tab>\n</cmf-core-controls-execution-view>import { PropertyEditorModule } from \"cmf-core-business-controls\";\n\n(...)\n\n@Component({\n    standalone: true,\n    selector: 'icf-cookies-custom-wizard-edit-cookie',\n    imports: [\n        CommonModule,\n        ExecutionViewModule,\n        TransactionExecutionViewModule,\n        PropertyEditorModule\n    ],\n    templateUrl: './wizard-edit-cookie.component.html',\n    styleUrls: ['./wizard-edit-cookie.component.less'],\n    viewProviders: [{ provide: HOST_VIEW_COMPONENT, useExisting: forwardRef(() => WizardEditCookieComponent) }]\n})\nexport class WizardEditCookieComponent extends CustomizableComponent implements TransactionExecutionView, OnInit {\n\n    public cookieName: string;\n    public cookieDescription: string;\n    (...)\n}/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Cookies.EditCookie',\n            title: $localize`:@@icf-cookies-custom/main#EDIT_COOKIE:Edit Cookie`,\n            actionId: 'Cookie.Edit',\n        },\n    ];\n}\n\n(...)\n\n/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'Cookie.Edit',\n            loadComponent: () => import(\n                /* webpackExports: \"WizardEditCookieComponent\" */\n                'icf-cookies-custom').then(m => m.WizardEditCookieComponent),\n            mode: ActionMode.ModalPage\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Execution View#",
            "links": [
              {
                "description": "Execution View# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/executionview/#execution-view"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/executionview/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a Execution View#",
            "links": [
              {
                "description": "Creating a Execution View# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/executionview/#creating-a-execution-view"
              },
              {
                "description": "Creating a Execution View# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/exec-view-done.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/executionview/#conclusion"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/executionview/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Layout",
        "definition": [
          {
            "topic": "Context#",
            "definition": "# The idea is to keep the current page's filters/structure on a page refresh and have the possibility of saving them somewhere, in order to access the same status later. Although this sounds very cool, it's not a \"fire and forget\" feature. There are some things that need to be taken into consideration when creating new pages/components, in order to keep the GUI behavior consistent to what we have already. We can sum up this behavior to simply say \"don't destroy things on refresh\". A few examples of things we don't want to destroy (although exceptions might exist) are the following: - Datagrids' columns/width/selections - Filter values - Page splitter widths - Sliding grid levels/selections  "
          },
          {
            "topic": "How it works#",
            "definition": "#  The solution is very similar to what we already had in UIPages before, but firstly we are going to explain where all this data is saved. This is stored in the LayoutPersonalizationContext SmartTable with the following columns available:   Identifier - The page identifier (usually represented by the route) PrimaryRole - Users with this role will see the corresponding Layout applied UserAccount - Users to whom the Layout will be applied Layout - The json formatted page layout Identifier - The page identifier (usually represented by the route) PrimaryRole - Users with this role will see the corresponding Layout applied UserAccount - Users to whom the Layout will be applied Layout - The json formatted page layout Note: If both user and role fields are blank, it means that every user will have that same Layout applied.** To save this data, you only need to access the Save or Reset Layout wizards, available in every runtime page (More options dropdown)     As you can see, the current Default View can also be saved so if you go to, for instance, the Traceability page and perform the save layout wizard with the default view option set to true, the next time the user/role will open a material, it will open on the Traceability view instead.  "
          },
          {
            "topic": "How is this implemented?#",
            "definition": "#  In pages/components where we want to keep the current layout, we need to apply a directive (cmf-core-controls-layout) in the specific component (similar to the validator one) in order for that same component to be present in the tree of elements to have their layout loaded on component instantiation. ... But what does this mean? Let's start with the basics and check the example of a basic component such as the checkbox.component.ts   Each generic component should have the OnLayout interface implemented and, with it, the corresponding OnLoadLayout and OnSaveLayout methods to implement the specific logic to be applied when loading/saving their data, in this case, the checkbox value. With this logic, we are saying that the checkbox is ready to load its Layout when the checkbox component is instantiated and save it when we open the SaveLayout wizard. The way we indicate that we want a component to address their layout logic is by applying the directive above mentioned. For instance like this:   In wizards, for example, we don't want to maintain any Layout as it is something very volatile and doesn't make sense to keep this kind of data there. So, by default, we don't keep any Layout unless you explicitly put the directive in the specific component call. Note: Remember to apply a different \"Id\" to the directive because if we have, for example, two checkboxes with the same Identifier in the same .html file, we will apply and save the Layout based on the first one found in the DOM.** What will happen later is that, when the page is loaded, the Layout will be loaded recursively based on the directive applied in the html elements. So each component available in the DOM tree will invoke their own Layout logic (OnLoadLayout) and will receive the data, previously resolved based on the identifier.  "
          },
          {
            "topic": "How to use#",
            "definition": "#  It really depends on the requirement. But we can divide this in two main topics: Support Layout in Static Pages Support Layout in EntityType Pages Support Layout in Static Pages Support Layout in EntityType Pages "
          },
          {
            "topic": "EntityType Pages#",
            "definition": "# Pages that are entity types and, with that, inherit the corresponding interface (EntityPageInterface), haven't got much to worry about, as they only need to import the module and have the directive in the needed .html elements.   To have the directive, you should just apply it in the component, providing an unique identifier:   "
          },
          {
            "topic": "Static Pages#",
            "definition": "# However, we have additional responsability when providing the Layout in static pages. These pages consist on components that inherit from the basePage directly and have no other wrapper around them. The same import, mentioned in the above example, still needs to be applied but there is a concept that we can't take for granted here: Saving the default view. In EntityType pages, we have a \"layout guard\" that is responsible for redirecting the user to the saved default view, as they are views associated with the EntityType module. In Static Pages, we don't have any of this. Static Pages' \"views\" button is not a generic button like in EntityType pages, but instead is just an action button group with actions inside and with an onClick logic to switch the page view (usually controlled by *ngIfs). So in this case, how can we guarantee the view is correctly loaded on page instantiation? There's no need to go deep into the algorithm but a logic was implemented in basePage.component.ts that focus on clicking on the loaded layout's default view (if available) after the action bar is loaded. But to do this, we need to have proper view identifiers. Let's look at the user page example:   As we can see, this page implements the basePage component and has the mentioned action button group of its \"Views\". We can also see at the bottom the History View as one of them. Each View is represented by an identifier, in this case, we have \"generic.details\" and \"generic.history\" views available. So when the basePage loads, one of them will be \"clicked\" after the actionBar is loaded.   Additionally, we need to add the corresponding build-context for the Save and Reset buttons:   The parameters basically are: - The pageBag context - The current instance (used for wizard details purposes) - The entity type (null in this case) - The current route url (to represent the identifier to be saved) - The current view identifier With all of these steps concluded, we now can save the Layout properly in these type of pages.  "
          },
          {
            "topic": "FAQ#",
            "definition": "#  This is a small compilation of questions/issues that most people have when applying the layout or before doing so. What is a \"Layout\"? A Layout is basically a snapshot of the page's status and is always represented in a .json format that you can access in the LayoutPersonalizationContext SmartTable. When should I apply a Layout? Are there any exceptions? The Layout should be available/applied in all runtime pages (entity types, uipages, static model pages, etc). There might be some exceptions: - Wizards - Canvas/Other complex components - Components where it just doesn't make sense to keep a Layout/filter (e.g. calendar view, ECAD, etc) I can't clean the filters on a normal ActionBar refresh. Should I force it somehow? No, you must not. That it the correct behavior now, all filters and structures should be kept on a refresh What is the difference between a Reload and a Refresh? A Reload is a PageSwitcher button added to force the page to load the Layout currently saved in the DB. A Refresh will refresh the data but it's not supposed to clean any existing filters or grid/component structures. Saving an UIPage's Layout will add a ST entry specific to that page. Is it a bug? No, it is not. To avoid messing up with the previous UIPage logic, we left the behavior as it was and we are currently working with UIPages' layout in a different way, also because they have specific logic and requirements that need to be addressed separately. I'm resetting the Layout in a specific view. Should the entry be removed? It depends. When resetting the Layout, we are resetting the view's layout so if we have another one available, the entry must still be available in the ST. However, if only that view's layout is available for the route/identifier, then the entry should be removed. I'm adding the directive but can't notice any difference. The filter is not being kept either by refreshing the section/page or after saving the Layout This can have many explanations, such as: - The module is not being imported in the .ts file - The component, where you're adding the directive, does not implement the Layout interface - The filter is being wrongly handled in the .ts (maybe is being reset after reach refresh or in the constructor/init/changes) - If nothing happens after the page is loaded, might be a timing issue. In this case, try debugging the onLoadLayout of the core component and check if the values are being received there I have a filterBar and a data-grid but the data changes if I click, for example, in a select list tab. Will the Layout address this correctly? No because the Layout logic can't guess how you implement your components. Make sure you have, in that case, two filter bars and two data grids, one for each purpose, and avoid performance issues by protecting the filterCollectionChange methods (a good example is the page-transferrequirements or page-transferorders) "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "Context#",
            "links": [
              {
                "description": "Context# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#context"
              }
            ]
          },
          {
            "topic": "How it works#",
            "links": [
              {
                "description": "How it works# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#how-it-works"
              },
              {
                "description": "How it works# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_personalization_table.png"
              },
              {
                "description": "How it works# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_save.png"
              },
              {
                "description": "How it works# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_reset.png"
              }
            ]
          },
          {
            "topic": "How is this implemented?#",
            "links": [
              {
                "description": "How is this implemented?# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#how-is-this-implemented"
              },
              {
                "description": "How is this implemented?# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_interface_implementation.png"
              },
              {
                "description": "How is this implemented?# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_directive.png"
              }
            ]
          },
          {
            "topic": "How to use#",
            "links": [
              {
                "description": "How to use# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#how-to-use"
              }
            ]
          },
          {
            "topic": "EntityType Pages#",
            "links": [
              {
                "description": "EntityType Pages# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#entitytype-pages"
              },
              {
                "description": "EntityType Pages# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_module.png"
              },
              {
                "description": "EntityType Pages# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_section_directive.png"
              }
            ]
          },
          {
            "topic": "Static Pages#",
            "links": [
              {
                "description": "Static Pages# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#static-pages"
              },
              {
                "description": "Static Pages# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_staticpage_html.png"
              },
              {
                "description": "Static Pages# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_staticpage_views.png"
              },
              {
                "description": "Static Pages# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/layout_buildcontext.png"
              }
            ]
          },
          {
            "topic": "FAQ#",
            "links": [
              {
                "description": "FAQ# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/layout/#faq"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/layout/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Library",
        "definition": [
          {
            "topic": "Library#",
            "definition": "# Now that we have the basic structure, we need to generate a library that will accommodate our customization files. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Created the environment setup. Created the environment setup. "
          },
          {
            "topic": "Creating a library#",
            "definition": "# Generate a library template by running the following command at the root folder of the project (e.g., C:\\icf-tutorial): Generate a library template by running the following command at the root folder of the project (e.g., C:\\icf-tutorial): Replace <library-name> with the name of the library. Replace <library-name> with the name of the library. Build the library by running the following command at the root folder of the project (e.g., C:\\icf-tutorial): Build the library by running the following command at the root folder of the project (e.g., C:\\icf-tutorial): Replace <library-name> with the name of the library. Replace <library-name> with the name of the library. "
          },
          {
            "topic": "Structure#",
            "definition": "# The library follows the standard structure defined by Angular, and it is generally located inside the projects folder of an application. When generating a library with the Critical Manufacturing Schematics ⧉, it will also have a metadata (metadata) entry point. Critical Manufacturing Schematics ⧉ The metadata folder houses the metadata files required by the library, as well as those for the fonts used by the library. "
          },
          {
            "topic": "Extra: Deploying custom libraries to productive environments#",
            "definition": "# To deploy custom libraries in productive environments, there are some steps that need to be followed. Let's assume that the library that we want to deploy to a custom environment is identified as icf-cookies-custom. Before deploying the library, the code must be compiled with the production option and prepared as follows: Open PowerShell at the library location, e.g., \\icf-cookies-custom and run the following command: The folder structure should look like this:   It is now possible to deploy the library. Install the folder icf-cookies-custom in your application as follows: Replace <path-to-library> with the path to the library folder. Replace <path-to-library> with the path to the library folder. To use the library, you must import the metadata module in your application's AppModule before importing the MetadataRoutingModule: Then, it is necessary to compile the application with the production option and deploy the bundles to the productive environment. To do so, run the following command at the root of the application (e.g., c:\\icf-tutorial): Once the bundles are regenerated, they will be accessible at [root folder]/dist/<application-name> path. Replace <application-name> with the name of the application, e.g., icf-tutorial. Replace <application-name> with the name of the application, e.g., icf-tutorial. The folder structure for the bundles should look like this:   Now, it is necessary to replace the bundles in the productive environment located at [Server Installation Path]\\UI\\Html. Increment the cacheId and save the config.json file. Open a new Browser window in incognito mode to verify the changes. Increment the cacheId and save the config.json file. Increment the cacheId and save the config.json file. Open a new Browser window in incognito mode to verify the changes. Open a new Browser window in incognito mode to verify the changes. "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have a structure with all the necessary files to kickstart your customization project. For more information about Angular libraries, see Angular Library Documentation ⧉. For more information about Angular libraries format, see Angular Package Format Documentation ⧉. For more information about ESLint configuration, see ESLint Documentation ⧉. For more information about the metadata, see Metadata Documentation. For more information about the Schematics, see Critical Manufacturing Schematics ⧉ Documentation. For more information about Angular libraries, see Angular Library Documentation ⧉. Angular Library Documentation ⧉ For more information about Angular libraries format, see Angular Package Format Documentation ⧉. Angular Package Format Documentation ⧉ For more information about ESLint configuration, see ESLint Documentation ⧉. ESLint Documentation ⧉ For more information about the metadata, see Metadata Documentation. Metadata Documentation For more information about the Schematics, see Critical Manufacturing Schematics ⧉ Documentation. Critical Manufacturing Schematics ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Creating a library#",
            "code": "C:\\icf-tutorialng generate library <library-name><library-name>icf-cookies-customng generate library icf-cookies-customC:\\icf-tutorialng build library <library-name><library-name>icf-cookies-customng build icf-cookies-custom"
          },
          {
            "topic": "Structure#",
            "code": "projectsmetadatalibrary\n├── metadata\n├── src\n|   ├── lib\n|   │   ├── *.ts\n|   │   ├── *.html\n|   │   └── *.less\n|   └── public-api.ts\n├── .eslintrc.json\n├── ng-package.json\n├── package.json\n├── README.md\n├── tsconfig.lib.json\n├── tsconfig.lib.prod.json\n└── tsconfig.spec.jsonmetadata"
          },
          {
            "topic": "Extra: Deploying custom libraries to productive environments#",
            "code": "ng build --configuration=productionnpm install <path-to-library><path-to-library>AppModuleMetadataRoutingModuleimport { CookiesCustomMetadataModule } from 'icf-cookies-custom/metadata';\n\n@NgModule({\n    imports: [\n        ...,\n        CookiesCustomMetadataModule,\n        MetadataRoutingModule\n    ],\n    ...\n})\nexport class AppModule {}c:\\icf-tutorialng build --configuration=production[root folder]/dist/<application-name><application-name>icf-tutorial[Server Installation Path]\\UI\\Html"
          }
        ],
        "links": [
          {
            "topic": "Library#",
            "links": [
              {
                "description": "Library# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#library"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a library#",
            "links": [
              {
                "description": "Creating a library# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#creating-a-library"
              }
            ]
          },
          {
            "topic": "Structure#",
            "links": [
              {
                "description": "Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#structure"
              },
              {
                "description": "Structure# (2)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics"
              }
            ]
          },
          {
            "topic": "Extra: Deploying custom libraries to productive environments#",
            "links": [
              {
                "description": "Extra: Deploying custom libraries to productive environments# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#extra-deploying-custom-libraries-to-productive-environments"
              },
              {
                "description": "Extra: Deploying custom libraries to productive environments# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/folder_structure_deploy_custom_package.png"
              },
              {
                "description": "Extra: Deploying custom libraries to productive environments# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/custom_package_bundles_deploy.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/library/#conclusion"
              },
              {
                "description": "Conclusion# (2)",
                "link": "https://angular.io/guide/libraries"
              },
              {
                "description": "Conclusion# (3)",
                "link": "https://angular.io/guide/angular-package-format"
              },
              {
                "description": "Conclusion# (4)",
                "link": "https://eslint.org/docs/latest/use/configure/"
              },
              {
                "description": "Conclusion# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/"
              },
              {
                "description": "Conclusion# (6)",
                "link": "https://github.com/criticalmanufacturing/ngx-schematics/tree/master/packages/ngx-schematics"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/library/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Localization",
        "definition": [
          {
            "topic": "Localization#",
            "definition": "# This section describes the concept of localization in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The old SystemJS i18n implementation was replaced by the Angular internationalization standards, using a custom ID for matching purposes with the old message: TypeScript\n\n$localize`:@@<library-name>/<filename>#object.MESSAGE_KEY:Message Value` HTML\n\n<div i18n=\"<library-name>/<filename>#object.MESSAGE_KEY\">Message Value</div>\n\n------\n\n<div i18n-title=\"<library-name>/<filename>#object.MESSAGE_KEY\" title=\"Message Value\"></div> TypeScript\n\n$localize`:@@<library-name>/<filename>#object.MESSAGE_KEY:Message Value` TypeScript  HTML\n\n<div i18n=\"<library-name>/<filename>#object.MESSAGE_KEY\">Message Value</div>\n\n------\n\n<div i18n-title=\"<library-name>/<filename>#object.MESSAGE_KEY\" title=\"Message Value\"></div> HTML  For more information about Angular Internationalization, see Angular Internationalization ⧉. For more information about preparing a component for translation, see Angular Prepare component for translation ⧉. For more information about $localize, see Angular localize ⧉. For more information about Angular Internationalization, see Angular Internationalization ⧉. Angular Internationalization ⧉ For more information about preparing a component for translation, see Angular Prepare component for translation ⧉. Angular Prepare component for translation ⧉ For more information about $localize, see Angular localize ⧉. Angular localize ⧉ "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          },
          {
            "topic": "Process#",
            "definition": "# The localization process is divided into two main phases: Translation Phase - After a release, the localization messages present in the code are extracted to a .xliff file using the ng extract-i18n command, which is sent to the translation team. Build Phase - The messages are extracted to a JSON file using the ng extract-i18n --format json command. Then, the extracted messages are merged with the messages translated by the translation team using the id of each message and taking into account if the message text has changed or not. We end up with JSON files for each supported language. Translation Phase - After a release, the localization messages present in the code are extracted to a .xliff file using the ng extract-i18n command, which is sent to the translation team. Translation Phase - After a release, the localization messages present in the code are extracted to a .xliff file using the ng extract-i18n command, which is sent to the translation team. Build Phase - The messages are extracted to a JSON file using the ng extract-i18n --format json command. Then, the extracted messages are merged with the messages translated by the translation team using the id of each message and taking into account if the message text has changed or not. We end up with JSON files for each supported language. Build Phase - The messages are extracted to a JSON file using the ng extract-i18n --format json command. Then, the extracted messages are merged with the messages translated by the translation team using the id of each message and taking into account if the message text has changed or not. We end up with JSON files for each supported language. As a final step, the JSON files are placed in an assets folder in order to be consumed when the user interface starts.   With the JSON files in the assets folder, it is needed to set the localizationFiles property in the config.json with the path where the files were placed. "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "$localize`:@@<library-name>/<filename>#object.MESSAGE_KEY:Message Value`<div i18n=\"<library-name>/<filename>#object.MESSAGE_KEY\">Message Value</div>\n\n------\n\n<div i18n-title=\"<library-name>/<filename>#object.MESSAGE_KEY\" title=\"Message Value\"></div>$localize"
          },
          {
            "topic": "Examples#",
            "code": "label: $localize`:@@icf-cookies-custom/main#labels.LABEL:Label`<div i18n=\"@@icf-cookies-custom/main#labels.LABEL\">Label</div><icf-cookies-custom-component i18n-label=\"@@icf-cookies-custom/main#labels.LABEL\" label=\"label\"></icf-cookies-custom-component>"
          },
          {
            "topic": "Process#",
            "code": ".xliffng extract-i18nng extract-i18n --format jsonassetsassetslocalizationFilesconfig.json{\n    ...,\n    \"general\": {\n        \"supportedCultures\": [\n            \"en-US\",\n            \"pt-PT\",\n            \"de-DE\",\n            \"vi-VN\",\n            \"zh-CN\",\n            \"zh-TW\"\n        ],\n        ...,\n        \"localizationFiles\": \"assets\"\n    }\n}"
          }
        ],
        "links": [
          {
            "topic": "Localization#",
            "links": [
              {
                "description": "Localization# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/localization/#localization"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/localization/#definition"
              },
              {
                "description": "Definition# (2)",
                "link": "https://angular.io/guide/i18n"
              },
              {
                "description": "Definition# (3)",
                "link": "https://angular.io/guide/i18n-common-prepare"
              },
              {
                "description": "Definition# (4)",
                "link": "https://angular.io/api/localize/init/$localize"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/localization/#examples"
              }
            ]
          },
          {
            "topic": "Process#",
            "links": [
              {
                "description": "Process# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/localization/#process"
              },
              {
                "description": "Process# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/localization_process.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/localization/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Menu",
        "definition": [
          {
            "topic": "Menu#",
            "definition": "# Now we'll customize the main menu, so we can access the previously created component. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. "
          },
          {
            "topic": "Customizing the menu#",
            "definition": "# Edit the metadata file icf-cookies-custom-metadata.service.ts: "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you should have a new entry in the left main menu: Cookies. When clicked, it shows a landing page with the Catalogue as an item. If you click on it, it should open the new component you created in the previous section of this tutorial.   "
          },
          {
            "topic": "Actions#",
            "definition": "# The actions is an array of Action and in this tutorial, we defined its id (required) and route (to the created component). "
          },
          {
            "topic": "Menu Groups#",
            "definition": "# The menuGroups is an array of objects MenuGroup that are added to the main menu of the GUI. They also have an id and we defined: a title, an anchor to set if it will appear in the top or bottom portion of the menu, a position if we choose to alter the order of the showed items (numerical order, top to bottom), the iconClass is a property that makes use of system icons, and finally a route. "
          },
          {
            "topic": "Menu Items#",
            "definition": "# The menu items are the childreen of the menu groups. To set the hierarchy, the menuGroupId, must be set with the Menu Groups id. Menu items can also have other menu items has their parents, as long as you set the correspondent id. Has seen in the code above, the actionId is set with the id of the action you want to perform, defined in the actions array. "
          }
        ],
        "code": [
          {
            "topic": "Customizing the menu#",
            "code": "import {\n    Action,\n    MenuGroup,\n    MenuGroupAnchor\n    MenuItem\n} from \"cmf-core\";\n\n(...)\n\n/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'Cookies.Catalogue.Show',\n            route: 'CookiesCatalogue'\n        }\n    ];\n}\n\n/**\n * Menu Groups\n */\npublic override get menuGroups(): MenuGroup[] {\n    return [\n        {\n            id: 'Cookies',\n            title: $localize`:@@icf-cookies-custom/main#COOKIES:Cookies`,\n            anchor: MenuGroupAnchor.Top,\n            position: 100,\n            iconClass: '',\n            route: 'LandingPage/Cookies'\n        }\n    ];\n}\n\n/**\n * Menu Items\n */\npublic override get menuItems(): MenuItem[] {\n    return [\n        {\n            id: 'Cookies.Catalogue',\n            actionId: 'Cookies.Catalogue.Show',\n            menuGroupId: 'Cookies',\n            iconClass: 'icon-mes-et-sm-bom',\n            title: $localize`:@@icf-cookies-custom/main#CATALOGUE:Catalogue`\n        }\n    ];\n}\n\n(...)"
          },
          {
            "topic": "Actions#",
            "code": "actionsAction"
          },
          {
            "topic": "Menu Groups#",
            "code": "menuGroupsMenuGroup"
          }
        ],
        "links": [
          {
            "topic": "Menu#",
            "links": [
              {
                "description": "Menu# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#menu"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Customizing the menu#",
            "links": [
              {
                "description": "Customizing the menu# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#customizing-the-menu"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#conclusion"
              },
              {
                "description": "Conclusion# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/menu.png"
              }
            ]
          },
          {
            "topic": "Actions#",
            "links": [
              {
                "description": "Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#actions"
              }
            ]
          },
          {
            "topic": "Menu Groups#",
            "links": [
              {
                "description": "Menu Groups# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#menu-groups"
              }
            ]
          },
          {
            "topic": "Menu Items#",
            "links": [
              {
                "description": "Menu Items# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/menu/#menu-items"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/menu/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Metadata\n\n\n\n\n\n\n\n\n\nMetadata\n\n\n\n\n\nAction Bars\n\n\n\n\n\n\nAction Button Groups\n\n\n\n\n\n\nAction Buttons\n\n\n\n\n\n\nAction Groups\n\n\n\n\n\n\nActions\n\n\n\n\n\n\nCredits\n\n\n\n\n\n\nEntity Types\n\n\n\n\n\n\nFile Viewers\n\n\n\n\n\n\nFlex Components\n\n\n\n\n\n\nMenu Groups\n\n\n\n\n\n\nMenu Items\n\n\n\n\n\n\nMenu Sub Groups\n\n\n\n\n\n\nPackage Info\n\n\n\n\n\n\nRoutes\n\n\n\n\n\n\nSide Bar Tabs\n\n\n\n\n\n\nStatic Types\n\n\n\n\n\n\nTables\n\n\n\n\n\n\nUser Menus",
        "definition": [
          {
            "topic": "Metadata#",
            "definition": "# The metadata of the library is where the information for a library is defined, such as routes, actions, menu items, entity types, etc. The metadata is a secondary entry point in a library. This allows us to reduce the size of the main bundle of the application, since the metadata is required at the application startup, but the components are only necessary when the user navigates/uses them. "
          },
          {
            "topic": "Folder Structure#",
            "definition": "# The metadata is located in the metadata folder of the library. The metadata folder contains two main files: metadata.module.ts - Provides and loads the metadata service. metadata.service.ts - Contains the library's information, actions, routes, entity types, etc. metadata.module.ts - Provides and loads the metadata service. metadata.service.ts - Contains the library's information, actions, routes, entity types, etc. For more information about the Secondary Entry Points, see Secondary Entry Points documentation ⧉. For more information about the Secondary Entry Points, see Secondary Entry Points documentation ⧉. Secondary Entry Points documentation ⧉ "
          },
          {
            "topic": "Dependencies#",
            "definition": "# In the metadata, it is only possible to import the packages cmf-core, cmf-core-controls, and cmf-core-shell as a whole. If you require additional imports, you will need to load them dynamically. Importing additional libraries in the metadata can slow down the application's startup time. Additionally, the metadata of the library no longer imports its components or services. Instead, you should import them dynamically as needed. This approach can help to reduce the size of the metadata and improve the overall performance of the application. "
          },
          {
            "topic": "Organization#",
            "definition": "# The library's metadata service extends the PackageMetadata class that defines getters that the library can override to provide its own information. The available getters are: actionBars - Defines the action bars that the library contains. actionButtonGroups - Defines the action button groups that the library contains. actionButtons - Defines the action buttons that the library contains. actionGroups - Defines the action groups that the library contains. actions - Defines the actions that the library contains. credits - Defines the credits that the library contains. entityTypes - Defines the entity types that the library contains. fileViewers - Defines the file viewers that the library contains. flexComponents - Defines the flex components that the library contains. menuGroups - Defines the menu groups that the library contains. menuItems - Defines the menu items that the library contains. menuSubGroups - Defines the menu sub groups that the library contains. packageInfo - Defines the package information that the library contains. routes - Defines the routes that the library contains. sideBarTabs - Defines the side bar tabs that the library contains. staticTypes - Defines the static types that the library contains. tables - Defines the tables that the library contains. userMenus - Defines the user menus that the library contains. actionBars - Defines the action bars that the library contains. actionBars actionButtonGroups - Defines the action button groups that the library contains. actionButtonGroups actionButtons - Defines the action buttons that the library contains. actionButtons actionGroups - Defines the action groups that the library contains. actionGroups actions - Defines the actions that the library contains. actions credits - Defines the credits that the library contains. credits entityTypes - Defines the entity types that the library contains. entityTypes fileViewers - Defines the file viewers that the library contains. fileViewers flexComponents - Defines the flex components that the library contains. flexComponents menuGroups - Defines the menu groups that the library contains. menuGroups menuItems - Defines the menu items that the library contains. menuItems menuSubGroups - Defines the menu sub groups that the library contains. menuSubGroups packageInfo - Defines the package information that the library contains. packageInfo routes - Defines the routes that the library contains. routes sideBarTabs - Defines the side bar tabs that the library contains. sideBarTabs staticTypes - Defines the static types that the library contains. staticTypes tables - Defines the tables that the library contains. tables userMenus - Defines the user menus that the library contains. userMenus "
          },
          {
            "topic": "Define Fonts for a Library#",
            "definition": "# Some libraries need to import fonts to be used in the application. To do this, you need to: Place the .less and font files in the assets\\fonts\\<library-name> directory. Place the Typescript files, including the metadata.ts file that defines the font metadata, in the metadata\\src\\lib\\fonts directory of the library. Import the FontService and use the load() method to load the font metadata in the library's metadata.module.ts file. Place the .less and font files in the assets\\fonts\\<library-name> directory. Place the Typescript files, including the metadata.ts file that defines the font metadata, in the metadata\\src\\lib\\fonts directory of the library. Import the FontService and use the load() method to load the font metadata in the library's metadata.module.ts file. "
          }
        ],
        "code": [
          {
            "topic": "Folder Structure#",
            "code": "metadatametadatametadata.module.tsmetadata.service.tsmetadata\n├── src\n│   ├── lib\n│   │   ├── example-metadata.module.ts\n│   │   └── example-metadata.service.ts\n│   └── public-api.ts\n└── ng-package.jsonSecondary Entry Points"
          },
          {
            "topic": "Dependencies#",
            "code": "cmf-corecmf-core-controlscmf-core-shell"
          },
          {
            "topic": "Organization#",
            "code": "PackageMetadataactionBarsactionButtonGroupsactionButtonsactionGroupsactionscreditsentityTypesfileViewersflexComponentsmenuGroupsmenuItemsmenuSubGroupspackageInforoutessideBarTabsstaticTypestablesuserMenus"
          },
          {
            "topic": "Define Fonts for a Library#",
            "code": ".lessassets\\fonts\\<library-name>metadata.tsmetadata\\src\\lib\\fontsFontServiceload()metadata.module.ts...\nimport ExampleFontMetadata from './fonts/example/metadata';\n\n@NgModule({\n    providers: [ExampleMetadataService]\n})\nexport class ExampleMetadataModule {\n\n    /**\n     * Constructor\n     */\n    constructor(loader: MetadataLoader, fonts: FontService) {\n        fonts.load(ExampleFontMetadata);\n        loader.loadMetadata(ExampleMetadataService);\n    }\n..."
          }
        ],
        "links": [
          {
            "topic": "Metadata#",
            "links": [
              {
                "description": "Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/#metadata"
              }
            ]
          },
          {
            "topic": "Folder Structure#",
            "links": [
              {
                "description": "Folder Structure# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/#folder-structure"
              },
              {
                "description": "Folder Structure# (2)",
                "link": "https://github.com/ng-packagr/ng-packagr/blob/main/docs/secondary-entrypoints.md"
              }
            ]
          },
          {
            "topic": "Dependencies#",
            "links": [
              {
                "description": "Dependencies# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/#dependencies"
              }
            ]
          },
          {
            "topic": "Organization#",
            "links": [
              {
                "description": "Organization# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/#organization"
              },
              {
                "description": "Organization# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/"
              },
              {
                "description": "Organization# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/"
              },
              {
                "description": "Organization# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/"
              },
              {
                "description": "Organization# (5)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/"
              },
              {
                "description": "Organization# (6)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/"
              },
              {
                "description": "Organization# (7)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/"
              },
              {
                "description": "Organization# (8)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/"
              },
              {
                "description": "Organization# (9)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/"
              },
              {
                "description": "Organization# (10)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/"
              },
              {
                "description": "Organization# (11)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/"
              },
              {
                "description": "Organization# (12)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/"
              },
              {
                "description": "Organization# (13)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/"
              },
              {
                "description": "Organization# (14)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/"
              },
              {
                "description": "Organization# (15)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/"
              },
              {
                "description": "Organization# (16)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/"
              },
              {
                "description": "Organization# (17)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/"
              },
              {
                "description": "Organization# (18)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/"
              },
              {
                "description": "Organization# (19)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/"
              }
            ]
          },
          {
            "topic": "Define Fonts for a Library#",
            "links": [
              {
                "description": "Define Fonts for a Library# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/#define-fonts-for-a-library"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/",
        "flag": true,
        "submodulos": [
          {
            "topic": "Action Bars",
            "definition": [
              {
                "topic": "Action Bars#",
                "definition": "# This section describes the concept of action bars in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The actionBars getter keeps track of which actions need to be added or withdrawn from an action bar. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The action bar's ID. elementsToAdd - The actions that need to be added to the action bar. elementsToRemove - The actions that need to be removed from the action bar. id - The action bar's ID. elementsToAdd - The actions that need to be added to the action bar. elementsToRemove - The actions that need to be removed from the action bar. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "actionBars"
              },
              {
                "topic": "Properties#",
                "code": "idelementsToAddelementsToRemove"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionBarId',\n            elementsToAdd: [\n                {\n                    id: 'Icf.Cookies.Custom.ActionButton',\n                    type: ActionBarElementType.ACTION_BUTTON\n                },\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonGroup',\n                    type: ActionBarElementType.ACTION_BUTTON_GROUP,\n                    actionButtonGroupButtons: [\n                        { id: 'Icf.Cookies.Custom.InjectedButton', requiredFunctionality: 'IcfCookie.RequiredFunctionality' }\n                    ]\n                }\n            ],\n            elementsToRemove: [\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonRemove',\n                    type: ActionBarElementType.ACTION_BUTTON\n                },\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonGroupRemove',\n                    type: ActionBarElementType.ACTION_BUTTON_GROUP\n                }\n            ]\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Action Bars#",
                "links": [
                  {
                    "description": "Action Bars# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#action-bars"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Action Button Groups",
            "definition": [
              {
                "topic": "Action Button Groups#",
                "definition": "# This section describes the concept of action button groups in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The actionButtonGroups getter defines the action button groups that the library contains. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The action button group's ID. title - The title of the action button group. alternative - The alternative text of the action button group. iconClass - The icon class of the action button group. style - The style of the action button group. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button group is less relevant. id - The action button group's ID. title - The title of the action button group. alternative - The alternative text of the action button group. iconClass - The icon class of the action button group. style - The style of the action button group. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button group is less relevant. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "actionButtonGroups"
              },
              {
                "topic": "Properties#",
                "code": "idtitlealternativeiconClassstyleonInitlessRelevant"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Action Button Groups\n */\npublic override get actionButtonGroups(): ActionButtonGroup[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Group',\n            title: $localize`:@@icf-cookies-custom/main#ADD:Add`,\n            alternative: $localize`:@@icf-custom-cookies/main#ALTERNATIVE:Alternative`,\n            iconClass: 'icon-core-st-sm-add',\n            onInit: async (actionComponent?: ActionComponent, actionButtonMetadata?: BaseActionButton) => {\n                return;\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Action Button Groups#",
                "links": [
                  {
                    "description": "Action Button Groups# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#action-button-groups"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Action Buttons",
            "definition": [
              {
                "topic": "Action Buttons#",
                "definition": "# This section describes the concept of action buttons in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The Action Button consists of all the information necessary to display a button on the action bar of a page. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The action button's ID. title - The title of the action button. alternative - The alternative text of the action button. iconClass - The icon class of the action button. style - The style of the action button. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button is less relevant. actionId - The action ID of the action button. Can be a string or a function that returns an Action. onBuildContext - The function to be called right before the action component is rendered to build the context. id - The action button's ID. title - The title of the action button. alternative - The alternative text of the action button. iconClass - The icon class of the action button. style - The style of the action button. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button is less relevant. actionId - The action ID of the action button. Can be a string or a function that returns an Action. onBuildContext - The function to be called right before the action component is rendered to build the context. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "Action Button"
              },
              {
                "topic": "Properties#",
                "code": "idtitlealternativeiconClassstyleonInitlessRelevantactionIdonBuildContext"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Create',\n            title: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            alternative: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            iconClass: 'icon-core-st-lg-new',\n            actionId: 'Action.Create',\n            onBuildContext: async (context: any): Promise<any> => {\n                context.editMode = 1;\n                return context;\n            }\n        }\n    ];\n}/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Create',\n            title: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            alternative: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            actionId: this.resolveExampleAction('Create'),\n            iconClass: 'icon-core-st-lg-new'\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Action Buttons#",
                "links": [
                  {
                    "description": "Action Buttons# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#action-buttons"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Action Groups",
            "definition": [
              {
                "topic": "Action Groups#",
                "definition": "# This section describes the concept of action groups in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The Action Group consists of all the information necessary to display a group of buttons on the action bar of a page. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The action group's ID. label - The label of the action group. actionGroupButtons - The action buttons of the action group. id - The action group's ID. label - The label of the action group. actionGroupButtons - The action buttons of the action group. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "Action Group"
              },
              {
                "topic": "Properties#",
                "code": "idlabelactionGroupButtons"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Action Groups\n */\npublic override get actionGroups(): ActionGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-action-group',\n            label: $localize`:@@icf-cookies-custom/main#ACTION_GROUP:Action Group`,\n            actionGroupButtons: [\n                {\n                    id: 'icf-cookies-custom-example-action-button',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Action Groups#",
                "links": [
                  {
                    "description": "Action Groups# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#action-groups"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Actions",
            "definition": [
              {
                "topic": "Actions#",
                "definition": "# This section describes the concept of actions in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The actions getter defines the actions that the library contains. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The action's ID. route - The route to navigate to when the action is executed. loadComponent - The function that loads the component that will be displayed when the action is executed. handler - The function that will be executed when the action is called. canExecute - The function that determines whether the action can be executed. context - Additional context for the action. inputs - The inputs that will be passed to the component when it is loaded. outputs - Outputs that are triggered at the end of the action. mode - The mode of the action defined using the ActionMode enum. id - The action's ID. route - The route to navigate to when the action is executed. loadComponent - The function that loads the component that will be displayed when the action is executed. handler - The function that will be executed when the action is called. canExecute - The function that determines whether the action can be executed. context - Additional context for the action. inputs - The inputs that will be passed to the component when it is loaded. outputs - Outputs that are triggered at the end of the action. mode - The mode of the action defined using the ActionMode enum. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "actions"
              },
              {
                "topic": "Properties#",
                "code": "idrouteloadComponenthandlercanExecutecontextinputsoutputsmodeActionMode"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'icf-cookies-custom-example-action',\n            route: 'Entity/IcfCookieCustom/:id',\n            canExecute: this.canExecuteExampleAction.bind(this),\n            context: {\n                example: 'example'\n            },\n            mode: ActionMode.NewPage\n        }\n    ];\n}/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'IcfCookie.Perform',\n            loadComponent: () => import(\n                /* webpackExports: \"WizardPerformIcfCookieInstance\" */\n                'icf-cookies-custom').then(m => m.WizardPerformIcfCookieInstance),\n            canExecute: this.canExecutePerformIcfCookieInstanceAction.bind(this),\n            context: {\n                requiredFunctionalities: 'IcfCookieInstance.Perform',\n                title: $localize`:@@icf-cookies-custom/main#actions.ICF_COOKIE_INSTANCE_PERFORM:Perform`,\n                iconClass: 'icon-core-st-lg-execute'\n            },\n            mode: ActionMode.ModalPage,\n            inputs: {\n                instance: {\n                    type: SimpleType.ReferenceType,\n                    referenceType: Cmf.Foundation.Common.ReferenceType.EntityType,\n                    referenceTypeName: 'IcfCookieInstance'\n                } as ComplexType\n            },\n            outputs: {\n                instanceOutput: {\n                    type: SimpleType.String,\n                    collectionType: CollectionType.Array\n                } as ComplexType\n            }\n        }\n    ];\n}/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'IcfCookie.Action',\n            handler: async (context: any): Promise<ActionData> => {\n\n                const link = this.navigation.getLink(\n                    context.instance,\n                    ReferenceType.Example,\n                    LinkType.Internal\n                );\n\n                return {\n                    route: link,\n                    context: context\n                };\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Actions#",
                "links": [
                  {
                    "description": "Actions# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#actions"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Credits",
            "definition": [
              {
                "topic": "Credits#",
                "definition": "# This section describes the concept of credits in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The Credits getter defines the list of individuals or organizations responsible for the creation or production of a project that is being used in the library. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name - The name of the individual or organization. nameLink - The URL of the individual or organization. license - The license of the project. licenseLink - The URL of the license. name - The name of the individual or organization. nameLink - The URL of the individual or organization. license - The license of the project. licenseLink - The URL of the license. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "Credits"
              },
              {
                "topic": "Properties#",
                "code": "namenameLinklicenselicenseLink"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Credits\n */\npublic override get credits(): Credit[] {\n    return [\n        {\n            name: 'Example',\n            nameLink: 'https://example.com',\n            license: 'MIT',\n            licenseLink: 'https://example.com/license'\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Credits#",
                "links": [
                  {
                    "description": "Credits# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#credits"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Entity Types",
            "definition": [
              {
                "topic": "Entity Types#",
                "definition": "# This section describes the concept of entity types in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The entityTypes getter is responsible for defining the list of entity types used in the library. It enables the control of specific behaviors of entity type pages, such as the views displayed. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name - The name of the entity type. defaultView - The default view that is used in the entity type. views - The list of views that are used in the entity type. contextTables - The list of tables that are used in the context of the entity type. entityTileCreator - The function that returns the information of the entity type to fill a tile. entityBasicInfoCreator - The function that returns the information of the entity type to fill the basic information section. name - The name of the entity type. defaultView - The default view that is used in the entity type. views - The list of views that are used in the entity type. contextTables - The list of tables that are used in the context of the entity type. entityTileCreator - The function that returns the information of the entity type to fill a tile. entityBasicInfoCreator - The function that returns the information of the entity type to fill the basic information section. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "entityTypes"
              },
              {
                "topic": "Properties#",
                "code": "namedefaultViewviewscontextTablesentityTileCreatorentityBasicInfoCreator"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ]\n        }\n    ];\n}contextTables/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ],\n            contextTables: [\n                {\n                    name: 'IcfCookieContextTable',\n                    type: MetadataTableType.GenericTable,\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.EXAMPLE:Example Context Table`,\n                    prepareTableDataInput: (\n                        instance: Cmf.Example.BusinessObjects.IcfCookie,\n                        filters: Cmf.Foundation.BusinessObjects.QueryObject.FilterCollection\n                    ) => {\n                        return Object.assign(\n                            new Cmf.Example.BusinessOrchestration.IcfCookieManagement.InputObjects.LoadIcfCookieContextTableInput(),\n                            {\n                                example: instance,\n                                Filters: filters\n                            }\n                        );\n                    },\n                    handleTableDataOutput:\n                        (output: Cmf.Example.BusinessOrchestration.IcfCookieManagement.OutputObjects\n                            .LoadIcfCookieContextTableOutput) => {\n                            return output.IcfCookie.ContextTable.Data;\n                        },\n                    instanceColumn: 'IcfCookieName',\n                    columns: [\n                        {\n                            name: 'IcfCookieName',\n                            label: $localize`:@@icf-cookies-custom/main#contextTables.columns.EXAMPLE_ET_NAME:IcfCookie Name`,\n                            hidden: true\n                        },\n                        {\n                            name: 'IcfCookieColumn',\n                            label: $localize`:@@icf-cookies-custom/main#contextTables.columns.EXAMPLE_ET_COLUMN:Column Name`\n                        }\n                    ]\n                },\n                ...\n            ]\n        }\n    ];\n}entityTileCreator/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            entityTileCreator: async (example: Cmf.Example.BusinessObjects.IcfCookie): Promise<EntityTypeTileInfo> => {\n\n                ...\n\n                return {\n                    description: example.Type,\n                    badges: [\n                        {\n                            title: $localize`:@@icf-cookies-custom/main#INSTANCES:Instances`,\n                            icon: 'icon-example',\n                            value: example.InstancesCount\n                        }\n                    ],\n                    ...\n                };\n            }\n        }\n    ];\n}entityBasicInfoCreator/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ],\n            entityBasicInfoCreator: async (example: Cmf.Example.BusinessObjects.IcfCookie): Promise<EntityTypeBasicInfoProperties> => {\n\n                const entityTypeBasicInfoProperties: EntityTypeBasicInfoProperties = {\n                    bodyProperties: new Array<EntityTypeBasicInfoProperty>(),\n                    headerProperties: new Array<EntityTypeBasicInfoProperty>()\n                };\n\n                ...\n\n                return entityTypeBasicInfoProperties;\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Entity Types#",
                "links": [
                  {
                    "description": "Entity Types# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#entity-types"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "File Viewers",
            "definition": [
              {
                "topic": "File Viewers#",
                "definition": "# This section describes the concept of file viewers in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The fileViewers getter is responsible for defining custom file viewers to be used on InBrowserViewer component. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name - The name of the file viewer. fileMimeTypes - The list of file mime types that the file viewer can handle. contentTypes - The list of content types that the file viewer can handle. componentFileInput - The name of the file input component. componentFileInputContentType - The content type of the file input component. Defined by the FileViewerComponentFileInputContentType enum, it can be Blob, Url, or EntityDocumentation. loadComponent - The function that loads the file viewer component. takeScreenshotAction - The action that takes a screenshot of the file viewer. name - The name of the file viewer. fileMimeTypes - The list of file mime types that the file viewer can handle. contentTypes - The list of content types that the file viewer can handle. componentFileInput - The name of the file input component. componentFileInputContentType - The content type of the file input component. Defined by the FileViewerComponentFileInputContentType enum, it can be Blob, Url, or EntityDocumentation. loadComponent - The function that loads the file viewer component. takeScreenshotAction - The action that takes a screenshot of the file viewer. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "fileViewers"
              },
              {
                "topic": "Properties#",
                "code": "namefileMimeTypescontentTypescomponentFileInputcomponentFileInputContentTypeFileViewerComponentFileInputContentTypeloadComponenttakeScreenshotAction"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * File Viewers\n */\npublic override get fileViewers(): FileViewerMetadata[] {\n    return [\n        {\n            name: 'Example File Viewer',\n            fileMimeTypes: ['application/zip'],\n            contentTypes: ['Example'],\n            componentFileInput: 'exampleFile',\n            componentFileInputContentType: 2, // EntityDocumentation\n            loadComponent: () => import(\n                /* webpackExports: \"ExampleViewer\" */\n                'icf-cookies-custom').then(m => m.ExampleViewer),\n            takeScreenshotAction: 'Icf.Cookies.Custom.TakeScreenshot'\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "File Viewers#",
                "links": [
                  {
                    "description": "File Viewers# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#file-viewers"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Flex Components",
            "definition": [
              {
                "topic": "Flex Components#",
                "definition": "# This section describes the concept of flex components in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The flexComponents getter is responsible for allowing to add or remove components from the user interface, either framework components or other customized ones. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The component selector. context - A context for the injection. If defined, will only apply if the context selector is an ancestor of the component. subComponentsToAdd - A list of components to add to the main component. subComponentsToRemove - A list of components to remove from the main component. id - The component selector. context - A context for the injection. If defined, will only apply if the context selector is an ancestor of the component. subComponentsToAdd - A list of components to add to the main component. subComponentsToRemove - A list of components to remove from the main component. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "flexComponents"
              },
              {
                "topic": "Properties#",
                "code": "idcontextsubComponentsToAddsubComponentsToRemove"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Flex Components\n */\npublic override get flexComponents(): FlexComponent[] {\n    return [\n        {\n            id: 'icf-cookies-custom-wizard',\n            context: 'icf-cookies-custom-custom-wizard',\n            subComponentsToAdd: [{\n                target: {\n                    anchor: 'icf-cookies-custom-wizard-step',\n                    index: 1,\n                    location: FlexComponentLocation.NextTo\n                },\n                components: [\n                    {\n                        component: () => import(\n                            /* webpackExports: \"InjectedStep\" */\n                            'icf-cookies-custom').then(m => m.InjectedStep),\n                        subComponent: 'icf-cookies-custom-wizard-step'\n                    }\n                ]\n            }],\n            subComponentsToRemove: [{\n                target: {\n                    element: 'icf-cookies-custom-component[id=1]',\n                    anchor: 'example'\n                }\n            }]\n        },\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Flex Components#",
                "links": [
                  {
                    "description": "Flex Components# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#flex-components"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Menu Groups",
            "definition": [
              {
                "topic": "Menu Groups#",
                "definition": "# This section describes the concept of menu groups in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# A menu group is a collection of menu items that are displayed in a menu. Menu groups are used to group menu items together and to provide a visual separation between groups of menu items. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the menu group. title - The title of the menu group. anchor - The anchor of the menu group. requiredFunctionalities - The required functionalities of the menu group. iconClass - The icon of the menu group. position - The position of the menu group. itemsGenerator - The function that generates the menu items of the menu group. route - The route to navigate when clicking on a menu group. id - The id of the menu group. title - The title of the menu group. anchor - The anchor of the menu group. requiredFunctionalities - The required functionalities of the menu group. iconClass - The icon of the menu group. position - The position of the menu group. itemsGenerator - The function that generates the menu items of the menu group. route - The route to navigate when clicking on a menu group. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Properties#",
                "code": "idtitleanchorrequiredFunctionalitiesiconClasspositionitemsGeneratorroute"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Menu groups\n */\npublic override get menuGroups(): MenuGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-menu-group',\n            anchor: MenuGroupAnchor.Top,\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            iconClass: 'icon-core-st-lg-example',\n            route: 'Examples',\n            position: 1\n        }\n    ];\n}itemsGenerator/**\n * Menu groups\n */\npublic override get menuGroups(): MenuGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-menu-group',\n            anchor: MenuGroupAnchor.Top,\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            iconClass: 'icon-core-st-lg-example',\n            route: 'Examples',\n            position: 1,\n            itemsGenerator: {\n                items: (): Promise<PanelBarItem[]> => {\n                    ...\n                }\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Menu Groups#",
                "links": [
                  {
                    "description": "Menu Groups# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#menu-groups"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Menu Items",
            "definition": [
              {
                "topic": "Menu Items#",
                "definition": "# This section describes the concept of menu items in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The menuItems getter is responsible for defining the items that will be displayed in a menu group. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the menu item. menuGroupId - The id of the menu group that the menu item belongs to. menuSubGroupId - The id of the menu sub group that the menu item belongs to. title - The menu item title. subTitle - The menu item subtitle. image - The menu item image. canShow - A function that is responsible for indicating if a menu item should be shown or hidden. requiredFunctionalities - A list of functionalities that are required for the menu item to be shown. position - The position of the menu item. actionId - The id of the action that will be executed when the menu item is clicked. iconClass - The icon of the menu item. id - The id of the menu item. menuGroupId - The id of the menu group that the menu item belongs to. menuSubGroupId - The id of the menu sub group that the menu item belongs to. title - The menu item title. subTitle - The menu item subtitle. image - The menu item image. canShow - A function that is responsible for indicating if a menu item should be shown or hidden. requiredFunctionalities - A list of functionalities that are required for the menu item to be shown. position - The position of the menu item. actionId - The id of the action that will be executed when the menu item is clicked. iconClass - The icon of the menu item. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "menuItems"
              },
              {
                "topic": "Properties#",
                "code": "idmenuGroupIdmenuSubGroupIdtitlesubTitleimagecanShowrequiredFunctionalitiespositionactionIdiconClass"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Menu Items\n */\npublic override get menuItems(): MenuItem[] {\n    return [\n        {\n            id: 'IcfCookie.MenuItem',\n            actionId: 'IcfCookie.Action',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            iconClass: 'icon-core-st-lg-example',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            subTitle: $localize`:@@icf-cookies-custom/main#EXAMPLE_SUBTITLE:Example SubTitle`,\n            requiredFunctionalities: 'IcfCookie.Functionality'\n        },\n    ];\n}canShow/**\n * Menu Items\n */\npublic override get menuItems(): MenuItem[] {\n    return [\n        {\n            id: 'IcfCookie.MenuItem',\n            actionId: 'IcfCookie.Action',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            iconClass: 'icon-core-st-lg-example',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            canShow: async (): Promise<boolean> => {\n\n                ...\n\n                return true;\n            }\n        },\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Menu Items#",
                "links": [
                  {
                    "description": "Menu Items# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#menu-items"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Menu Sub Groups",
            "definition": [
              {
                "topic": "Menu Sub Groups#",
                "definition": "# This section describes the concept of menu sub groups in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The menuSubGroups getter is responsible for defining the sub-groups that will be displayed in a menu group. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the menu sub group. menuGroupId - The id of the menu group that the menu sub group belongs to. title - The menu sub group title. position - The position of the menu sub group. requiredFunctionalities - A list of functionalities that are required for the menu sub group to be shown. id - The id of the menu sub group. menuGroupId - The id of the menu group that the menu sub group belongs to. title - The menu sub group title. position - The position of the menu sub group. requiredFunctionalities - A list of functionalities that are required for the menu sub group to be shown. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "menuSubGroups"
              },
              {
                "topic": "Properties#",
                "code": "idmenuGroupIdtitlepositionrequiredFunctionalities"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Menu Sub Groups\n */\npublic override get menuSubGroups(): MenuSubGroup[] {\n    return [\n        {\n            id: 'IcfCookie.MenuSubGroup',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            position: 1\n        },\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Menu Sub Groups#",
                "links": [
                  {
                    "description": "Menu Sub Groups# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#menu-sub-groups"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Package Info",
            "definition": [
              {
                "topic": "Package Info#",
                "definition": "# This section describes the concept of package info in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The PackageInfo class defines the information about the library. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name - The name of the library. loader - The function to load the library. converters - The converters that the library contains. widgets - The widgets that the library contains. dataSources - The data sources that the library contains. components - The components that the library contains. name - The name of the library. loader - The function to load the library. converters - The converters that the library contains. widgets - The widgets that the library contains. dataSources - The data sources that the library contains. components - The components that the library contains. "
              },
              {
                "topic": "Examples#",
                "definition": "#  "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "PackageInfo"
              },
              {
                "topic": "Properties#",
                "code": "nameloaderconverterswidgetsdataSourcescomponents"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Package Info\n */\npublic override get packageInfo(): PackageInfo {\n    return {\n        name: 'icf-cookies-custom',\n        loader: () => import(\n            /* webpackExports: [] */\n            'icf-cookies-custom'),\n        converters: [],\n        widgets: [],\n        dataSources: [],\n        components: []\n    };\n}"
              }
            ],
            "links": [
              {
                "topic": "Package Info#",
                "links": [
                  {
                    "description": "Package Info# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#package-info"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Routes",
            "definition": [
              {
                "topic": "Routes#",
                "definition": "# This section describes the concept of routes in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The routes getter is responsible for defining the routes that will be displayed in the application. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the parent route where the route will be attached to. routes - The list of routes. id - The id of the parent route where the route will be attached to. routes - The list of routes. In the routes array, besides the properties in Route ⧉, the following properties are also available: Route ⧉ routeId - The id of the route. children - The list of child routes. data - Additional developer-defined data provided to the component via ActivatedRoute. By default, no additional data is passed. routeId - The id of the route. children - The list of child routes. data - Additional developer-defined data provided to the component via ActivatedRoute. By default, no additional data is passed. See ActivatedRoute ⧉ for more information about the properties of the activated route. See Route ⧉ for more information about the properties of the route. See ActivatedRoute ⧉ for more information about the properties of the activated route. ActivatedRoute ⧉ See Route ⧉ for more information about the properties of the route. Route ⧉ "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "routes"
              },
              {
                "topic": "Properties#",
                "code": "idroutesrouteIdchildrendataActivatedRoute"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            id: KnownRoutes.Page,\n            routes: [\n                {\n                    path: 'Entity/IcfCookie/:id',\n                    loadChildren:\n                        () => import(\n                            /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                            'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n                    data: {\n                        title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                        iconClass: 'icon-core-st-lg-example',\n                        requiredFunctionalities: 'IcfCookie.Functionality'\n                    }\n                }\n            ]\n        }\n    ];\n}/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            id: KnownRoutes.Page,\n            routes: [\n                {\n                    path: 'IcfCookie',\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n                    data: {\n                        title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                        iconClass: 'icon-core-st-lg-example',\n                        fixedTab: true,\n                        fixedTabLocation: 'right',\n                        fixedTabOrder: 1\n                    }\n                }\n            ]\n        }\n    ];\n}buildContextcanExecute/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            path: 'IcfCookie',\n            loadChildren: () => import(\n                /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n            data: {\n                title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                iconClass: 'icon-core-st-lg-example',\n                buildContext: async (instruction: ActivatedRouteSnapshot): Promise<any> => {\n                    const context: any = {};\n\n                    ...\n\n                    return context;\n                },\n                canExecute: async (context: any, messages: string[]): Promise<boolean> => {\n\n                    ...\n\n                    return true;\n                }\n                requiredFunctionalities: 'IcfCookie.Functionality'\n            }\n        }\n    ];\n}buildRouteToRedirect/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            path: 'Entity/IcfCookie/:id',\n            loadChildren: () => import(\n                /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n            data: {\n                requiredFunctionalities: 'IcfCookie.Functionality',\n                buildRouteToRedirect: async (urlSegments: string[], params: any, queryParams: any): Promise<string> => {\n\n                    ...\n\n                    return `Entity/IcfCookie/${params.id}/PageToRedirect`;\n                }\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Routes#",
                "links": [
                  {
                    "description": "Routes# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#routes"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#properties"
                  },
                  {
                    "description": "Properties# (2)",
                    "link": "https://angular.io/api/router/Route"
                  },
                  {
                    "description": "Properties# (3)",
                    "link": "https://angular.io/api/router/ActivatedRoute"
                  },
                  {
                    "description": "Properties# (4)",
                    "link": "https://angular.io/api/router/Route"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Side Bar Tabs",
            "definition": [
              {
                "topic": "Side Bar Tabs#",
                "definition": "# This section describes the concept of side bar tabs in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The sideBarTabs getter is responsible for defining the side bar tabs that will be displayed in the application. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the side bar tab. name - The name of the side bar tab. iconClass - The icon class of the side bar tab. loadComponent - The function that loads the component that will be displayed when the side bar tab is displayed. onInit - The function that will be executed when the side bar tab is initialized. requiredFunctionalities - The functionalities that are required for the side bar tab to be displayed. position - The position of the side bar tab. isVisible - The function that determines whether the side bar tab is visible. id - The id of the side bar tab. name - The name of the side bar tab. iconClass - The icon class of the side bar tab. loadComponent - The function that loads the component that will be displayed when the side bar tab is displayed. onInit - The function that will be executed when the side bar tab is initialized. requiredFunctionalities - The functionalities that are required for the side bar tab to be displayed. position - The position of the side bar tab. isVisible - The function that determines whether the side bar tab is visible. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "sideBarTabs"
              },
              {
                "topic": "Properties#",
                "code": "idnameiconClassloadComponentonInitrequiredFunctionalitiespositionisVisible"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Side bar tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n        }\n    ];\n}onInit/**\n * Side bar tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n            onInit: (context: any, updateNotificationNumber: SetSideBarTabNumberIndicator) => {\n                ...\n            },\n        }\n    ];\n}isVisible/**\n * Side Bar Tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n            isVisible: async (): Promise<boolean> => {\n\n                ...\n\n                return true;\n            }\n        },\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Side Bar Tabs#",
                "links": [
                  {
                    "description": "Side Bar Tabs# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#side-bar-tabs"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Static Types",
            "definition": [
              {
                "topic": "Static Types#",
                "definition": "# This section describes the concept of static types in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The staticTypes getter is responsible for defining the static types that will be used in the application. An Static Type consists of a string key (Static Type name: LookupTable, User, Role, etc.). "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name: The name of the static type to be used as key to access the metadata functions. staticBasicInfoCreatorForArray - The function that returns an array of StaticTypeBasicNavigationInfo - each position contains properties for each instance. staticBasicInfoCreator - The function that returns the StaticTypeBasicInfoProperties. name: The name of the static type to be used as key to access the metadata functions. staticBasicInfoCreatorForArray - The function that returns an array of StaticTypeBasicNavigationInfo - each position contains properties for each instance. staticBasicInfoCreator - The function that returns the StaticTypeBasicInfoProperties. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "staticTypes"
              },
              {
                "topic": "Properties#",
                "code": "namestaticBasicInfoCreatorForArraystaticBasicInfoCreator"
              },
              {
                "topic": "Examples#",
                "code": "staticBasicInfoCreator/**\n * Static Types\n */\npublic override get staticTypes(): StaticType[] {\n    return [\n        {\n            name: 'IcfCookieStatic',\n            staticBasicInfoCreator: async (icfCookieStatic: Cmf.Custom.IcfCookieStatic) => {\n                const staticTypeBasicInfoProperties: StaticTypeBasicInfoProperties = {\n                    bodyProperties: new Array<StaticTypeBasicInfoProperty>(),\n                    headerProperties: new Array<StaticTypeBasicInfoProperty>()\n                };\n\n                ...\n\n                return staticTypeBasicInfoProperties;\n            }\n        }\n    ];\n}staticBasicInfoCreatorForArray/**\n * Static Types\n */\npublic override get staticTypes(): StaticType[] {\n    return [\n        {\n            name: 'IcfCookieStatic',\n            staticBasicInfoCreatorForArray: async (icfCookieStatic: Cmf.Custom.IcfCookieStatic[]) => {\n\n                ...\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Static Types#",
                "links": [
                  {
                    "description": "Static Types# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#static-types"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "Tables",
            "definition": [
              {
                "topic": "Tables#",
                "definition": "# This section describes the concept of tables in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The tables getter is responsible for defining the tables that will become available in the application when installing the library. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: name - The name of the table. resolutionEntityType - Resolution EntityType string for the ContextResolution GenericTable. label - Table's Caption. iconClass - Icon class to represent the table. title - Title to represent the table. hidden - If context table is hidden from entity page. hiddenFromContextMatrix - If context table is hidden from context matrix. type - Metadata Table Type. If the ContextResolution value is set, the SmartTable name to be loaded, is retrieved from the ContextResolution GenericTable. order - Order of the table on the Entity Context Tables View. columns - Columns Settings collection. settings - Table Display Settings for Add/Edit/Remove wizards. instanceColumn - Column to be used as Entity Instance filter. If set to null, the Entity Instance isn't used to filter table's data. If not set, the column used is the Entity Type's name. prepareTableDataInput - The function to prepare the input for the table data. handleTableDataOutput - The function to handle the output of the table data. prepareTableDataInputForResolve - The function to prepare the input for the table data for resolve. handleTableDataOutputForResolve - The function to handle the output of the table data resolved. additionalFilters - Additional Filters to be injected on the ServiceRequest to return the Table Data. It provides the Entity instance and current FilterCollection where the additional filters should be added. It should then return the FilterCollection to be used. canExecute - The function to determine if the table is shown or not. readOnly - The flag to determine if the Add, Edit or Remove buttons should appear for this table. name - The name of the table. resolutionEntityType - Resolution EntityType string for the ContextResolution GenericTable. label - Table's Caption. iconClass - Icon class to represent the table. title - Title to represent the table. hidden - If context table is hidden from entity page. hiddenFromContextMatrix - If context table is hidden from context matrix. type - Metadata Table Type. If the ContextResolution value is set, the SmartTable name to be loaded, is retrieved from the ContextResolution GenericTable. order - Order of the table on the Entity Context Tables View. columns - Columns Settings collection. settings - Table Display Settings for Add/Edit/Remove wizards. instanceColumn - Column to be used as Entity Instance filter. If set to null, the Entity Instance isn't used to filter table's data. If not set, the column used is the Entity Type's name. prepareTableDataInput - The function to prepare the input for the table data. handleTableDataOutput - The function to handle the output of the table data. prepareTableDataInputForResolve - The function to prepare the input for the table data for resolve. handleTableDataOutputForResolve - The function to handle the output of the table data resolved. additionalFilters - Additional Filters to be injected on the ServiceRequest to return the Table Data. It provides the Entity instance and current FilterCollection where the additional filters should be added. It should then return the FilterCollection to be used. canExecute - The function to determine if the table is shown or not. readOnly - The flag to determine if the Add, Edit or Remove buttons should appear for this table. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "tables"
              },
              {
                "topic": "Properties#",
                "code": "nameresolutionEntityTypelabeliconClasstitlehiddenhiddenFromContextMatrixtypeordercolumnssettingsinstanceColumnprepareTableDataInputhandleTableDataOutputprepareTableDataInputForResolvehandleTableDataOutputForResolveadditionalFilterscanExecutereadOnly"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * Tables\n */\npublic override get tables(): Table[] {\n    return [{\n        name: 'IcfCookieContext',\n        type: MetadataTableType.SmartTable,\n        columns: [\n            {\n                name: 'IcfCookie',\n                label: $localize`:@@icf-cookies-custom/main#labels.EXAMPLE:Example`,\n                referenceTypeName: 'Cmf.Custom.IcfCookie',\n                valueReferenceType: Cmf.Custom.Common.ReferenceType.Example,\n                valueType: SimpleType.ReferenceType,\n                onValueChange: async (_, properties) => {\n\n                    ...\n\n                    return Promise.resolve({\n                        Example: properties['Example']\n                    });\n                },\n            },\n        ]\n    }];\n}prepareTableDataInputhandleTableDataOutput/**\n * Tables\n */\npublic override get tables(): Table[] {\n    return [\n        {\n            name: 'IcfCookieContext',\n            type: MetadataTableType.SmartTable,\n            columns: [\n                {\n                    name: 'IcfCookieName',\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.columns.ICF_COOKIE_NAME:IcfCookie Name`,\n                    hidden: true\n                },\n                {\n                    name: 'IcfCookieColumn',\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.columns.ICF_COOKIE_COLUMN:Column Name`\n                }\n            ],\n            prepareTableDataInput: (\n                instance: Cmf.Example.BusinessObjects.IcfCookie,\n                filters: Cmf.Foundation.BusinessObjects.QueryObject.FilterCollection\n            ) => {\n                return Object.assign(\n                    new Cmf.Example.BusinessOrchestration.IcfCookieManagement.InputObjects.LoadIcfCookieContextTableInput(),\n                    {\n                        example: instance,\n                        Filters: filters\n                    }\n                );\n            },\n            handleTableDataOutput:\n                (output: Cmf.Example.BusinessOrchestration.IcfCookieManagement.OutputObjects\n                    .LoadIcfCookieContextTableOutput) => {\n                    return output.IcfCookie.ContextTable.Data;\n                },\n            instanceColumn: 'IcfCookieName'\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "Tables#",
                "links": [
                  {
                    "description": "Tables# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#tables"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/",
            "flag": true,
            "submodulos": []
          },
          {
            "topic": "User Menus",
            "definition": [
              {
                "topic": "User Menus#",
                "definition": "# This section describes the concept of user menus in the context of the Critical Manufacturing User Interface. "
              },
              {
                "topic": "Definition#",
                "definition": "# The userMenus getter is responsible for defining the user menus warnings and custom actions. "
              },
              {
                "topic": "Properties#",
                "definition": "# It contains the following properties: id - The id of the user menu. getUserMenuWarnings - The function that returns the user menu warnings. getCustomItems - The function that returns the user menu custom actions. id - The id of the user menu. getUserMenuWarnings - The function that returns the user menu warnings. getCustomItems - The function that returns the user menu custom actions. "
              },
              {
                "topic": "Examples#",
                "definition": "# "
              }
            ],
            "code": [
              {
                "topic": "Definition#",
                "code": "userMenus"
              },
              {
                "topic": "Properties#",
                "code": "idgetUserMenuWarningsgetCustomItems"
              },
              {
                "topic": "Examples#",
                "code": "/**\n * User Menus\n */\npublic override get userMenus(): UserMenu[] {\n    return [\n        {\n            id: 'icf-cookies-custom-user-menu',\n            getUserMenuWarning: (): CustomUserMenuToggleWarning => {\n                ...\n            },\n            getCustomItems: (): Array<CustomUserMenuItem> => {\n                const items = [];\n\n                ...\n\n                return items;\n            }\n        }\n    ];\n}"
              }
            ],
            "links": [
              {
                "topic": "User Menus#",
                "links": [
                  {
                    "description": "User Menus# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#user-menus"
                  }
                ]
              },
              {
                "topic": "Definition#",
                "links": [
                  {
                    "description": "Definition# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#definition"
                  }
                ]
              },
              {
                "topic": "Properties#",
                "links": [
                  {
                    "description": "Properties# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#properties"
                  }
                ]
              },
              {
                "topic": "Examples#",
                "links": [
                  {
                    "description": "Examples# (1)",
                    "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#examples"
                  }
                ]
              }
            ],
            "href": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/",
            "flag": true,
            "submodulos": []
          }
        ]
      },
      {
        "topic": "Action Bars",
        "definition": [
          {
            "topic": "Action Bars#",
            "definition": "# This section describes the concept of action bars in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The actionBars getter keeps track of which actions need to be added or withdrawn from an action bar. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The action bar's ID. elementsToAdd - The actions that need to be added to the action bar. elementsToRemove - The actions that need to be removed from the action bar. id - The action bar's ID. elementsToAdd - The actions that need to be added to the action bar. elementsToRemove - The actions that need to be removed from the action bar. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "actionBars"
          },
          {
            "topic": "Properties#",
            "code": "idelementsToAddelementsToRemove"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionBarId',\n            elementsToAdd: [\n                {\n                    id: 'Icf.Cookies.Custom.ActionButton',\n                    type: ActionBarElementType.ACTION_BUTTON\n                },\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonGroup',\n                    type: ActionBarElementType.ACTION_BUTTON_GROUP,\n                    actionButtonGroupButtons: [\n                        { id: 'Icf.Cookies.Custom.InjectedButton', requiredFunctionality: 'IcfCookie.RequiredFunctionality' }\n                    ]\n                }\n            ],\n            elementsToRemove: [\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonRemove',\n                    type: ActionBarElementType.ACTION_BUTTON\n                },\n                {\n                    id: 'Icf.Cookies.Custom.ActionButtonGroupRemove',\n                    type: ActionBarElementType.ACTION_BUTTON_GROUP\n                }\n            ]\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Action Bars#",
            "links": [
              {
                "description": "Action Bars# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#action-bars"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_bars/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Action Button Groups",
        "definition": [
          {
            "topic": "Action Button Groups#",
            "definition": "# This section describes the concept of action button groups in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The actionButtonGroups getter defines the action button groups that the library contains. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The action button group's ID. title - The title of the action button group. alternative - The alternative text of the action button group. iconClass - The icon class of the action button group. style - The style of the action button group. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button group is less relevant. id - The action button group's ID. title - The title of the action button group. alternative - The alternative text of the action button group. iconClass - The icon class of the action button group. style - The style of the action button group. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button group is less relevant. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "actionButtonGroups"
          },
          {
            "topic": "Properties#",
            "code": "idtitlealternativeiconClassstyleonInitlessRelevant"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Action Button Groups\n */\npublic override get actionButtonGroups(): ActionButtonGroup[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Group',\n            title: $localize`:@@icf-cookies-custom/main#ADD:Add`,\n            alternative: $localize`:@@icf-custom-cookies/main#ALTERNATIVE:Alternative`,\n            iconClass: 'icon-core-st-sm-add',\n            onInit: async (actionComponent?: ActionComponent, actionButtonMetadata?: BaseActionButton) => {\n                return;\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Action Button Groups#",
            "links": [
              {
                "description": "Action Button Groups# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#action-button-groups"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_button_groups/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Action Buttons",
        "definition": [
          {
            "topic": "Action Buttons#",
            "definition": "# This section describes the concept of action buttons in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The Action Button consists of all the information necessary to display a button on the action bar of a page. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The action button's ID. title - The title of the action button. alternative - The alternative text of the action button. iconClass - The icon class of the action button. style - The style of the action button. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button is less relevant. actionId - The action ID of the action button. Can be a string or a function that returns an Action. onBuildContext - The function to be called right before the action component is rendered to build the context. id - The action button's ID. title - The title of the action button. alternative - The alternative text of the action button. iconClass - The icon class of the action button. style - The style of the action button. onInit - The function to be called right before the action component is rendered. lessRelevant - Indicates if the action button is less relevant. actionId - The action ID of the action button. Can be a string or a function that returns an Action. onBuildContext - The function to be called right before the action component is rendered to build the context. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "Action Button"
          },
          {
            "topic": "Properties#",
            "code": "idtitlealternativeiconClassstyleonInitlessRelevantactionIdonBuildContext"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Create',\n            title: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            alternative: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            iconClass: 'icon-core-st-lg-new',\n            actionId: 'Action.Create',\n            onBuildContext: async (context: any): Promise<any> => {\n                context.editMode = 1;\n                return context;\n            }\n        }\n    ];\n}/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Icf.Cookies.Custom.ActionButton.Create',\n            title: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            alternative: $localize`:@@icf-cookies-custom/main#actions.CREATE:Create`,\n            actionId: this.resolveExampleAction('Create'),\n            iconClass: 'icon-core-st-lg-new'\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Action Buttons#",
            "links": [
              {
                "description": "Action Buttons# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#action-buttons"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_buttons/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Action Groups",
        "definition": [
          {
            "topic": "Action Groups#",
            "definition": "# This section describes the concept of action groups in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The Action Group consists of all the information necessary to display a group of buttons on the action bar of a page. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The action group's ID. label - The label of the action group. actionGroupButtons - The action buttons of the action group. id - The action group's ID. label - The label of the action group. actionGroupButtons - The action buttons of the action group. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "Action Group"
          },
          {
            "topic": "Properties#",
            "code": "idlabelactionGroupButtons"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Action Groups\n */\npublic override get actionGroups(): ActionGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-action-group',\n            label: $localize`:@@icf-cookies-custom/main#ACTION_GROUP:Action Group`,\n            actionGroupButtons: [\n                {\n                    id: 'icf-cookies-custom-example-action-button',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Action Groups#",
            "links": [
              {
                "description": "Action Groups# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#action-groups"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/action_groups/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Actions",
        "definition": [
          {
            "topic": "Actions#",
            "definition": "# This section describes the concept of actions in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The actions getter defines the actions that the library contains. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The action's ID. route - The route to navigate to when the action is executed. loadComponent - The function that loads the component that will be displayed when the action is executed. handler - The function that will be executed when the action is called. canExecute - The function that determines whether the action can be executed. context - Additional context for the action. inputs - The inputs that will be passed to the component when it is loaded. outputs - Outputs that are triggered at the end of the action. mode - The mode of the action defined using the ActionMode enum. id - The action's ID. route - The route to navigate to when the action is executed. loadComponent - The function that loads the component that will be displayed when the action is executed. handler - The function that will be executed when the action is called. canExecute - The function that determines whether the action can be executed. context - Additional context for the action. inputs - The inputs that will be passed to the component when it is loaded. outputs - Outputs that are triggered at the end of the action. mode - The mode of the action defined using the ActionMode enum. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "actions"
          },
          {
            "topic": "Properties#",
            "code": "idrouteloadComponenthandlercanExecutecontextinputsoutputsmodeActionMode"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'icf-cookies-custom-example-action',\n            route: 'Entity/IcfCookieCustom/:id',\n            canExecute: this.canExecuteExampleAction.bind(this),\n            context: {\n                example: 'example'\n            },\n            mode: ActionMode.NewPage\n        }\n    ];\n}/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'IcfCookie.Perform',\n            loadComponent: () => import(\n                /* webpackExports: \"WizardPerformIcfCookieInstance\" */\n                'icf-cookies-custom').then(m => m.WizardPerformIcfCookieInstance),\n            canExecute: this.canExecutePerformIcfCookieInstanceAction.bind(this),\n            context: {\n                requiredFunctionalities: 'IcfCookieInstance.Perform',\n                title: $localize`:@@icf-cookies-custom/main#actions.ICF_COOKIE_INSTANCE_PERFORM:Perform`,\n                iconClass: 'icon-core-st-lg-execute'\n            },\n            mode: ActionMode.ModalPage,\n            inputs: {\n                instance: {\n                    type: SimpleType.ReferenceType,\n                    referenceType: Cmf.Foundation.Common.ReferenceType.EntityType,\n                    referenceTypeName: 'IcfCookieInstance'\n                } as ComplexType\n            },\n            outputs: {\n                instanceOutput: {\n                    type: SimpleType.String,\n                    collectionType: CollectionType.Array\n                } as ComplexType\n            }\n        }\n    ];\n}/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'IcfCookie.Action',\n            handler: async (context: any): Promise<ActionData> => {\n\n                const link = this.navigation.getLink(\n                    context.instance,\n                    ReferenceType.Example,\n                    LinkType.Internal\n                );\n\n                return {\n                    route: link,\n                    context: context\n                };\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Actions#",
            "links": [
              {
                "description": "Actions# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#actions"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/actions/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Credits",
        "definition": [
          {
            "topic": "Credits#",
            "definition": "# This section describes the concept of credits in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The Credits getter defines the list of individuals or organizations responsible for the creation or production of a project that is being used in the library. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name - The name of the individual or organization. nameLink - The URL of the individual or organization. license - The license of the project. licenseLink - The URL of the license. name - The name of the individual or organization. nameLink - The URL of the individual or organization. license - The license of the project. licenseLink - The URL of the license. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "Credits"
          },
          {
            "topic": "Properties#",
            "code": "namenameLinklicenselicenseLink"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Credits\n */\npublic override get credits(): Credit[] {\n    return [\n        {\n            name: 'Example',\n            nameLink: 'https://example.com',\n            license: 'MIT',\n            licenseLink: 'https://example.com/license'\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Credits#",
            "links": [
              {
                "description": "Credits# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#credits"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/credits/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Entity Types",
        "definition": [
          {
            "topic": "Entity Types#",
            "definition": "# This section describes the concept of entity types in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The entityTypes getter is responsible for defining the list of entity types used in the library. It enables the control of specific behaviors of entity type pages, such as the views displayed. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name - The name of the entity type. defaultView - The default view that is used in the entity type. views - The list of views that are used in the entity type. contextTables - The list of tables that are used in the context of the entity type. entityTileCreator - The function that returns the information of the entity type to fill a tile. entityBasicInfoCreator - The function that returns the information of the entity type to fill the basic information section. name - The name of the entity type. defaultView - The default view that is used in the entity type. views - The list of views that are used in the entity type. contextTables - The list of tables that are used in the context of the entity type. entityTileCreator - The function that returns the information of the entity type to fill a tile. entityBasicInfoCreator - The function that returns the information of the entity type to fill the basic information section. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "entityTypes"
          },
          {
            "topic": "Properties#",
            "code": "namedefaultViewviewscontextTablesentityTileCreatorentityBasicInfoCreator"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ]\n        }\n    ];\n}contextTables/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ],\n            contextTables: [\n                {\n                    name: 'IcfCookieContextTable',\n                    type: MetadataTableType.GenericTable,\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.EXAMPLE:Example Context Table`,\n                    prepareTableDataInput: (\n                        instance: Cmf.Example.BusinessObjects.IcfCookie,\n                        filters: Cmf.Foundation.BusinessObjects.QueryObject.FilterCollection\n                    ) => {\n                        return Object.assign(\n                            new Cmf.Example.BusinessOrchestration.IcfCookieManagement.InputObjects.LoadIcfCookieContextTableInput(),\n                            {\n                                example: instance,\n                                Filters: filters\n                            }\n                        );\n                    },\n                    handleTableDataOutput:\n                        (output: Cmf.Example.BusinessOrchestration.IcfCookieManagement.OutputObjects\n                            .LoadIcfCookieContextTableOutput) => {\n                            return output.IcfCookie.ContextTable.Data;\n                        },\n                    instanceColumn: 'IcfCookieName',\n                    columns: [\n                        {\n                            name: 'IcfCookieName',\n                            label: $localize`:@@icf-cookies-custom/main#contextTables.columns.EXAMPLE_ET_NAME:IcfCookie Name`,\n                            hidden: true\n                        },\n                        {\n                            name: 'IcfCookieColumn',\n                            label: $localize`:@@icf-cookies-custom/main#contextTables.columns.EXAMPLE_ET_COLUMN:Column Name`\n                        }\n                    ]\n                },\n                ...\n            ]\n        }\n    ];\n}entityTileCreator/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            entityTileCreator: async (example: Cmf.Example.BusinessObjects.IcfCookie): Promise<EntityTypeTileInfo> => {\n\n                ...\n\n                return {\n                    description: example.Type,\n                    badges: [\n                        {\n                            title: $localize`:@@icf-cookies-custom/main#INSTANCES:Instances`,\n                            icon: 'icon-example',\n                            value: example.InstancesCount\n                        }\n                    ],\n                    ...\n                };\n            }\n        }\n    ];\n}entityBasicInfoCreator/**\n * Entity Types\n */\npublic override get entityTypes(): EntityTypeMetadata[] {\n    return [\n        {\n            name: 'IcfCookie',\n            defaultView: DEFAULT_DETAILS_VIEW_ID,\n            views: [\n                {\n                    id: DEFAULT_DETAILS_VIEW_ID,\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieDetailsViewRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieDetailsViewRoutingModule),\n                }\n            ],\n            entityBasicInfoCreator: async (example: Cmf.Example.BusinessObjects.IcfCookie): Promise<EntityTypeBasicInfoProperties> => {\n\n                const entityTypeBasicInfoProperties: EntityTypeBasicInfoProperties = {\n                    bodyProperties: new Array<EntityTypeBasicInfoProperty>(),\n                    headerProperties: new Array<EntityTypeBasicInfoProperty>()\n                };\n\n                ...\n\n                return entityTypeBasicInfoProperties;\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Entity Types#",
            "links": [
              {
                "description": "Entity Types# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#entity-types"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/entity_types/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "File Viewers",
        "definition": [
          {
            "topic": "File Viewers#",
            "definition": "# This section describes the concept of file viewers in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The fileViewers getter is responsible for defining custom file viewers to be used on InBrowserViewer component. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name - The name of the file viewer. fileMimeTypes - The list of file mime types that the file viewer can handle. contentTypes - The list of content types that the file viewer can handle. componentFileInput - The name of the file input component. componentFileInputContentType - The content type of the file input component. Defined by the FileViewerComponentFileInputContentType enum, it can be Blob, Url, or EntityDocumentation. loadComponent - The function that loads the file viewer component. takeScreenshotAction - The action that takes a screenshot of the file viewer. name - The name of the file viewer. fileMimeTypes - The list of file mime types that the file viewer can handle. contentTypes - The list of content types that the file viewer can handle. componentFileInput - The name of the file input component. componentFileInputContentType - The content type of the file input component. Defined by the FileViewerComponentFileInputContentType enum, it can be Blob, Url, or EntityDocumentation. loadComponent - The function that loads the file viewer component. takeScreenshotAction - The action that takes a screenshot of the file viewer. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "fileViewers"
          },
          {
            "topic": "Properties#",
            "code": "namefileMimeTypescontentTypescomponentFileInputcomponentFileInputContentTypeFileViewerComponentFileInputContentTypeloadComponenttakeScreenshotAction"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * File Viewers\n */\npublic override get fileViewers(): FileViewerMetadata[] {\n    return [\n        {\n            name: 'Example File Viewer',\n            fileMimeTypes: ['application/zip'],\n            contentTypes: ['Example'],\n            componentFileInput: 'exampleFile',\n            componentFileInputContentType: 2, // EntityDocumentation\n            loadComponent: () => import(\n                /* webpackExports: \"ExampleViewer\" */\n                'icf-cookies-custom').then(m => m.ExampleViewer),\n            takeScreenshotAction: 'Icf.Cookies.Custom.TakeScreenshot'\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "File Viewers#",
            "links": [
              {
                "description": "File Viewers# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#file-viewers"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/file_viewers/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Flex Components",
        "definition": [
          {
            "topic": "Flex Components#",
            "definition": "# This section describes the concept of flex components in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The flexComponents getter is responsible for allowing to add or remove components from the user interface, either framework components or other customized ones. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The component selector. context - A context for the injection. If defined, will only apply if the context selector is an ancestor of the component. subComponentsToAdd - A list of components to add to the main component. subComponentsToRemove - A list of components to remove from the main component. id - The component selector. context - A context for the injection. If defined, will only apply if the context selector is an ancestor of the component. subComponentsToAdd - A list of components to add to the main component. subComponentsToRemove - A list of components to remove from the main component. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "flexComponents"
          },
          {
            "topic": "Properties#",
            "code": "idcontextsubComponentsToAddsubComponentsToRemove"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Flex Components\n */\npublic override get flexComponents(): FlexComponent[] {\n    return [\n        {\n            id: 'icf-cookies-custom-wizard',\n            context: 'icf-cookies-custom-custom-wizard',\n            subComponentsToAdd: [{\n                target: {\n                    anchor: 'icf-cookies-custom-wizard-step',\n                    index: 1,\n                    location: FlexComponentLocation.NextTo\n                },\n                components: [\n                    {\n                        component: () => import(\n                            /* webpackExports: \"InjectedStep\" */\n                            'icf-cookies-custom').then(m => m.InjectedStep),\n                        subComponent: 'icf-cookies-custom-wizard-step'\n                    }\n                ]\n            }],\n            subComponentsToRemove: [{\n                target: {\n                    element: 'icf-cookies-custom-component[id=1]',\n                    anchor: 'example'\n                }\n            }]\n        },\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Flex Components#",
            "links": [
              {
                "description": "Flex Components# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#flex-components"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/flex_components/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Menu Groups",
        "definition": [
          {
            "topic": "Menu Groups#",
            "definition": "# This section describes the concept of menu groups in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# A menu group is a collection of menu items that are displayed in a menu. Menu groups are used to group menu items together and to provide a visual separation between groups of menu items. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the menu group. title - The title of the menu group. anchor - The anchor of the menu group. requiredFunctionalities - The required functionalities of the menu group. iconClass - The icon of the menu group. position - The position of the menu group. itemsGenerator - The function that generates the menu items of the menu group. route - The route to navigate when clicking on a menu group. id - The id of the menu group. title - The title of the menu group. anchor - The anchor of the menu group. requiredFunctionalities - The required functionalities of the menu group. iconClass - The icon of the menu group. position - The position of the menu group. itemsGenerator - The function that generates the menu items of the menu group. route - The route to navigate when clicking on a menu group. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Properties#",
            "code": "idtitleanchorrequiredFunctionalitiesiconClasspositionitemsGeneratorroute"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Menu groups\n */\npublic override get menuGroups(): MenuGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-menu-group',\n            anchor: MenuGroupAnchor.Top,\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            iconClass: 'icon-core-st-lg-example',\n            route: 'Examples',\n            position: 1\n        }\n    ];\n}itemsGenerator/**\n * Menu groups\n */\npublic override get menuGroups(): MenuGroup[] {\n    return [\n        {\n            id: 'icf-cookies-custom-menu-group',\n            anchor: MenuGroupAnchor.Top,\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            iconClass: 'icon-core-st-lg-example',\n            route: 'Examples',\n            position: 1,\n            itemsGenerator: {\n                items: (): Promise<PanelBarItem[]> => {\n                    ...\n                }\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Menu Groups#",
            "links": [
              {
                "description": "Menu Groups# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#menu-groups"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_groups/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Menu Items",
        "definition": [
          {
            "topic": "Menu Items#",
            "definition": "# This section describes the concept of menu items in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The menuItems getter is responsible for defining the items that will be displayed in a menu group. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the menu item. menuGroupId - The id of the menu group that the menu item belongs to. menuSubGroupId - The id of the menu sub group that the menu item belongs to. title - The menu item title. subTitle - The menu item subtitle. image - The menu item image. canShow - A function that is responsible for indicating if a menu item should be shown or hidden. requiredFunctionalities - A list of functionalities that are required for the menu item to be shown. position - The position of the menu item. actionId - The id of the action that will be executed when the menu item is clicked. iconClass - The icon of the menu item. id - The id of the menu item. menuGroupId - The id of the menu group that the menu item belongs to. menuSubGroupId - The id of the menu sub group that the menu item belongs to. title - The menu item title. subTitle - The menu item subtitle. image - The menu item image. canShow - A function that is responsible for indicating if a menu item should be shown or hidden. requiredFunctionalities - A list of functionalities that are required for the menu item to be shown. position - The position of the menu item. actionId - The id of the action that will be executed when the menu item is clicked. iconClass - The icon of the menu item. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "menuItems"
          },
          {
            "topic": "Properties#",
            "code": "idmenuGroupIdmenuSubGroupIdtitlesubTitleimagecanShowrequiredFunctionalitiespositionactionIdiconClass"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Menu Items\n */\npublic override get menuItems(): MenuItem[] {\n    return [\n        {\n            id: 'IcfCookie.MenuItem',\n            actionId: 'IcfCookie.Action',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            iconClass: 'icon-core-st-lg-example',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            subTitle: $localize`:@@icf-cookies-custom/main#EXAMPLE_SUBTITLE:Example SubTitle`,\n            requiredFunctionalities: 'IcfCookie.Functionality'\n        },\n    ];\n}canShow/**\n * Menu Items\n */\npublic override get menuItems(): MenuItem[] {\n    return [\n        {\n            id: 'IcfCookie.MenuItem',\n            actionId: 'IcfCookie.Action',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            iconClass: 'icon-core-st-lg-example',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            canShow: async (): Promise<boolean> => {\n\n                ...\n\n                return true;\n            }\n        },\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Menu Items#",
            "links": [
              {
                "description": "Menu Items# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#menu-items"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_items/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Menu Sub Groups",
        "definition": [
          {
            "topic": "Menu Sub Groups#",
            "definition": "# This section describes the concept of menu sub groups in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The menuSubGroups getter is responsible for defining the sub-groups that will be displayed in a menu group. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the menu sub group. menuGroupId - The id of the menu group that the menu sub group belongs to. title - The menu sub group title. position - The position of the menu sub group. requiredFunctionalities - A list of functionalities that are required for the menu sub group to be shown. id - The id of the menu sub group. menuGroupId - The id of the menu group that the menu sub group belongs to. title - The menu sub group title. position - The position of the menu sub group. requiredFunctionalities - A list of functionalities that are required for the menu sub group to be shown. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "menuSubGroups"
          },
          {
            "topic": "Properties#",
            "code": "idmenuGroupIdtitlepositionrequiredFunctionalities"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Menu Sub Groups\n */\npublic override get menuSubGroups(): MenuSubGroup[] {\n    return [\n        {\n            id: 'IcfCookie.MenuSubGroup',\n            menuGroupId: 'IcfCookie.MenuGroup',\n            title: $localize`:@@icf-cookies-custom/main#EXAMPLE:Example`,\n            requiredFunctionalities: 'IcfCookie.Functionality',\n            position: 1\n        },\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Menu Sub Groups#",
            "links": [
              {
                "description": "Menu Sub Groups# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#menu-sub-groups"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/menu_sub_groups/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Package Info",
        "definition": [
          {
            "topic": "Package Info#",
            "definition": "# This section describes the concept of package info in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The PackageInfo class defines the information about the library. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name - The name of the library. loader - The function to load the library. converters - The converters that the library contains. widgets - The widgets that the library contains. dataSources - The data sources that the library contains. components - The components that the library contains. name - The name of the library. loader - The function to load the library. converters - The converters that the library contains. widgets - The widgets that the library contains. dataSources - The data sources that the library contains. components - The components that the library contains. "
          },
          {
            "topic": "Examples#",
            "definition": "#  "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "PackageInfo"
          },
          {
            "topic": "Properties#",
            "code": "nameloaderconverterswidgetsdataSourcescomponents"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Package Info\n */\npublic override get packageInfo(): PackageInfo {\n    return {\n        name: 'icf-cookies-custom',\n        loader: () => import(\n            /* webpackExports: [] */\n            'icf-cookies-custom'),\n        converters: [],\n        widgets: [],\n        dataSources: [],\n        components: []\n    };\n}"
          }
        ],
        "links": [
          {
            "topic": "Package Info#",
            "links": [
              {
                "description": "Package Info# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#package-info"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/package_info/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Routes",
        "definition": [
          {
            "topic": "Routes#",
            "definition": "# This section describes the concept of routes in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The routes getter is responsible for defining the routes that will be displayed in the application. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the parent route where the route will be attached to. routes - The list of routes. id - The id of the parent route where the route will be attached to. routes - The list of routes. In the routes array, besides the properties in Route ⧉, the following properties are also available: Route ⧉ routeId - The id of the route. children - The list of child routes. data - Additional developer-defined data provided to the component via ActivatedRoute. By default, no additional data is passed. routeId - The id of the route. children - The list of child routes. data - Additional developer-defined data provided to the component via ActivatedRoute. By default, no additional data is passed. See ActivatedRoute ⧉ for more information about the properties of the activated route. See Route ⧉ for more information about the properties of the route. See ActivatedRoute ⧉ for more information about the properties of the activated route. ActivatedRoute ⧉ See Route ⧉ for more information about the properties of the route. Route ⧉ "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "routes"
          },
          {
            "topic": "Properties#",
            "code": "idroutesrouteIdchildrendataActivatedRoute"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            id: KnownRoutes.Page,\n            routes: [\n                {\n                    path: 'Entity/IcfCookie/:id',\n                    loadChildren:\n                        () => import(\n                            /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                            'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n                    data: {\n                        title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                        iconClass: 'icon-core-st-lg-example',\n                        requiredFunctionalities: 'IcfCookie.Functionality'\n                    }\n                }\n            ]\n        }\n    ];\n}/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            id: KnownRoutes.Page,\n            routes: [\n                {\n                    path: 'IcfCookie',\n                    loadChildren: () => import(\n                        /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                        'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n                    data: {\n                        title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                        iconClass: 'icon-core-st-lg-example',\n                        fixedTab: true,\n                        fixedTabLocation: 'right',\n                        fixedTabOrder: 1\n                    }\n                }\n            ]\n        }\n    ];\n}buildContextcanExecute/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            path: 'IcfCookie',\n            loadChildren: () => import(\n                /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n            data: {\n                title: $localize`:@@icf-cookies-custom/main#ICF_COOKIE:Icf Cookie`,\n                iconClass: 'icon-core-st-lg-example',\n                buildContext: async (instruction: ActivatedRouteSnapshot): Promise<any> => {\n                    const context: any = {};\n\n                    ...\n\n                    return context;\n                },\n                canExecute: async (context: any, messages: string[]): Promise<boolean> => {\n\n                    ...\n\n                    return true;\n                }\n                requiredFunctionalities: 'IcfCookie.Functionality'\n            }\n        }\n    ];\n}buildRouteToRedirect/**\n * Routes\n */\npublic override get routes(): RouteConfig[] {\n    return [\n        {\n            path: 'Entity/IcfCookie/:id',\n            loadChildren: () => import(\n                /* webpackExports: \"PageIcfCookieRoutingModule\" */\n                'icf-cookies-custom').then(m => m.PageIcfCookieRoutingModule),\n            data: {\n                requiredFunctionalities: 'IcfCookie.Functionality',\n                buildRouteToRedirect: async (urlSegments: string[], params: any, queryParams: any): Promise<string> => {\n\n                    ...\n\n                    return `Entity/IcfCookie/${params.id}/PageToRedirect`;\n                }\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Routes#",
            "links": [
              {
                "description": "Routes# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#routes"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#properties"
              },
              {
                "description": "Properties# (2)",
                "link": "https://angular.io/api/router/Route"
              },
              {
                "description": "Properties# (3)",
                "link": "https://angular.io/api/router/ActivatedRoute"
              },
              {
                "description": "Properties# (4)",
                "link": "https://angular.io/api/router/Route"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Side Bar Tabs",
        "definition": [
          {
            "topic": "Side Bar Tabs#",
            "definition": "# This section describes the concept of side bar tabs in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The sideBarTabs getter is responsible for defining the side bar tabs that will be displayed in the application. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the side bar tab. name - The name of the side bar tab. iconClass - The icon class of the side bar tab. loadComponent - The function that loads the component that will be displayed when the side bar tab is displayed. onInit - The function that will be executed when the side bar tab is initialized. requiredFunctionalities - The functionalities that are required for the side bar tab to be displayed. position - The position of the side bar tab. isVisible - The function that determines whether the side bar tab is visible. id - The id of the side bar tab. name - The name of the side bar tab. iconClass - The icon class of the side bar tab. loadComponent - The function that loads the component that will be displayed when the side bar tab is displayed. onInit - The function that will be executed when the side bar tab is initialized. requiredFunctionalities - The functionalities that are required for the side bar tab to be displayed. position - The position of the side bar tab. isVisible - The function that determines whether the side bar tab is visible. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "sideBarTabs"
          },
          {
            "topic": "Properties#",
            "code": "idnameiconClassloadComponentonInitrequiredFunctionalitiespositionisVisible"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Side bar tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n        }\n    ];\n}onInit/**\n * Side bar tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n            onInit: (context: any, updateNotificationNumber: SetSideBarTabNumberIndicator) => {\n                ...\n            },\n        }\n    ];\n}isVisible/**\n * Side Bar Tabs\n */\npublic override get sideBarTabs(): SideBarTab[] {\n    return [\n        {\n            id: 'icf-cookies-custom-side-bar-tab',\n            name: $localize`:@@icf-cookies-custom/main#sidebar.EXAMPLE_SIDE_BAR_TAB:Example Side Bar Tab`,\n            iconClass: 'icon-core-st-lg-example',\n            loadComponent: () => import(\n                /* webpackExports: \"IcfCookiesCustomSideBarTab\" */\n                'icf-cookies-custom').then(m => m.IcfCookiesCustomSideBarTab),\n            requiredFunctionalities: 'IcfCookiesCustom.Functionality',\n            position: 1\n            isVisible: async (): Promise<boolean> => {\n\n                ...\n\n                return true;\n            }\n        },\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Side Bar Tabs#",
            "links": [
              {
                "description": "Side Bar Tabs# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#side-bar-tabs"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/side_bar_tabs/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Static Types",
        "definition": [
          {
            "topic": "Static Types#",
            "definition": "# This section describes the concept of static types in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The staticTypes getter is responsible for defining the static types that will be used in the application. An Static Type consists of a string key (Static Type name: LookupTable, User, Role, etc.). "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name: The name of the static type to be used as key to access the metadata functions. staticBasicInfoCreatorForArray - The function that returns an array of StaticTypeBasicNavigationInfo - each position contains properties for each instance. staticBasicInfoCreator - The function that returns the StaticTypeBasicInfoProperties. name: The name of the static type to be used as key to access the metadata functions. staticBasicInfoCreatorForArray - The function that returns an array of StaticTypeBasicNavigationInfo - each position contains properties for each instance. staticBasicInfoCreator - The function that returns the StaticTypeBasicInfoProperties. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "staticTypes"
          },
          {
            "topic": "Properties#",
            "code": "namestaticBasicInfoCreatorForArraystaticBasicInfoCreator"
          },
          {
            "topic": "Examples#",
            "code": "staticBasicInfoCreator/**\n * Static Types\n */\npublic override get staticTypes(): StaticType[] {\n    return [\n        {\n            name: 'IcfCookieStatic',\n            staticBasicInfoCreator: async (icfCookieStatic: Cmf.Custom.IcfCookieStatic) => {\n                const staticTypeBasicInfoProperties: StaticTypeBasicInfoProperties = {\n                    bodyProperties: new Array<StaticTypeBasicInfoProperty>(),\n                    headerProperties: new Array<StaticTypeBasicInfoProperty>()\n                };\n\n                ...\n\n                return staticTypeBasicInfoProperties;\n            }\n        }\n    ];\n}staticBasicInfoCreatorForArray/**\n * Static Types\n */\npublic override get staticTypes(): StaticType[] {\n    return [\n        {\n            name: 'IcfCookieStatic',\n            staticBasicInfoCreatorForArray: async (icfCookieStatic: Cmf.Custom.IcfCookieStatic[]) => {\n\n                ...\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Static Types#",
            "links": [
              {
                "description": "Static Types# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#static-types"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/static_types/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Tables",
        "definition": [
          {
            "topic": "Tables#",
            "definition": "# This section describes the concept of tables in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The tables getter is responsible for defining the tables that will become available in the application when installing the library. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: name - The name of the table. resolutionEntityType - Resolution EntityType string for the ContextResolution GenericTable. label - Table's Caption. iconClass - Icon class to represent the table. title - Title to represent the table. hidden - If context table is hidden from entity page. hiddenFromContextMatrix - If context table is hidden from context matrix. type - Metadata Table Type. If the ContextResolution value is set, the SmartTable name to be loaded, is retrieved from the ContextResolution GenericTable. order - Order of the table on the Entity Context Tables View. columns - Columns Settings collection. settings - Table Display Settings for Add/Edit/Remove wizards. instanceColumn - Column to be used as Entity Instance filter. If set to null, the Entity Instance isn't used to filter table's data. If not set, the column used is the Entity Type's name. prepareTableDataInput - The function to prepare the input for the table data. handleTableDataOutput - The function to handle the output of the table data. prepareTableDataInputForResolve - The function to prepare the input for the table data for resolve. handleTableDataOutputForResolve - The function to handle the output of the table data resolved. additionalFilters - Additional Filters to be injected on the ServiceRequest to return the Table Data. It provides the Entity instance and current FilterCollection where the additional filters should be added. It should then return the FilterCollection to be used. canExecute - The function to determine if the table is shown or not. readOnly - The flag to determine if the Add, Edit or Remove buttons should appear for this table. name - The name of the table. resolutionEntityType - Resolution EntityType string for the ContextResolution GenericTable. label - Table's Caption. iconClass - Icon class to represent the table. title - Title to represent the table. hidden - If context table is hidden from entity page. hiddenFromContextMatrix - If context table is hidden from context matrix. type - Metadata Table Type. If the ContextResolution value is set, the SmartTable name to be loaded, is retrieved from the ContextResolution GenericTable. order - Order of the table on the Entity Context Tables View. columns - Columns Settings collection. settings - Table Display Settings for Add/Edit/Remove wizards. instanceColumn - Column to be used as Entity Instance filter. If set to null, the Entity Instance isn't used to filter table's data. If not set, the column used is the Entity Type's name. prepareTableDataInput - The function to prepare the input for the table data. handleTableDataOutput - The function to handle the output of the table data. prepareTableDataInputForResolve - The function to prepare the input for the table data for resolve. handleTableDataOutputForResolve - The function to handle the output of the table data resolved. additionalFilters - Additional Filters to be injected on the ServiceRequest to return the Table Data. It provides the Entity instance and current FilterCollection where the additional filters should be added. It should then return the FilterCollection to be used. canExecute - The function to determine if the table is shown or not. readOnly - The flag to determine if the Add, Edit or Remove buttons should appear for this table. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "tables"
          },
          {
            "topic": "Properties#",
            "code": "nameresolutionEntityTypelabeliconClasstitlehiddenhiddenFromContextMatrixtypeordercolumnssettingsinstanceColumnprepareTableDataInputhandleTableDataOutputprepareTableDataInputForResolvehandleTableDataOutputForResolveadditionalFilterscanExecutereadOnly"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * Tables\n */\npublic override get tables(): Table[] {\n    return [{\n        name: 'IcfCookieContext',\n        type: MetadataTableType.SmartTable,\n        columns: [\n            {\n                name: 'IcfCookie',\n                label: $localize`:@@icf-cookies-custom/main#labels.EXAMPLE:Example`,\n                referenceTypeName: 'Cmf.Custom.IcfCookie',\n                valueReferenceType: Cmf.Custom.Common.ReferenceType.Example,\n                valueType: SimpleType.ReferenceType,\n                onValueChange: async (_, properties) => {\n\n                    ...\n\n                    return Promise.resolve({\n                        Example: properties['Example']\n                    });\n                },\n            },\n        ]\n    }];\n}prepareTableDataInputhandleTableDataOutput/**\n * Tables\n */\npublic override get tables(): Table[] {\n    return [\n        {\n            name: 'IcfCookieContext',\n            type: MetadataTableType.SmartTable,\n            columns: [\n                {\n                    name: 'IcfCookieName',\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.columns.ICF_COOKIE_NAME:IcfCookie Name`,\n                    hidden: true\n                },\n                {\n                    name: 'IcfCookieColumn',\n                    label: $localize`:@@icf-cookies-custom/main#contextTables.columns.ICF_COOKIE_COLUMN:Column Name`\n                }\n            ],\n            prepareTableDataInput: (\n                instance: Cmf.Example.BusinessObjects.IcfCookie,\n                filters: Cmf.Foundation.BusinessObjects.QueryObject.FilterCollection\n            ) => {\n                return Object.assign(\n                    new Cmf.Example.BusinessOrchestration.IcfCookieManagement.InputObjects.LoadIcfCookieContextTableInput(),\n                    {\n                        example: instance,\n                        Filters: filters\n                    }\n                );\n            },\n            handleTableDataOutput:\n                (output: Cmf.Example.BusinessOrchestration.IcfCookieManagement.OutputObjects\n                    .LoadIcfCookieContextTableOutput) => {\n                    return output.IcfCookie.ContextTable.Data;\n                },\n            instanceColumn: 'IcfCookieName'\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Tables#",
            "links": [
              {
                "description": "Tables# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#tables"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/tables/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "User Menus",
        "definition": [
          {
            "topic": "User Menus#",
            "definition": "# This section describes the concept of user menus in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "Definition#",
            "definition": "# The userMenus getter is responsible for defining the user menus warnings and custom actions. "
          },
          {
            "topic": "Properties#",
            "definition": "# It contains the following properties: id - The id of the user menu. getUserMenuWarnings - The function that returns the user menu warnings. getCustomItems - The function that returns the user menu custom actions. id - The id of the user menu. getUserMenuWarnings - The function that returns the user menu warnings. getCustomItems - The function that returns the user menu custom actions. "
          },
          {
            "topic": "Examples#",
            "definition": "# "
          }
        ],
        "code": [
          {
            "topic": "Definition#",
            "code": "userMenus"
          },
          {
            "topic": "Properties#",
            "code": "idgetUserMenuWarningsgetCustomItems"
          },
          {
            "topic": "Examples#",
            "code": "/**\n * User Menus\n */\npublic override get userMenus(): UserMenu[] {\n    return [\n        {\n            id: 'icf-cookies-custom-user-menu',\n            getUserMenuWarning: (): CustomUserMenuToggleWarning => {\n                ...\n            },\n            getCustomItems: (): Array<CustomUserMenuItem> => {\n                const items = [];\n\n                ...\n\n                return items;\n            }\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "User Menus#",
            "links": [
              {
                "description": "User Menus# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#user-menus"
              }
            ]
          },
          {
            "topic": "Definition#",
            "links": [
              {
                "description": "Definition# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#definition"
              }
            ]
          },
          {
            "topic": "Properties#",
            "links": [
              {
                "description": "Properties# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#properties"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/#examples"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/metadata/user_menus/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Page Sections",
        "definition": [
          {
            "topic": "Page Sections#",
            "definition": "# Page sections can be used to divide the content of a page into different subcategories and allow for easier navigation around the page. They are mainlly componsed by an header and content. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary package icf-cookies-custom. Set the advancedCustomization in the config.json file to true for the customization to have effect: Generated the environment setup, the necessary package icf-cookies-custom. Set the advancedCustomization in the config.json file to true for the customization to have effect: "
          },
          {
            "topic": "Create a Page with Page Sections#",
            "definition": "# Generate a component, by running the following command, at the root of the workspace (command line): Generate a component, by running the following command, at the root of the workspace (command line): The generator will create the component inside the <library-name>/src/lib folder. In there you can find the source file for the generated component (/projects/icf-cookies-custom/src/lib/wizard-new-cookie). Edit the new-cookie-page.component.ts file: Edit the new-cookie-page.component.ts file: Edit the new-cookie-page.component.html file: Edit the new-cookie-page.component.html file: Export the page in the public-api.ts file:\n/*\n * Public API Surface of icf-cookies-custom\n */\n\nexport * from './lib/new-cookie-page/new-cookie-page.component'; Export the page in the public-api.ts file:\n/*\n * Public API Surface of icf-cookies-custom\n */\n\nexport * from './lib/new-cookie-page/new-cookie-page.component'; Edit the icf-cookies-custom-metadata.service.ts file: If you navigate to /NewCookiePage, it should open the page we have just created.   "
          },
          {
            "topic": "How to inject or remove Page Sections#",
            "definition": "# To inject or remove a page section in an existing page:\n\nCreate a component that will hold your custom section:\n\nng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standalone\n\n\nEdit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}\n\n\nEdit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>\n\n\nEdit the injected-custom-section.component.less\n\n:host {\n    display: none;\n}\n\n\nExport the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component';\n\n\nMake sure you have the following components in the metadata.ts file:\n\n@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n} Create a component that will hold your custom section:\n\nng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standalone\n\n\nEdit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}\n\n\nEdit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>\n\n\nEdit the injected-custom-section.component.less\n\n:host {\n    display: none;\n}\n\n\nExport the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Edit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n} Edit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section> Edit the injected-custom-section.component.less\n\n:host {\n    display: none;\n} Export the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Make sure you have the following components in the metadata.ts file:\n\n@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n} To inject or remove a page section in an existing page:\n\nCreate a component that will hold your custom section:\n\nng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standalone\n\n\nEdit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}\n\n\nEdit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>\n\n\nEdit the injected-custom-section.component.less\n\n:host {\n    display: none;\n}\n\n\nExport the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component';\n\n\nMake sure you have the following components in the metadata.ts file:\n\n@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n} To inject or remove a page section in an existing page: Create a component that will hold your custom section:\n\nng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standalone\n\n\nEdit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}\n\n\nEdit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>\n\n\nEdit the injected-custom-section.component.less\n\n:host {\n    display: none;\n}\n\n\nExport the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Edit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n} Edit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section> Edit the injected-custom-section.component.less\n\n:host {\n    display: none;\n} Export the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Make sure you have the following components in the metadata.ts file:\n\n@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n} Create a component that will hold your custom section:\n\nng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standalone\n\n\nEdit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}\n\n\nEdit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>\n\n\nEdit the injected-custom-section.component.less\n\n:host {\n    display: none;\n}\n\n\nExport the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Create a component that will hold your custom section:  Edit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n} Edit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section> Edit the injected-custom-section.component.less\n\n:host {\n    display: none;\n} Export the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Edit the injected-custom-section.component.ts:\n\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n} Edit the injected-custom-section.component.ts:  Edit the injected-custom-section.component.html:\n\n<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section> Edit the injected-custom-section.component.html:  Edit the injected-custom-section.component.less\n\n:host {\n    display: none;\n} Edit the injected-custom-section.component.less  Export the component in the public-api.ts:\n\n/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component'; Export the component in the public-api.ts:  Make sure you have the following components in the metadata.ts file:\n\n@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n} Make sure you have the following components in the metadata.ts file:  If you navigate to /NewCookiePage, it should open the page with the injected page sections.  "
          }
        ],
        "code": [
          {
            "topic": "Before you begin#",
            "code": "true{\n  \"ref\": \"MES\",\n  \"debug\": {\n    \"advancedCustomization\": true\n  },"
          },
          {
            "topic": "Create a Page with Page Sections#",
            "code": "ng generate component NewCookiePage --project icf-cookies-custom --style=less --standaloneimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CustomizableComponent } from 'cmf-core';\nimport {\n  PageSectionModule,\n  PageSectionsModule,\n  BasePageModule,\n  PlaceholderType,\n} from 'cmf-core-controls';\n\n@Component({\n  selector: 'icf-cookies-custom-new-cookie-page',\n  standalone: true,\n  imports: [\n    CommonModule,\n    BasePageModule,\n    PageSectionsModule,\n    PageSectionModule,\n  ],\n  templateUrl: './new-cookie-page.component.html',\n  styleUrls: ['./new-cookie-page.component.less'],\n})\nexport class NewCookiePageComponent extends CustomizableComponent {\n  protected PlaceholderType = PlaceholderType;\n}<cmf-core-controls-base-page mainTitle=\"PageSections 1\">\n    <cmf-core-controls-page-sections>\n        <cmf-core-controls-page-section section-id=\"section-1\" name=\"Section 1\">\n            This is Section 1\n        </cmf-core-controls-page-section>\n\n        <cmf-core-controls-page-section section-id=\"section-2\" name=\"Section 2\" [placeholder]=\"PlaceholderType.Table\">\n            This is Section 2\n        </cmf-core-controls-page-section>\n    </cmf-core-controls-page-sections>\n</cmf-core-controls-base-page>/*\n * Public API Surface of icf-cookies-custom\n */\n\nexport * from './lib/new-cookie-page/new-cookie-page.component';@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n\n    /**\n     * Routes\n     */\n    public override get routes(): RouteConfig[] {\n        return [\n            {\n                id: KnownRoutes.Page,\n                routes: [\n                    {\n                        path: 'NewCookiePage',\n                        loadComponent: () => import(\n                            /* webpackExports: \"NewCookiePageComponent\" */\n                            'icf-cookies-custom').then(m => m.NewCookiePageComponent),\n                        data: {\n                            title: 'NewCookiePage'\n                        }\n                    }\n                ]\n            }\n        ];\n    }\n}"
          },
          {
            "topic": "How to inject or remove Page Sections#",
            "code": "ng generate component InjectedCustomSection --project icf-cookies-custom --style=less --standaloneimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport {\n    DeferInstantiationModule,\n    PageSection,\n    PageSectionModule\n} from 'cmf-core-controls';\n\n@Component({\n    selector: 'icf-cookies-custom-injected-custom-section',\n    standalone: true,\n    imports: [\n        CommonModule,\n        PageSectionModule,\n        DeferInstantiationModule\n    ],\n    styleUrls: ['./injected-custom-section.component.less'],\n    templateUrl: './injected-custom-section.component.html'\n})\nexport class InjectedCustomSectionComponent {\n    @ViewChild(PageSection, { static: true })\n    protected section: PageSection;\n}<cmf-core-controls-page-section section-id=\"CustomSection\" name=\"Custom Section\">\n    <ng-template cmf-core-controls-defer-instantiation>\n        <div>\n            This is a custom section\n        </div>\n    </ng-template>\n</cmf-core-controls-page-section>:host {\n    display: none;\n}/*\n* Public API Surface of icf-cookies-custom\n*/\n\nexport * from './lib/injected-custom-section/injected-custom-section.component';@Injectable()\nexport class IcfCookiesCustomMetadataService extends PackageMetadata {\n    /**\n     * Flex Components\n     */\n    public override get flexComponents(): FlexComponent[] {\n        return [\n            {\n                id: 'cmf-core-controls-page-sections',\n                context: 'icf-cookies-custom-new-cookie-page',\n                subComponentsToAdd: [{\n                    target: {\n                        anchor: 'cmf-core-controls-page-section',\n                        index: 0,\n                        location: FlexComponentLocation.NextTo\n                    },\n                    components: [{\n                        component: () => import(\n                            /* webpackExports: \"InjectedCustomSectionComponent\" */\n                            'icf-cookies-custom').then(m => m.InjectedCustomSectionComponent),\n                        subComponent: 'cmf-core-controls-page-section'\n                    }]\n                }],\n                subComponentsToRemove: [{\n                    target: {\n                        element: 'cmf-core-controls-page-section[section-id=section-1]',\n                        anchor: 'section'\n                    }\n                }]\n            }\n        ];\n    }\n}"
          }
        ],
        "links": [
          {
            "topic": "Page Sections#",
            "links": [
              {
                "description": "Page Sections# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/pagesections/#page-sections"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/pagesections/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Create a Page with Page Sections#",
            "links": [
              {
                "description": "Create a Page with Page Sections# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/pagesections/#create-a-page-with-page-sections"
              },
              {
                "description": "Create a Page with Page Sections# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/page-sections.png"
              }
            ]
          },
          {
            "topic": "How to inject or remove Page Sections#",
            "links": [
              {
                "description": "How to inject or remove Page Sections# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/pagesections/#how-to-inject-or-remove-page-sections"
              },
              {
                "description": "How to inject or remove Page Sections# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/injected-page-sections.png"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/pagesections/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Routing",
        "definition": [
          {
            "topic": "Routing#",
            "definition": "# This section describes the routing strategy in the UI. "
          },
          {
            "topic": "Base Page#",
            "definition": "# The routing module for a base page has an array of routes that indicate the path for a specific component. In the NgModule, the routes are added to the RouterModule and the component module is added to the imports array. Example of the routing module for the base page of BaseExample "
          },
          {
            "topic": "Entity Page#",
            "definition": "# The Entity Page also has a routing module like the base page. The routes are built based on the entity type metadata; that is, besides the base route to the entity page, they also include the generic and specified views in the metadata. Example of the routing module for the entity type ET "
          },
          {
            "topic": "Views#",
            "definition": "# The routing module for a view is similar to the routing module for a base page, but the component module doesn't need to be added to the imports array. Example of a Routing Module for a View "
          },
          {
            "topic": "Metadata#",
            "definition": "# For more information about the metadata routing, see Routes. Routes For more information about RouterModule, see RouterModule documentation ⧉. For more information about RouterModule, see RouterModule documentation ⧉. RouterModule documentation ⧉ "
          }
        ],
        "code": [
          {
            "topic": "Base Page#",
            "code": "pathcomponentRouterModuleimportsBaseExampleimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { Routes } from 'cmf-core';\n\nimport { PageBaseExampleComponent, PageBaseExampleModule } from './page-base-example.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PageBaseExampleComponent\n    }\n];\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        PageBaseExampleModule\n    ]\n})\nexport class PageBaseExampleRoutingModule { }"
          },
          {
            "topic": "Entity Page#",
            "code": "ETimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { EntityTypeMetadataService } from 'cmf-core';\n\nimport { PageETComponent, PageETModule } from './page-et.component';\n\n// Get the routes from the metadata for the entity type ET\nconst routes = EntityTypeMetadataService.getRoutes('ET', PageETComponent);\n\n@NgModule({\n    imports: [\n        RouterModule.forChild(routes),\n        PageETModule\n    ]\n})\nexport class PageETRoutingModule { }"
          },
          {
            "topic": "Views#",
            "code": "importsimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { Routes } from 'cmf-core';\n\nimport { PageETDetailsView } from './page-et-details-view.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PageETDetailsView\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)]\n})\nexport class PageETDetailsViewRoutingModule { }"
          },
          {
            "topic": "Metadata#",
            "code": "RouterModule"
          }
        ],
        "links": [
          {
            "topic": "Routing#",
            "links": [
              {
                "description": "Routing# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/#routing"
              }
            ]
          },
          {
            "topic": "Base Page#",
            "links": [
              {
                "description": "Base Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/#base-page"
              }
            ]
          },
          {
            "topic": "Entity Page#",
            "links": [
              {
                "description": "Entity Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/#entity-page"
              }
            ]
          },
          {
            "topic": "Views#",
            "links": [
              {
                "description": "Views# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/#views"
              }
            ]
          },
          {
            "topic": "Metadata#",
            "links": [
              {
                "description": "Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/routing/#metadata"
              },
              {
                "description": "Metadata# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/metadata/routes/"
              },
              {
                "description": "Metadata# (3)",
                "link": "https://angular.io/api/router/RouterModule"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/routing/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Services",
        "definition": [
          {
            "topic": "Services#",
            "definition": "# This section describes the concept of a service in the context of the Critical Manufacturing User Interface. "
          },
          {
            "topic": "UI Services#",
            "definition": "# The Critical Manufacturing User Interface provides a set of services that can be used to access data and logic that is shared across multiple components. These services are available for use in any component or service in the application. The following are examples of services available: AppContextService - Provides access and handles the context of the application. It offers access to application context and various methods, such as retrieving information about the running application and managing changes in accessibility. AppSettingsService - Provides access and handles the application settings. It offers access to application settings and various methods, such as loading the theme and culture configuration and the current locale. BusinessSettingsService - Provides access and handles the business settings. It offers access to business settings and various methods, such as getting and updating user configuration. ConfigService - Provides access to the configuration present in the config.json. DeviceService - Provides access and handles the device. It offers access to device information and various methods, such as getting the device and browser information. DOMService - Provides access and handles the DOM. It offers access to DOM information and various methods, such as finding and appending elements to the DOM. FeedbackService - Provides methods to handle the feedback. It offers various methods, such as starting and stopping a progress indicator and emitting information, error, warning, or success toasts. FileService - Provides methods to handle files. It offers various methods, such as getting a file, generating thumbnails, and checking if the file already exists. FormatterService - Provides access and handles the formatting. It offers access to formatting information and various methods, such as formatting dates, numbers, and strings. JSONService - Provides methods to handle JSON. It offers various methods, such as parsing and stringifying JSON. LboService - Provides access and handles the LBO calls. It offers access to necessary request headers and various methods, such as API calls and downloading blobs. LoadBalancerService - Provides access and handles the load balancer. It offers access to load balancer information and various methods, such as getting the current host address. LoggerService - Provides methods to handle logging. It offers various methods, such as logging messages and errors. MediaCaptureService - Provides methods to handle media capture. It offers various methods, such as validating cameras and start and stop capturing. MediatorService - Provides methods to handle the mediator. It offers various methods, such as subscribing to events and publishing events. MessageBusService - Provides methods to handle the message bus. It offers various methods, such as subscribing to events and publishing events. NavigationService - Provides methods to handle navigation. It offers various methods, such as navigating to a URL and navigating by action. UtilService - Provides access and utility methods. It offers access to utility methods and various methods, such as validating if a string is null or whitespace and comparing two values using a given field operator. AppContextService - Provides access and handles the context of the application. It offers access to application context and various methods, such as retrieving information about the running application and managing changes in accessibility. AppSettingsService - Provides access and handles the application settings. It offers access to application settings and various methods, such as loading the theme and culture configuration and the current locale. BusinessSettingsService - Provides access and handles the business settings. It offers access to business settings and various methods, such as getting and updating user configuration. ConfigService - Provides access to the configuration present in the config.json. DeviceService - Provides access and handles the device. It offers access to device information and various methods, such as getting the device and browser information. DOMService - Provides access and handles the DOM. It offers access to DOM information and various methods, such as finding and appending elements to the DOM. FeedbackService - Provides methods to handle the feedback. It offers various methods, such as starting and stopping a progress indicator and emitting information, error, warning, or success toasts. FileService - Provides methods to handle files. It offers various methods, such as getting a file, generating thumbnails, and checking if the file already exists. FormatterService - Provides access and handles the formatting. It offers access to formatting information and various methods, such as formatting dates, numbers, and strings. JSONService - Provides methods to handle JSON. It offers various methods, such as parsing and stringifying JSON. LboService - Provides access and handles the LBO calls. It offers access to necessary request headers and various methods, such as API calls and downloading blobs. LoadBalancerService - Provides access and handles the load balancer. It offers access to load balancer information and various methods, such as getting the current host address. LoggerService - Provides methods to handle logging. It offers various methods, such as logging messages and errors. MediaCaptureService - Provides methods to handle media capture. It offers various methods, such as validating cameras and start and stop capturing. MediatorService - Provides methods to handle the mediator. It offers various methods, such as subscribing to events and publishing events. MessageBusService - Provides methods to handle the message bus. It offers various methods, such as subscribing to events and publishing events. NavigationService - Provides methods to handle navigation. It offers various methods, such as navigating to a URL and navigating by action. UtilService - Provides access and utility methods. It offers access to utility methods and various methods, such as validating if a string is null or whitespace and comparing two values using a given field operator. "
          },
          {
            "topic": "Examples#",
            "definition": "# For more information about dependency injection, see Introduction to services and dependency injection ⧉ For more information about providing services, see Providing Angular Services ⧉ For more information about dependency injection, see Introduction to services and dependency injection ⧉ Introduction to services and dependency injection ⧉ For more information about providing services, see Providing Angular Services ⧉ Providing Angular Services ⧉ "
          }
        ],
        "code": [
          {
            "topic": "UI Services#",
            "code": "AppContextServiceAppSettingsServiceBusinessSettingsServiceConfigServiceconfig.jsonDeviceServiceDOMServiceFeedbackServiceFileServiceFormatterServiceJSONServiceLboServiceLoadBalancerServiceLoggerServiceMediaCaptureServiceMediatorServiceMessageBusServiceNavigationServiceUtilService"
          },
          {
            "topic": "Examples#",
            "code": "import { Component } from '@angular/core';\nimport { ExampleService } from './example.service';\n\n@Component({\n    selector: 'app-example',\n    templateUrl: './example.component.html',\n    styleUrls: ['./example.component.less']\n})\nexport class ExampleComponent {\n    constructor(private lbo: LboService) { }\n}"
          }
        ],
        "links": [
          {
            "topic": "Services#",
            "links": [
              {
                "description": "Services# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/services/#services"
              }
            ]
          },
          {
            "topic": "UI Services#",
            "links": [
              {
                "description": "UI Services# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/services/#ui-services"
              }
            ]
          },
          {
            "topic": "Examples#",
            "links": [
              {
                "description": "Examples# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/services/#examples"
              },
              {
                "description": "Examples# (2)",
                "link": "https://angular.io/guide/architecture-services"
              },
              {
                "description": "Examples# (3)",
                "link": "https://angular.io/guide/architecture-services#providing-services"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/services/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "UI Page",
        "definition": [
          {
            "topic": "UI Page#",
            "definition": "# In a UIPage you can use a variety of widgets to view or edit information. There are framework widgets or you can create your own as in the previous section of this tutorial. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary library icf-cookies-custom and the widget CookiesWidgetCatalogue. Generated the environment setup, the necessary library icf-cookies-custom and the widget CookiesWidgetCatalogue. "
          },
          {
            "topic": "Creating an UI Page#",
            "definition": "# In the main menu, go to Business Data and click in UI Page (you can use the filter in the right): In the main menu, go to Business Data and click in UI Page (you can use the filter in the right):   Click on New, fill the Name field and select UI Type: Page. Click on New, fill the Name field and select UI Type: Page.   Then got to Build mode and you will see on the right side, a menu with a list of widgets (framework and custom). Drag and drop the custom widget created in the previous step of this tutorial, into the grid: Then got to Build mode and you will see on the right side, a menu with a list of widgets (framework and custom). Drag and drop the custom widget created in the previous step of this tutorial, into the grid:   Click Save and Preview to see your newly created UI Page. Click Save and Preview to see your newly created UI Page. "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have created a UI Page with your own custom widget. "
          },
          {
            "topic": "More Information#",
            "definition": "# The UI Page is one of the most powerful features of this GUI. An UI Page can be built with system widgets, custom widgets and other UI Pages, all interchanging information. In the toolbar, when Settings is clicked, it opens the Page builder settings that gives access to the page definition, layouts, properties, action buttons, data sources and links. After an UI Page is built, it can be configured to be accessed directly by menu. This provides a more easy access to a simpler or more complex interface to the end user. There is also the possibility to resolve UIPages for particular UI Actions and contexts. For more information, check the UIPageContext ⧉ page in the User Guide. UIPageContext ⧉ "
          }
        ],
        "code": [],
        "links": [
          {
            "topic": "UI Page#",
            "links": [
              {
                "description": "UI Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipage/#ui-page"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipage/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating an UI Page#",
            "links": [
              {
                "description": "Creating an UI Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipage/#creating-an-ui-page"
              },
              {
                "description": "Creating an UI Page# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage.png"
              },
              {
                "description": "Creating an UI Page# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-new.png"
              },
              {
                "description": "Creating an UI Page# (4)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipage-widget.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipage/#conclusion"
              }
            ]
          },
          {
            "topic": "More Information#",
            "links": [
              {
                "description": "More Information# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipage/#more-information"
              },
              {
                "description": "More Information# (2)",
                "link": "http://help.criticalmanufacturing.com/userguide/administration/tables/smart-tables/uipagecontext/"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/uipage/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Button Injection",
        "definition": [
          {
            "topic": "Button Injection#",
            "definition": "# It is possible to inject or remove buttons in UIPages, Cluster Pages, Entity Search Pages and Entity Pages by using metadata, providing a way to add access to specific operations directly in contexts that benefit business workflows and speed up tasks. "
          },
          {
            "topic": "Adding Buttons through Metadata#",
            "definition": "# Below are examples of how to add buttons to a UI Page, a Cluster Page, an Entity Search Page and an Entity Page. "
          },
          {
            "topic": "UI Page#",
            "definition": "# This example shows you how to inject an action button for the getFactoryLayout action in a UI Page: To define the UI Page that will receive the button, you must check the name of the UI Page under Administration > UI Pages and insert it into the metadata as described in the picture above. "
          },
          {
            "topic": "Cluster Page#",
            "definition": "# A similar procedure is applied to injecting buttons in a Cluster Page.   To define which Cluster Page will receive the button, you must check the name of the Cluster Page under Administration > UI Pages and insert it into the metadata as described in the picture above. "
          },
          {
            "topic": "Entity Search Page#",
            "definition": "# Just as it is done for UI Pages and Cluster Pages, to inject an Action Button in an Entity Search Page it is only needed to add the Action Button Id to the elementsToAdd of the Action Bar in case. So, if the goal is to inject a button in an Entity Search Page, the Action Bar Id must follow the convention: Shell.Page.EntitySearch.{EntityTypeName} Taking the Resource Entity Search Page as an example: After navigating to /Entity/Resource, the custom Action Button will now be available:   If, instead of injecting in the Resource Entity Search Page, we want to inject in the Area Entity Search Page: After navigating to /Entity/Area, the custom Action Button will now be available:   "
          },
          {
            "topic": "Entity Page#",
            "definition": "# The only difference between injecting a button in an Entity Search Page and in an Entity Page is the Action bar Id. In this case, the Action Bar Id must follow the convention: cmf.core.business.controls.entityPage.{EntityTypeName} Taking the Resource Entity Page as an example: By Navigating to /Entity/Resource/{ResourceId}, the custom Action Button will now be available:   If, instead of injecting in the Resource Entity Page, we want to inject in the Area Entity Page: By Navigating to /Entity/Area/{AreaId}, the custom Action Button will now be available:   "
          },
          {
            "topic": "Removing Buttons through Metadata#",
            "definition": "# To remove an existing Action Button through Metadata you need to get the Action Button Id. For that, the DevTools console of Chrome can be used as the following image shows:   Once the Action button Id that we want to remove is known, it is possible to use the elementsToRemove array to remove that Action Button from a specific Action Bar. Then, by opening the Area Entity Page, the Edit Action Button will no longer be visible   "
          },
          {
            "topic": "Conclusion#",
            "definition": "# You now know how to add and remove buttons in a UI Page, a Cluster Page, an Entity Search Page and an Entity Page. "
          }
        ],
        "code": [
          {
            "topic": "UI Page#",
            "code": "getFactoryLayout/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'UIPage_FabExplorer',\n            elementsToAdd: [\n                {\n                    id: 'customization.getFactoryLayout',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}Administration > UI Pages"
          },
          {
            "topic": "Cluster Page#",
            "code": "Administration > UI Pages"
          },
          {
            "topic": "Entity Search Page#",
            "code": "Shell.Page.EntitySearch.{EntityTypeName}/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'Shell.Page.EntitySearch.Resource',\n            elementsToAdd: [\n                {\n                    id: 'CustomActionButton.Id',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}/Entity/Resource/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'Shell.Page.EntitySearch.Area',\n            elementsToAdd: [\n                {\n                    id: 'CustomActionButton.Id',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}/Entity/Area"
          },
          {
            "topic": "Entity Page#",
            "code": "cmf.core.business.controls.entityPage.{EntityTypeName}/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'cmf.core.business.controls.entityPage.Resource',\n            elementsToAdd: [\n                {\n                    id: 'CustomActionButton.Id',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}/Entity/Resource/{ResourceId}/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'cmf.core.business.controls.entityPage.Area',\n            elementsToAdd: [\n                {\n                    id: 'CustomActionButton.Id',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}/Entity/Area/{AreaId}"
          },
          {
            "topic": "Removing Buttons through Metadata#",
            "code": "elementsToRemove/**\n * Action Bars\n */\npublic override get actionBars(): ActionBar[] {\n    return [\n        {\n            id: 'cmf.core.business.controls.entityPage.Area',\n            elementsToRemove: [\n                {\n                    id: 'CustomActionButton.Id',\n                    type: ActionBarElementType.ACTION_BUTTON\n                }\n            ]\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Button Injection#",
            "links": [
              {
                "description": "Button Injection# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#button-injection"
              }
            ]
          },
          {
            "topic": "Adding Buttons through Metadata#",
            "links": [
              {
                "description": "Adding Buttons through Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#adding-buttons-through-metadata"
              }
            ]
          },
          {
            "topic": "UI Page#",
            "links": [
              {
                "description": "UI Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#ui-page"
              }
            ]
          },
          {
            "topic": "Cluster Page#",
            "links": [
              {
                "description": "Cluster Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#cluster-page"
              },
              {
                "description": "Cluster Page# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_03.png"
              }
            ]
          },
          {
            "topic": "Entity Search Page#",
            "links": [
              {
                "description": "Entity Search Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#entity-search-page"
              },
              {
                "description": "Entity Search Page# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_11.png"
              },
              {
                "description": "Entity Search Page# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_12.png"
              }
            ]
          },
          {
            "topic": "Entity Page#",
            "links": [
              {
                "description": "Entity Page# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#entity-page"
              },
              {
                "description": "Entity Page# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_15.png"
              },
              {
                "description": "Entity Page# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_14.png"
              }
            ]
          },
          {
            "topic": "Removing Buttons through Metadata#",
            "links": [
              {
                "description": "Removing Buttons through Metadata# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#removing-buttons-through-metadata"
              },
              {
                "description": "Removing Buttons through Metadata# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_05.png"
              },
              {
                "description": "Removing Buttons through Metadata# (3)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/uipagebuttons_07.png"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/#conclusion"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Widget",
        "definition": [
          {
            "topic": "Widget#",
            "definition": "# Now we'll create a widget that will wrap our component, giving it more functionalities, like the ability to use it in a UI Page. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. Generated the environment setup, the necessary package icf-cookies-custom and the component CookiesCatalogue. "
          },
          {
            "topic": "Creating a widget#",
            "definition": "# At the root of the package, run (command line): At the root of the package, run (command line): The generator will create the converter inside the /src/lib folder. In there you can find the source file for the generated converter (/projects/icf-cookies-custom/src/lib/cookies-widget-catalogue-widget). "
          },
          {
            "topic": "Editing the widget#",
            "definition": "# Edit the cookies-widget-catalogue-widget.component.ts: Edit the cookies-widget-catalogue-widget.component.html: Edit the cookies-widget-catalogue-widget.component.html: "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have created a custom widget that can be used in a UI Page. "
          },
          {
            "topic": "More Information#",
            "definition": "# The widget is a component to use in the UI Pages. If you check the generated files, you'll see some related to settings, that can be used to customize the settings of the widget. A widget can have links, that connect them to other widgets in the UI Page. This is how information is passed between widgets. When you're in build mode (UI Page), the settings are available in the top right corner of the widget. "
          }
        ],
        "code": [
          {
            "topic": "Creating a widget#",
            "code": "ng generate widget CookiesWidgetCatalogue"
          },
          {
            "topic": "Editing the widget#",
            "code": "import {\n    CookiesCatalogueModule\n} from '../cookies-catalogue/cookies-catalogue.component'\n\n(...)\n\n@Widget({\n    name: $localize`:@@icf-cookies-custom/cookies-widget-catalogue-widget#NAME:Cookies Widget Catalogue Widget`,\n    iconClass: 'icon-core-st-lg-generic',\n    settingsComponent: {\n        component: CookiesWidgetCatalogueWidgetSettingsComponent\n    }\n})\n@Component({\n    standalone: true,\n    selector: 'icf-cookies-custom-cookies-widget-catalogue-widget',\n    imports: [CommonModule],\n    templateUrl: './cookies-widget-catalogue-widget.component.html',\n    styleUrls: ['./cookies-widget-catalogue-widget.component.less']\n})\n\nexport class CookiesWidgetCatalogueWidget extends WidgetGeneric implements WidgetRepresentation {\n\n    /**\n     * Defines how the widget will be represented\n     */\n    public uiWidgetViewMode: WidgetViewMode = WidgetViewMode.Normal;\n\n    /**\n     * Constructor\n     */\n    constructor(\n        viewContainerRef: ViewContainerRef,\n        elementRef: ElementRef,\n        feedback: FeedbackService\n    ) {\n        super(viewContainerRef, elementRef, feedback);\n    }\n}<icf-cookies-custom-cookies-catalogue></icf-cookies-custom-cookies-catalogue>"
          }
        ],
        "links": [
          {
            "topic": "Widget#",
            "links": [
              {
                "description": "Widget# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#widget"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a widget#",
            "links": [
              {
                "description": "Creating a widget# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#creating-a-widget"
              }
            ]
          },
          {
            "topic": "Editing the widget#",
            "links": [
              {
                "description": "Editing the widget# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#editing-the-widget"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#conclusion"
              }
            ]
          },
          {
            "topic": "More Information#",
            "links": [
              {
                "description": "More Information# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/widget/#more-information"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/widget/",
        "flag": true,
        "submodulos": []
      },
      {
        "topic": "Wizard",
        "definition": [
          {
            "topic": "Wizard#",
            "definition": "# A Wizard is a GUI that guides the user through multiple steps (or just one step) for the completion of transaction. "
          },
          {
            "topic": "Before you begin#",
            "definition": "# Make sure you: Generated the environment setup, the necessary package icf-cookies-custom, the component CookiesCatalogue and the Action Bar. Set the advancedCustomization in the config.json file to true for the customization to have effect: Generated the environment setup, the necessary package icf-cookies-custom, the component CookiesCatalogue and the Action Bar. Set the advancedCustomization in the config.json file to true for the customization to have effect: "
          },
          {
            "topic": "Creating a Wizard#",
            "definition": "# Generate a wizard template, by running the following command, at the root of the package (command line): Generate a wizard template, by running the following command, at the root of the package (command line): ? What is the name of the entity type to be performed? Cookie ? What is the business objects namespace of the entity type? Other (specify) ? Namespace Custom ? What is the name of the entity type to be performed? Cookie ? What is the business objects namespace of the entity type? Other (specify) ? Namespace Custom The generator will create the wizard inside the <library-name>/src/lib folder. In there you can find the source file for the generated wizard (/projects/icf-cookies-custom/src/lib/wizard-new-cookie). Edit the wizard-new-cookie.component.html file: Edit the wizard-new-cookie.component.html file: Edit the wizard-new-cookie.component.ts file: Edit the wizard-new-cookie.component.ts file: Edit the icf-cookies-custom-metadata.service.ts file: If you go to the action bar and click on the New Cookie button, it should open a wizard as a modal dialog.   "
          },
          {
            "topic": "How to Inject a Step#",
            "definition": "# To inject a step, make sure you have the following components in the metadata.ts file: To inject a step, make sure you have the following components in the metadata.ts file: "
          },
          {
            "topic": "Conclusion#",
            "definition": "# Now you have created a custom Wizard and linked it to an action in an action bar, go to your Catalogue page and click on the action button to show the dialog. "
          }
        ],
        "code": [
          {
            "topic": "Before you begin#",
            "code": "true{\n  \"ref\": \"MES\",\n  \"debug\": {\n    \"isEnabled\": true,\n    \"advancedCustomization\": true\n  },"
          },
          {
            "topic": "Creating a Wizard#",
            "code": "ng generate wizard NewCookie<cmf-core-controls-wizard\n    cmf-core-business-controls-transaction-wizard\n    i18n-mainTitle=\"@@icf-cookies-custom/wizard-new-cookie#TITLE\"\n    mainTitle=\"New Cookie\"\n    i18n-action-name=\"@@icf-cookies-custom/wizard-new-cookie#ACTION\"\n    action-name=\"Finish\">\n    <!-- Wizard steps -->\n    <cmf-core-controls-wizard-step\n        i18n-mainTitle=\"@@icf-cookies-custom/wizard-new-cookie#NAME\"\n        mainTitle=\"Name\">\n        <!-- the following property editor can be stored in a custom component and be used here -->\n            <cmf-core-business-controls-propertyEditor\n                i18n-label=\"@@icf-cookies-custom/wizard-new-cookie#COOKIE_NAME\"\n                label=\"Cookie name\"\n                i18n-placeholder=\"@@icf-cookies-custom/wizard-new-cookie#name.PLACEHOLDER\"\n                placeholder=\"chocolate chip\"\n                [required]=\"true\"\n                valueType=\"String\"\n                [(value)]=\"cookieName\">\n            </cmf-core-business-controls-propertyEditor>\n    </cmf-core-controls-wizard-step>\n\n    <cmf-core-controls-wizard-step\n        i18n-mainTitle=\"@@icf-cookies-custom/wizard-new-cookie#DESCRIPTION\"\n        mainTitle=\"DESCRIPTION\">\n            <cmf-core-business-controls-propertyEditor\n                i18n-label=\"@@icf-cookies-custom/wizard-new-cookie#COOKIE_DESCRIPTION\"\n                label=\"Cookie description\"\n                i18n-placeholder=\"@@icf-cookies-custom/wizard-new-cookie#description.PLACEHOLDER\"\n                placeholder=\"cookie covered in chocolate chips\"\n                [required]=\"false\"\n                valueType=\"String\"\n                [(value)]=\"cookieDescription\">\n            </cmf-core-business-controls-propertyEditor>\n    </cmf-core-controls-wizard-step>\n</cmf-core-controls-wizard>import { PropertyEditorModule } from 'cmf-core-business-controls';\n\n(...)\n\n@Component({\n    standalone: true,\n    selector: 'icf-cookies-custom-wizard-new-cookie',\n    imports: [CommonModule, TransactionWizardModule, PropertyEditorModule],\n    templateUrl: './wizard-new-cookie.component.html',\n    styleUrls: ['./wizard-new-cookie.component.less'],\n    viewProviders: [{ provide: HOST_VIEW_COMPONENT, useExisting: forwardRef(() => WizardNewCookieComponent) }]\n})\nexport class WizardNewCookieComponent extends CustomizableComponent implements OnInit, TransactionWizard {\n    public cookieName: string;\n    public cookieDescription: string;\n    (...)\n}/**\n * Action Buttons\n */\npublic override get actionButtons(): ActionButton[] {\n    return [\n        {\n            id: 'Cookies.NewCookie',\n            title: $localize`:@@icf-cookies-custom/main#New_COOKIE:New Cookie`,\n            actionId: 'Cookie.New',\n        },\n    ];\n}\n\n(...)\n\n/**\n * Actions\n */\npublic override get actions(): Action[] {\n    return [\n        {\n            id: 'Cookie.New',\n            loadComponent: () => import(\n                /* webpackExports: \"WizardNewCookieComponent\" */\n                'icf-cookies-custom').then(m => m.WizardNewCookieComponent),\n            mode: ActionMode.ModalPage\n        }\n    ];\n}"
          },
          {
            "topic": "How to Inject a Step#",
            "code": "/**\n * Flex Components\n */\npublic override get flexComponents(): FlexComponent[] {\n    return [\n        {\n            id: 'cmf-core-controls-wizard',\n            context: 'cmf-test-wizard',\n            subComponentsToAdd: [{\n                target: {\n                    // If we were to insert this step at index 0, in the DOM using a NextTo approach,\n                    // the component would still be placed in index 1.\n                    // Afterwards the wizard logic itself would be able to show the step as the first one\n                    // because the business logic is prepared to do so.\n                    // An alternative would be using the Into approach where an anchor is required to tell\n                    // where to place the component. It will be a simply of the anchor element.\n                    // **********USING APPROACH NextTo*********************\n                    anchor: 'cmf-core-controls-wizard-step',\n                    index: 1,\n                    location: FlexComponentLocation.NextTo\n\n                    // **********USING APPROACH Into*********************\n                    // element: \"cmf-core-controls-wizard\",\n                    // location: FlexComponentLocation.Into,\n                    // anchor: \"wizardStep\"\n                },\n                components: [\n                    {\n                        component: () => import(\n                            /* webpackExports: \"InjectedStep\" */\n                            'cmf-core-examples').then(m => m.InjectedStep),\n                        subComponent: 'cmf-core-controls-wizard-step'\n                    }\n                ]\n            }]\n        }\n    ];\n}"
          }
        ],
        "links": [
          {
            "topic": "Wizard#",
            "links": [
              {
                "description": "Wizard# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/wizard/#wizard"
              }
            ]
          },
          {
            "topic": "Before you begin#",
            "links": [
              {
                "description": "Before you begin# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/wizard/#before-you-begin"
              }
            ]
          },
          {
            "topic": "Creating a Wizard#",
            "links": [
              {
                "description": "Creating a Wizard# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/wizard/#creating-a-wizard"
              },
              {
                "description": "Creating a Wizard# (2)",
                "link": "https://developer.criticalmanufacturing.com/presentation/images/wizard-done.png"
              }
            ]
          },
          {
            "topic": "How to Inject a Step#",
            "links": [
              {
                "description": "How to Inject a Step# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/wizard/#how-to-inject-a-step"
              }
            ]
          },
          {
            "topic": "Conclusion#",
            "links": [
              {
                "description": "Conclusion# (1)",
                "link": "https://developer.criticalmanufacturing.com/presentation/wizard/#conclusion"
              }
            ]
          }
        ],
        "href": "https://developer.criticalmanufacturing.com/presentation/wizard/",
        "flag": true,
        "submodulos": []
      }
    ],
    "code": [],
    "links": [
      {
        "topic": "Presentation Tier#",
        "links": [
          {
            "description": "Presentation Tier# (1)",
            "link": "https://developer.criticalmanufacturing.com/presentation/#presentation-tier"
          },
          {
            "description": "Presentation Tier# (2)",
            "link": "https://developer.criticalmanufacturing.com/presentation/environmentsetup/"
          },
          {
            "description": "Presentation Tier# (3)",
            "link": "https://developer.criticalmanufacturing.com/presentation/application/"
          },
          {
            "description": "Presentation Tier# (4)",
            "link": "https://developer.criticalmanufacturing.com/presentation/library/"
          },
          {
            "description": "Presentation Tier# (5)",
            "link": "https://developer.criticalmanufacturing.com/presentation/metadata/"
          },
          {
            "description": "Presentation Tier# (6)",
            "link": "https://developer.criticalmanufacturing.com/presentation/localization/"
          },
          {
            "description": "Presentation Tier# (7)",
            "link": "https://developer.criticalmanufacturing.com/presentation/routing/"
          },
          {
            "description": "Presentation Tier# (8)",
            "link": "https://developer.criticalmanufacturing.com/presentation/services/"
          },
          {
            "description": "Presentation Tier# (9)",
            "link": "https://developer.criticalmanufacturing.com/presentation/component/"
          },
          {
            "description": "Presentation Tier# (10)",
            "link": "https://developer.criticalmanufacturing.com/presentation/menu/"
          },
          {
            "description": "Presentation Tier# (11)",
            "link": "https://developer.criticalmanufacturing.com/presentation/widget/"
          },
          {
            "description": "Presentation Tier# (12)",
            "link": "https://developer.criticalmanufacturing.com/presentation/uipage/"
          },
          {
            "description": "Presentation Tier# (13)",
            "link": "https://developer.criticalmanufacturing.com/presentation/converter/"
          },
          {
            "description": "Presentation Tier# (14)",
            "link": "https://developer.criticalmanufacturing.com/presentation/datasource/"
          },
          {
            "description": "Presentation Tier# (15)",
            "link": "https://developer.criticalmanufacturing.com/presentation/actionbar/"
          },
          {
            "description": "Presentation Tier# (16)",
            "link": "https://developer.criticalmanufacturing.com/presentation/wizard/"
          },
          {
            "description": "Presentation Tier# (17)",
            "link": "https://developer.criticalmanufacturing.com/presentation/executionview/"
          },
          {
            "description": "Presentation Tier# (18)",
            "link": "https://developer.criticalmanufacturing.com/presentation/basicinformation/"
          },
          {
            "description": "Presentation Tier# (19)",
            "link": "https://developer.criticalmanufacturing.com/presentation/entitypageviews/"
          },
          {
            "description": "Presentation Tier# (20)",
            "link": "https://developer.criticalmanufacturing.com/presentation/compareentityview/"
          },
          {
            "description": "Presentation Tier# (21)",
            "link": "https://developer.criticalmanufacturing.com/presentation/uipagebuttoninjection/"
          },
          {
            "description": "Presentation Tier# (22)",
            "link": "https://developer.criticalmanufacturing.com/presentation/layout/"
          },
          {
            "description": "Presentation Tier# (23)",
            "link": "https://developer.criticalmanufacturing.com/presentation/pagesections/"
          }
        ]
      }
    ]
  }
]
}